{"mappings":"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","sources":["<anon>","demo/app.ts","node_modules/lit-html/lit-html.js","node_modules/lit-html/src/lit-html.ts","node_modules/lit-html/directives/repeat.js","node_modules/lit-html/src/directives/repeat.ts","node_modules/lit-html/directive.js","node_modules/lit-html/src/directive.ts","node_modules/lit-html/directive-helpers.js","node_modules/lit-html/src/directive-helpers.ts","demo/pages/index.ts","demo/pages/point.ts","src/point.ts","demo/utils.ts","demo/pages/angle.ts","src/angle.ts","src/vector.ts","demo/pages/intersection.ts","src/intersection.ts","src/index.ts","src/types.ts","src/physics.ts","src/PhysicalBody.ts","demo/pages/vector.ts","demo/pages/physics.ts","demo/pages/body.ts"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */ const $e5ed8027d647799b$var$t = globalThis, $e5ed8027d647799b$var$i = $e5ed8027d647799b$var$t.trustedTypes, $e5ed8027d647799b$var$s = $e5ed8027d647799b$var$i ? $e5ed8027d647799b$var$i.createPolicy(\"lit-html\", {\n    createHTML: (t)=>t\n}) : void 0, $e5ed8027d647799b$var$e = \"$lit$\", $e5ed8027d647799b$var$h = `lit$${Math.random().toFixed(9).slice(2)}$`, $e5ed8027d647799b$var$o = \"?\" + $e5ed8027d647799b$var$h, $e5ed8027d647799b$var$n = `<${$e5ed8027d647799b$var$o}>`, $e5ed8027d647799b$var$r = document, $e5ed8027d647799b$var$l = ()=>$e5ed8027d647799b$var$r.createComment(\"\"), $e5ed8027d647799b$var$c = (t)=>null === t || \"object\" != typeof t && \"function\" != typeof t, $e5ed8027d647799b$var$a = Array.isArray, $e5ed8027d647799b$var$u = (t)=>$e5ed8027d647799b$var$a(t) || \"function\" == typeof t?.[Symbol.iterator], $e5ed8027d647799b$var$d = \"[ \\t\\n\\f\\r]\", $e5ed8027d647799b$var$f = /<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g, $e5ed8027d647799b$var$v = /-->/g, $e5ed8027d647799b$var$_ = />/g, $e5ed8027d647799b$var$m = RegExp(`>|${$e5ed8027d647799b$var$d}(?:([^\\\\s\"'>=/]+)(${$e5ed8027d647799b$var$d}*=${$e5ed8027d647799b$var$d}*(?:[^ \\t\\n\\f\\r\"'\\`<>=]|(\"|')|))|$)`, \"g\"), $e5ed8027d647799b$var$p = /'/g, $e5ed8027d647799b$var$g = /\"/g, $e5ed8027d647799b$var$$ = /^(?:script|style|textarea|title)$/i, $e5ed8027d647799b$var$y = (t)=>(i, ...s)=>({\n            _$litType$: t,\n            strings: i,\n            values: s\n        }), $e5ed8027d647799b$export$c0bb0b647f701bb5 = $e5ed8027d647799b$var$y(1), $e5ed8027d647799b$export$7ed1367e7fa1ad68 = $e5ed8027d647799b$var$y(2), $e5ed8027d647799b$export$47d5b44d225be5b4 = $e5ed8027d647799b$var$y(3), $e5ed8027d647799b$export$9c068ae9cc5db4e8 = Symbol.for(\"lit-noChange\"), $e5ed8027d647799b$export$45b790e32b2810ee = Symbol.for(\"lit-nothing\"), $e5ed8027d647799b$var$A = new WeakMap, $e5ed8027d647799b$var$C = $e5ed8027d647799b$var$r.createTreeWalker($e5ed8027d647799b$var$r, 129);\nfunction $e5ed8027d647799b$var$P(t, i) {\n    if (!$e5ed8027d647799b$var$a(t) || !t.hasOwnProperty(\"raw\")) throw Error(\"invalid template strings array\");\n    return void 0 !== $e5ed8027d647799b$var$s ? $e5ed8027d647799b$var$s.createHTML(i) : i;\n}\nconst $e5ed8027d647799b$var$V = (t, i)=>{\n    const s = t.length - 1, o = [];\n    let r, l = 2 === i ? \"<svg>\" : 3 === i ? \"<math>\" : \"\", c = $e5ed8027d647799b$var$f;\n    for(let i = 0; i < s; i++){\n        const s = t[i];\n        let a, u, d = -1, y = 0;\n        for(; y < s.length && (c.lastIndex = y, u = c.exec(s), null !== u);)y = c.lastIndex, c === $e5ed8027d647799b$var$f ? \"!--\" === u[1] ? c = $e5ed8027d647799b$var$v : void 0 !== u[1] ? c = $e5ed8027d647799b$var$_ : void 0 !== u[2] ? ($e5ed8027d647799b$var$$.test(u[2]) && (r = RegExp(\"</\" + u[2], \"g\")), c = $e5ed8027d647799b$var$m) : void 0 !== u[3] && (c = $e5ed8027d647799b$var$m) : c === $e5ed8027d647799b$var$m ? \">\" === u[0] ? (c = r ?? $e5ed8027d647799b$var$f, d = -1) : void 0 === u[1] ? d = -2 : (d = c.lastIndex - u[2].length, a = u[1], c = void 0 === u[3] ? $e5ed8027d647799b$var$m : '\"' === u[3] ? $e5ed8027d647799b$var$g : $e5ed8027d647799b$var$p) : c === $e5ed8027d647799b$var$g || c === $e5ed8027d647799b$var$p ? c = $e5ed8027d647799b$var$m : c === $e5ed8027d647799b$var$v || c === $e5ed8027d647799b$var$_ ? c = $e5ed8027d647799b$var$f : (c = $e5ed8027d647799b$var$m, r = void 0);\n        const x = c === $e5ed8027d647799b$var$m && t[i + 1].startsWith(\"/>\") ? \" \" : \"\";\n        l += c === $e5ed8027d647799b$var$f ? s + $e5ed8027d647799b$var$n : d >= 0 ? (o.push(a), s.slice(0, d) + $e5ed8027d647799b$var$e + s.slice(d) + $e5ed8027d647799b$var$h + x) : s + $e5ed8027d647799b$var$h + (-2 === d ? i : x);\n    }\n    return [\n        $e5ed8027d647799b$var$P(t, l + (t[s] || \"<?>\") + (2 === i ? \"</svg>\" : 3 === i ? \"</math>\" : \"\")),\n        o\n    ];\n};\nclass $e5ed8027d647799b$var$N {\n    constructor({ strings: t, _$litType$: s }, n){\n        let r;\n        this.parts = [];\n        let c = 0, a = 0;\n        const u = t.length - 1, d = this.parts, [f, v] = $e5ed8027d647799b$var$V(t, s);\n        if (this.el = $e5ed8027d647799b$var$N.createElement(f, n), $e5ed8027d647799b$var$C.currentNode = this.el.content, 2 === s || 3 === s) {\n            const t = this.el.content.firstChild;\n            t.replaceWith(...t.childNodes);\n        }\n        for(; null !== (r = $e5ed8027d647799b$var$C.nextNode()) && d.length < u;){\n            if (1 === r.nodeType) {\n                if (r.hasAttributes()) for (const t of r.getAttributeNames())if (t.endsWith($e5ed8027d647799b$var$e)) {\n                    const i = v[a++], s = r.getAttribute(t).split($e5ed8027d647799b$var$h), e = /([.?@])?(.*)/.exec(i);\n                    d.push({\n                        type: 1,\n                        index: c,\n                        name: e[2],\n                        strings: s,\n                        ctor: \".\" === e[1] ? $e5ed8027d647799b$var$H : \"?\" === e[1] ? $e5ed8027d647799b$var$I : \"@\" === e[1] ? $e5ed8027d647799b$var$L : $e5ed8027d647799b$var$k\n                    }), r.removeAttribute(t);\n                } else t.startsWith($e5ed8027d647799b$var$h) && (d.push({\n                    type: 6,\n                    index: c\n                }), r.removeAttribute(t));\n                if ($e5ed8027d647799b$var$$.test(r.tagName)) {\n                    const t = r.textContent.split($e5ed8027d647799b$var$h), s = t.length - 1;\n                    if (s > 0) {\n                        r.textContent = $e5ed8027d647799b$var$i ? $e5ed8027d647799b$var$i.emptyScript : \"\";\n                        for(let i = 0; i < s; i++)r.append(t[i], $e5ed8027d647799b$var$l()), $e5ed8027d647799b$var$C.nextNode(), d.push({\n                            type: 2,\n                            index: ++c\n                        });\n                        r.append(t[s], $e5ed8027d647799b$var$l());\n                    }\n                }\n            } else if (8 === r.nodeType) {\n                if (r.data === $e5ed8027d647799b$var$o) d.push({\n                    type: 2,\n                    index: c\n                });\n                else {\n                    let t = -1;\n                    for(; -1 !== (t = r.data.indexOf($e5ed8027d647799b$var$h, t + 1));)d.push({\n                        type: 7,\n                        index: c\n                    }), t += $e5ed8027d647799b$var$h.length - 1;\n                }\n            }\n            c++;\n        }\n    }\n    static createElement(t, i) {\n        const s = $e5ed8027d647799b$var$r.createElement(\"template\");\n        return s.innerHTML = t, s;\n    }\n}\nfunction $e5ed8027d647799b$var$S(t, i, s = t, e) {\n    if (i === $e5ed8027d647799b$export$9c068ae9cc5db4e8) return i;\n    let h = void 0 !== e ? s._$Co?.[e] : s._$Cl;\n    const o = $e5ed8027d647799b$var$c(i) ? void 0 : i._$litDirective$;\n    return h?.constructor !== o && (h?._$AO?.(!1), void 0 === o ? h = void 0 : (h = new o(t), h._$AT(t, s, e)), void 0 !== e ? (s._$Co ??= [])[e] = h : s._$Cl = h), void 0 !== h && (i = $e5ed8027d647799b$var$S(t, h._$AS(t, i.values), h, e)), i;\n}\nclass $e5ed8027d647799b$var$M {\n    constructor(t, i){\n        this._$AV = [], this._$AN = void 0, this._$AD = t, this._$AM = i;\n    }\n    get parentNode() {\n        return this._$AM.parentNode;\n    }\n    get _$AU() {\n        return this._$AM._$AU;\n    }\n    u(t) {\n        const { el: { content: i }, parts: s } = this._$AD, e = (t?.creationScope ?? $e5ed8027d647799b$var$r).importNode(i, !0);\n        $e5ed8027d647799b$var$C.currentNode = e;\n        let h = $e5ed8027d647799b$var$C.nextNode(), o = 0, n = 0, l = s[0];\n        for(; void 0 !== l;){\n            if (o === l.index) {\n                let i;\n                2 === l.type ? i = new $e5ed8027d647799b$var$R(h, h.nextSibling, this, t) : 1 === l.type ? i = new l.ctor(h, l.name, l.strings, this, t) : 6 === l.type && (i = new $e5ed8027d647799b$var$z(h, this, t)), this._$AV.push(i), l = s[++n];\n            }\n            o !== l?.index && (h = $e5ed8027d647799b$var$C.nextNode(), o++);\n        }\n        return $e5ed8027d647799b$var$C.currentNode = $e5ed8027d647799b$var$r, e;\n    }\n    p(t) {\n        let i = 0;\n        for (const s of this._$AV)void 0 !== s && (void 0 !== s.strings ? (s._$AI(t, s, i), i += s.strings.length - 2) : s._$AI(t[i])), i++;\n    }\n}\nclass $e5ed8027d647799b$var$R {\n    get _$AU() {\n        return this._$AM?._$AU ?? this._$Cv;\n    }\n    constructor(t, i, s, e){\n        this.type = 2, this._$AH = $e5ed8027d647799b$export$45b790e32b2810ee, this._$AN = void 0, this._$AA = t, this._$AB = i, this._$AM = s, this.options = e, this._$Cv = e?.isConnected ?? !0;\n    }\n    get parentNode() {\n        let t = this._$AA.parentNode;\n        const i = this._$AM;\n        return void 0 !== i && 11 === t?.nodeType && (t = i.parentNode), t;\n    }\n    get startNode() {\n        return this._$AA;\n    }\n    get endNode() {\n        return this._$AB;\n    }\n    _$AI(t, i = this) {\n        t = $e5ed8027d647799b$var$S(this, t, i), $e5ed8027d647799b$var$c(t) ? t === $e5ed8027d647799b$export$45b790e32b2810ee || null == t || \"\" === t ? (this._$AH !== $e5ed8027d647799b$export$45b790e32b2810ee && this._$AR(), this._$AH = $e5ed8027d647799b$export$45b790e32b2810ee) : t !== this._$AH && t !== $e5ed8027d647799b$export$9c068ae9cc5db4e8 && this._(t) : void 0 !== t._$litType$ ? this.$(t) : void 0 !== t.nodeType ? this.T(t) : $e5ed8027d647799b$var$u(t) ? this.k(t) : this._(t);\n    }\n    O(t) {\n        return this._$AA.parentNode.insertBefore(t, this._$AB);\n    }\n    T(t) {\n        this._$AH !== t && (this._$AR(), this._$AH = this.O(t));\n    }\n    _(t) {\n        this._$AH !== $e5ed8027d647799b$export$45b790e32b2810ee && $e5ed8027d647799b$var$c(this._$AH) ? this._$AA.nextSibling.data = t : this.T($e5ed8027d647799b$var$r.createTextNode(t)), this._$AH = t;\n    }\n    $(t) {\n        const { values: i, _$litType$: s } = t, e = \"number\" == typeof s ? this._$AC(t) : (void 0 === s.el && (s.el = $e5ed8027d647799b$var$N.createElement($e5ed8027d647799b$var$P(s.h, s.h[0]), this.options)), s);\n        if (this._$AH?._$AD === e) this._$AH.p(i);\n        else {\n            const t = new $e5ed8027d647799b$var$M(e, this), s = t.u(this.options);\n            t.p(i), this.T(s), this._$AH = t;\n        }\n    }\n    _$AC(t) {\n        let i = $e5ed8027d647799b$var$A.get(t.strings);\n        return void 0 === i && $e5ed8027d647799b$var$A.set(t.strings, i = new $e5ed8027d647799b$var$N(t)), i;\n    }\n    k(t) {\n        $e5ed8027d647799b$var$a(this._$AH) || (this._$AH = [], this._$AR());\n        const i = this._$AH;\n        let s, e = 0;\n        for (const h of t)e === i.length ? i.push(s = new $e5ed8027d647799b$var$R(this.O($e5ed8027d647799b$var$l()), this.O($e5ed8027d647799b$var$l()), this, this.options)) : s = i[e], s._$AI(h), e++;\n        e < i.length && (this._$AR(s && s._$AB.nextSibling, e), i.length = e);\n    }\n    _$AR(t = this._$AA.nextSibling, i) {\n        for(this._$AP?.(!1, !0, i); t && t !== this._$AB;){\n            const i = t.nextSibling;\n            t.remove(), t = i;\n        }\n    }\n    setConnected(t) {\n        void 0 === this._$AM && (this._$Cv = t, this._$AP?.(t));\n    }\n}\nclass $e5ed8027d647799b$var$k {\n    get tagName() {\n        return this.element.tagName;\n    }\n    get _$AU() {\n        return this._$AM._$AU;\n    }\n    constructor(t, i, s, e, h){\n        this.type = 1, this._$AH = $e5ed8027d647799b$export$45b790e32b2810ee, this._$AN = void 0, this.element = t, this.name = i, this._$AM = e, this.options = h, s.length > 2 || \"\" !== s[0] || \"\" !== s[1] ? (this._$AH = Array(s.length - 1).fill(new String), this.strings = s) : this._$AH = $e5ed8027d647799b$export$45b790e32b2810ee;\n    }\n    _$AI(t, i = this, s, e) {\n        const h = this.strings;\n        let o = !1;\n        if (void 0 === h) t = $e5ed8027d647799b$var$S(this, t, i, 0), o = !$e5ed8027d647799b$var$c(t) || t !== this._$AH && t !== $e5ed8027d647799b$export$9c068ae9cc5db4e8, o && (this._$AH = t);\n        else {\n            const e = t;\n            let n, r;\n            for(t = h[0], n = 0; n < h.length - 1; n++)r = $e5ed8027d647799b$var$S(this, e[s + n], i, n), r === $e5ed8027d647799b$export$9c068ae9cc5db4e8 && (r = this._$AH[n]), o ||= !$e5ed8027d647799b$var$c(r) || r !== this._$AH[n], r === $e5ed8027d647799b$export$45b790e32b2810ee ? t = $e5ed8027d647799b$export$45b790e32b2810ee : t !== $e5ed8027d647799b$export$45b790e32b2810ee && (t += (r ?? \"\") + h[n + 1]), this._$AH[n] = r;\n        }\n        o && !e && this.j(t);\n    }\n    j(t) {\n        t === $e5ed8027d647799b$export$45b790e32b2810ee ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, t ?? \"\");\n    }\n}\nclass $e5ed8027d647799b$var$H extends $e5ed8027d647799b$var$k {\n    constructor(){\n        super(...arguments), this.type = 3;\n    }\n    j(t) {\n        this.element[this.name] = t === $e5ed8027d647799b$export$45b790e32b2810ee ? void 0 : t;\n    }\n}\nclass $e5ed8027d647799b$var$I extends $e5ed8027d647799b$var$k {\n    constructor(){\n        super(...arguments), this.type = 4;\n    }\n    j(t) {\n        this.element.toggleAttribute(this.name, !!t && t !== $e5ed8027d647799b$export$45b790e32b2810ee);\n    }\n}\nclass $e5ed8027d647799b$var$L extends $e5ed8027d647799b$var$k {\n    constructor(t, i, s, e, h){\n        super(t, i, s, e, h), this.type = 5;\n    }\n    _$AI(t, i = this) {\n        if ((t = $e5ed8027d647799b$var$S(this, t, i, 0) ?? $e5ed8027d647799b$export$45b790e32b2810ee) === $e5ed8027d647799b$export$9c068ae9cc5db4e8) return;\n        const s = this._$AH, e = t === $e5ed8027d647799b$export$45b790e32b2810ee && s !== $e5ed8027d647799b$export$45b790e32b2810ee || t.capture !== s.capture || t.once !== s.once || t.passive !== s.passive, h = t !== $e5ed8027d647799b$export$45b790e32b2810ee && (s === $e5ed8027d647799b$export$45b790e32b2810ee || e);\n        e && this.element.removeEventListener(this.name, this, s), h && this.element.addEventListener(this.name, this, t), this._$AH = t;\n    }\n    handleEvent(t) {\n        \"function\" == typeof this._$AH ? this._$AH.call(this.options?.host ?? this.element, t) : this._$AH.handleEvent(t);\n    }\n}\nclass $e5ed8027d647799b$var$z {\n    constructor(t, i, s){\n        this.element = t, this.type = 6, this._$AN = void 0, this._$AM = i, this.options = s;\n    }\n    get _$AU() {\n        return this._$AM._$AU;\n    }\n    _$AI(t) {\n        $e5ed8027d647799b$var$S(this, t);\n    }\n}\nconst $e5ed8027d647799b$export$8613d1ca9052b22e = {\n    M: $e5ed8027d647799b$var$e,\n    P: $e5ed8027d647799b$var$h,\n    A: $e5ed8027d647799b$var$o,\n    C: 1,\n    L: $e5ed8027d647799b$var$V,\n    R: $e5ed8027d647799b$var$M,\n    D: $e5ed8027d647799b$var$u,\n    V: $e5ed8027d647799b$var$S,\n    I: $e5ed8027d647799b$var$R,\n    H: $e5ed8027d647799b$var$k,\n    N: $e5ed8027d647799b$var$I,\n    U: $e5ed8027d647799b$var$L,\n    B: $e5ed8027d647799b$var$H,\n    F: $e5ed8027d647799b$var$z\n}, $e5ed8027d647799b$var$j = $e5ed8027d647799b$var$t.litHtmlPolyfillSupport;\n$e5ed8027d647799b$var$j?.($e5ed8027d647799b$var$N, $e5ed8027d647799b$var$R), ($e5ed8027d647799b$var$t.litHtmlVersions ??= []).push(\"3.2.1\");\nconst $e5ed8027d647799b$export$b3890eb0ae9dca99 = (t, i, s)=>{\n    const e = s?.renderBefore ?? i;\n    let h = e._$litPart$;\n    if (void 0 === h) {\n        const t = s?.renderBefore ?? null;\n        e._$litPart$ = h = new $e5ed8027d647799b$var$R(i.insertBefore($e5ed8027d647799b$var$l(), t), t, void 0, s ?? {});\n    }\n    return h._$AI(t), h;\n};\n\n\n\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */ const $3baabda811939da5$export$9ba3b3f20a85bfa = {\n    ATTRIBUTE: 1,\n    CHILD: 2,\n    PROPERTY: 3,\n    BOOLEAN_ATTRIBUTE: 4,\n    EVENT: 5,\n    ELEMENT: 6\n}, $3baabda811939da5$export$99b43ad1ed32e735 = (t)=>(...e)=>({\n            _$litDirective$: t,\n            values: e\n        });\nclass $3baabda811939da5$export$befdefbdce210f91 {\n    constructor(t){}\n    get _$AU() {\n        return this._$AM._$AU;\n    }\n    _$AT(t, e, i) {\n        this._$Ct = t, this._$AM = e, this._$Ci = i;\n    }\n    _$AS(t, e) {\n        return this.update(t, e);\n    }\n    update(t, e) {\n        return this.render(...e);\n    }\n}\n\n\n\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */ const { I: $ead5767561d7cbc1$var$t } = (0, $e5ed8027d647799b$export$8613d1ca9052b22e), $ead5767561d7cbc1$export$c3825b437cbdea5c = (o)=>null === o || \"object\" != typeof o && \"function\" != typeof o, $ead5767561d7cbc1$export$80c36ae3cab9881d = {\n    HTML: 1,\n    SVG: 2,\n    MATHML: 3\n}, $ead5767561d7cbc1$export$6b6d145ec2a44ca9 = (o, t)=>void 0 === t ? void 0 !== o?._$litType$ : o?._$litType$ === t, $ead5767561d7cbc1$export$6a0e8de894d2fcca = (o)=>null != o?._$litType$?.h, $ead5767561d7cbc1$export$2f448fec17d50a3e = (o)=>void 0 !== o?._$litDirective$, $ead5767561d7cbc1$export$f28e31de6a6eaf32 = (o)=>o?._$litDirective$, $ead5767561d7cbc1$export$7f431ad0fff82fd9 = (o)=>void 0 === o.strings, $ead5767561d7cbc1$var$s = ()=>document.createComment(\"\"), $ead5767561d7cbc1$export$291b2338ad9b0b30 = (o, i, n)=>{\n    const e = o._$AA.parentNode, l = void 0 === i ? o._$AB : i._$AA;\n    if (void 0 === n) {\n        const i = e.insertBefore($ead5767561d7cbc1$var$s(), l), c = e.insertBefore($ead5767561d7cbc1$var$s(), l);\n        n = new $ead5767561d7cbc1$var$t(i, c, o, o.options);\n    } else {\n        const t = n._$AB.nextSibling, i = n._$AM, c = i !== o;\n        if (c) {\n            let t;\n            n._$AQ?.(o), n._$AM = o, void 0 !== n._$AP && (t = o._$AU) !== i._$AU && n._$AP(t);\n        }\n        if (t !== l || c) {\n            let o = n._$AA;\n            for(; o !== t;){\n                const t = o.nextSibling;\n                e.insertBefore(o, l), o = t;\n            }\n        }\n    }\n    return n;\n}, $ead5767561d7cbc1$export$cb8bf9562088e9f4 = (o, t, i = o)=>(o._$AI(t, i), o), $ead5767561d7cbc1$var$u = {}, $ead5767561d7cbc1$export$ea70d9dd5965b1c8 = (o, t = $ead5767561d7cbc1$var$u)=>o._$AH = t, $ead5767561d7cbc1$export$59e9bce518cde500 = (o)=>o._$AH, $ead5767561d7cbc1$export$3133b3144bbba267 = (o)=>{\n    o._$AP?.(!1, !0);\n    let t = o._$AA;\n    const i = o._$AB.nextSibling;\n    for(; t !== i;){\n        const o = t.nextSibling;\n        t.remove(), t = o;\n    }\n}, $ead5767561d7cbc1$export$7f600b8138c094dc = (o)=>{\n    o._$AR();\n};\n\n\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */ const $e41d1b66de65ecc4$var$u = (e, s, t)=>{\n    const r = new Map;\n    for(let l = s; l <= t; l++)r.set(e[l], l);\n    return r;\n}, $e41d1b66de65ecc4$export$76d90c956114f2c2 = (0, $3baabda811939da5$export$99b43ad1ed32e735)(class extends (0, $3baabda811939da5$export$befdefbdce210f91) {\n    constructor(e){\n        if (super(e), e.type !== (0, $3baabda811939da5$export$9ba3b3f20a85bfa).CHILD) throw Error(\"repeat() can only be used in text expressions\");\n    }\n    dt(e, s, t) {\n        let r;\n        void 0 === t ? t = s : void 0 !== s && (r = s);\n        const l = [], o = [];\n        let i = 0;\n        for (const s of e)l[i] = r ? r(s, i) : i, o[i] = t(s, i), i++;\n        return {\n            values: o,\n            keys: l\n        };\n    }\n    render(e, s, t) {\n        return this.dt(e, s, t).values;\n    }\n    update(s, [t, r, c]) {\n        const d = (0, $ead5767561d7cbc1$export$59e9bce518cde500)(s), { values: p, keys: a } = this.dt(t, r, c);\n        if (!Array.isArray(d)) return this.ut = a, p;\n        const h = this.ut ??= [], v = [];\n        let m, y, x = 0, j = d.length - 1, k = 0, w = p.length - 1;\n        for(; x <= j && k <= w;)if (null === d[x]) x++;\n        else if (null === d[j]) j--;\n        else if (h[x] === a[k]) v[k] = (0, $ead5767561d7cbc1$export$cb8bf9562088e9f4)(d[x], p[k]), x++, k++;\n        else if (h[j] === a[w]) v[w] = (0, $ead5767561d7cbc1$export$cb8bf9562088e9f4)(d[j], p[w]), j--, w--;\n        else if (h[x] === a[w]) v[w] = (0, $ead5767561d7cbc1$export$cb8bf9562088e9f4)(d[x], p[w]), (0, $ead5767561d7cbc1$export$291b2338ad9b0b30)(s, v[w + 1], d[x]), x++, w--;\n        else if (h[j] === a[k]) v[k] = (0, $ead5767561d7cbc1$export$cb8bf9562088e9f4)(d[j], p[k]), (0, $ead5767561d7cbc1$export$291b2338ad9b0b30)(s, d[x], d[j]), j--, k++;\n        else if (void 0 === m && (m = $e41d1b66de65ecc4$var$u(a, k, w), y = $e41d1b66de65ecc4$var$u(h, x, j)), m.has(h[x])) {\n            if (m.has(h[j])) {\n                const e = y.get(a[k]), t = void 0 !== e ? d[e] : null;\n                if (null === t) {\n                    const e = (0, $ead5767561d7cbc1$export$291b2338ad9b0b30)(s, d[x]);\n                    (0, $ead5767561d7cbc1$export$cb8bf9562088e9f4)(e, p[k]), v[k] = e;\n                } else v[k] = (0, $ead5767561d7cbc1$export$cb8bf9562088e9f4)(t, p[k]), (0, $ead5767561d7cbc1$export$291b2338ad9b0b30)(s, d[x], t), d[e] = null;\n                k++;\n            } else (0, $ead5767561d7cbc1$export$3133b3144bbba267)(d[j]), j--;\n        } else (0, $ead5767561d7cbc1$export$3133b3144bbba267)(d[x]), x++;\n        for(; k <= w;){\n            const e = (0, $ead5767561d7cbc1$export$291b2338ad9b0b30)(s, v[w + 1]);\n            (0, $ead5767561d7cbc1$export$cb8bf9562088e9f4)(e, p[k]), v[k++] = e;\n        }\n        for(; x <= j;){\n            const e = d[x++];\n            null !== e && (0, $ead5767561d7cbc1$export$3133b3144bbba267)(e);\n        }\n        return this.ut = a, (0, $ead5767561d7cbc1$export$ea70d9dd5965b1c8)(s, v), $e5ed8027d647799b$export$9c068ae9cc5db4e8;\n    }\n});\n\n\nvar $ee083671c43a5e14$exports = {};\n\n$parcel$export($ee083671c43a5e14$exports, \"distance\", () => $ee083671c43a5e14$export$9f17032d917177de);\n$parcel$export($ee083671c43a5e14$exports, \"distanceSquared\", () => $ee083671c43a5e14$export$d019ad931e844842);\n$parcel$export($ee083671c43a5e14$exports, \"midpoint\", () => $ee083671c43a5e14$export$f2e8a19be46147af);\n$parcel$export($ee083671c43a5e14$exports, \"closest\", () => $ee083671c43a5e14$export$ff7f7c97cdce86e);\n$parcel$export($ee083671c43a5e14$exports, \"isPointInCircle\", () => $ee083671c43a5e14$export$489c99c59eb9ceb1);\n$parcel$export($ee083671c43a5e14$exports, \"isPointInRectangle\", () => $ee083671c43a5e14$export$4a253f8fe7a58694);\n$parcel$export($ee083671c43a5e14$exports, \"isPointInLine\", () => $ee083671c43a5e14$export$ff9583e4b2d0fe53);\n$parcel$export($ee083671c43a5e14$exports, \"moveTowards\", () => $ee083671c43a5e14$export$5145a8075501ee31);\n$parcel$export($ee083671c43a5e14$exports, \"interpolate\", () => $ee083671c43a5e14$export$89e29e4ab65e70a9);\nconst $ee083671c43a5e14$export$9f17032d917177de = (p1, p2)=>{\n    const dx = p2.x - p1.x;\n    const dy = p2.y - p1.y;\n    return Math.sqrt(dx * dx + dy * dy);\n};\nconst $ee083671c43a5e14$export$d019ad931e844842 = (p1, p2)=>{\n    const dx = p2.x - p1.x;\n    const dy = p2.y - p1.y;\n    return dx * dx + dy * dy;\n};\nconst $ee083671c43a5e14$export$f2e8a19be46147af = (p1, p2)=>({\n        x: (p1.x + p2.x) / 2,\n        y: (p1.y + p2.y) / 2\n    });\nconst $ee083671c43a5e14$export$ff7f7c97cdce86e = (target, points)=>{\n    if (!points.length) throw new Error('Points array is empty');\n    return points.reduce((closest, point)=>$ee083671c43a5e14$export$d019ad931e844842(target, point) < $ee083671c43a5e14$export$d019ad931e844842(target, closest) ? point : closest);\n};\nconst $ee083671c43a5e14$export$489c99c59eb9ceb1 = (point, circle)=>{\n    const distSquared = $ee083671c43a5e14$export$d019ad931e844842(point, {\n        x: circle.x,\n        y: circle.y\n    });\n    return distSquared < circle.radius * circle.radius;\n};\nconst $ee083671c43a5e14$export$4a253f8fe7a58694 = (point, rect)=>point.x >= rect.x && point.x <= rect.x + rect.width && point.y >= rect.y && point.y <= rect.y + rect.height;\nconst $ee083671c43a5e14$export$ff9583e4b2d0fe53 = (point, line, width = 1)=>{\n    const dx = line.end.x - line.start.x;\n    const dy = line.end.y - line.start.y;\n    const lineLength = Math.sqrt(dx * dx + dy * dy);\n    if (lineLength === 0) return $ee083671c43a5e14$export$9f17032d917177de(point, line.start) <= width / 2;\n    const t = ((point.x - line.start.x) * dx + (point.y - line.start.y) * dy) / (lineLength * lineLength);\n    if (t < 0) return $ee083671c43a5e14$export$9f17032d917177de(point, line.start) <= width / 2;\n    if (t > 1) return $ee083671c43a5e14$export$9f17032d917177de(point, line.end) <= width / 2;\n    const projX = line.start.x + t * dx;\n    const projY = line.start.y + t * dy;\n    const distToLine = $ee083671c43a5e14$export$9f17032d917177de(point, {\n        x: projX,\n        y: projY\n    });\n    return distToLine <= width / 2;\n};\nconst $ee083671c43a5e14$export$5145a8075501ee31 = (current, target, maxDistance)=>{\n    if (maxDistance <= 0) return current;\n    const dx = target.x - current.x;\n    const dy = target.y - current.y;\n    const dist = Math.sqrt(dx * dx + dy * dy);\n    if (dist <= maxDistance || dist === 0) return target;\n    return {\n        x: current.x + dx / dist * maxDistance,\n        y: current.y + dy / dist * maxDistance\n    };\n};\nconst $ee083671c43a5e14$export$89e29e4ab65e70a9 = (p1, p2, t)=>({\n        x: p1.x + (p2.x - p1.x) * Math.max(0, Math.min(1, t)),\n        y: p1.y + (p2.y - p1.y) * Math.max(0, Math.min(1, t))\n    });\n\n\nfunction $086612735116fd75$export$8b59d3c9ad87edcd(canvas, evt) {\n    const rect = canvas.getBoundingClientRect();\n    return {\n        x: evt.clientX - rect.left,\n        y: evt.clientY - rect.top\n    };\n}\nfunction $086612735116fd75$export$a1c066623ac679d3(ctx) {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n}\nfunction $086612735116fd75$export$654275d54901f10e(ctx, p, color = 'blue', size = 5) {\n    ctx.fillStyle = color;\n    ctx.beginPath();\n    ctx.arc(p.x, p.y, size, 0, Math.PI * 2);\n    ctx.fill();\n}\nfunction $086612735116fd75$export$8daab6f91f7ff730(ctx, circle, color = 'blue', fill = false) {\n    ctx.beginPath();\n    ctx.arc(circle.x, circle.y, circle.radius, 0, Math.PI * 2);\n    if (fill) {\n        ctx.fillStyle = color;\n        ctx.fill();\n    } else {\n        ctx.strokeStyle = color;\n        ctx.stroke();\n    }\n}\nfunction $086612735116fd75$export$819db45aec5fcbe5(ctx, line, color = 'gray', width = 1) {\n    ctx.strokeStyle = color;\n    ctx.lineWidth = width;\n    ctx.beginPath();\n    ctx.moveTo(line.start.x, line.start.y);\n    ctx.lineTo(line.end.x, line.end.y);\n    ctx.stroke();\n}\nfunction $086612735116fd75$export$92e8c004f9e4bf7d(ctx, rect, color = 'blue', fill = false) {\n    if (fill) {\n        ctx.fillStyle = color;\n        ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n    } else {\n        ctx.strokeStyle = color;\n        ctx.strokeRect(rect.x, rect.y, rect.width, rect.height);\n    }\n}\nfunction $086612735116fd75$export$f6d70d79295e1392(ctx, from, to, color = 'blue') {\n    const headSize = 10;\n    const angle = Math.atan2(to.y - from.y, to.x - from.x);\n    $086612735116fd75$export$819db45aec5fcbe5(ctx, {\n        start: from,\n        end: to\n    }, color);\n    ctx.fillStyle = color;\n    ctx.beginPath();\n    ctx.moveTo(to.x, to.y);\n    ctx.lineTo(to.x - headSize * Math.cos(angle - Math.PI / 6), to.y - headSize * Math.sin(angle - Math.PI / 6));\n    ctx.lineTo(to.x - headSize * Math.cos(angle + Math.PI / 6), to.y - headSize * Math.sin(angle + Math.PI / 6));\n    ctx.fill();\n}\nfunction $086612735116fd75$export$b11bd9a0808bdc9(ctx, text, x, y, color = 'black', font = '14px monospace') {\n    ctx.fillStyle = color;\n    ctx.font = font;\n    ctx.fillText(text, x, y);\n}\nfunction $086612735116fd75$export$bf8a3f9983094125(ctx, center, radius, startAngle, endAngle, color = 'black') {\n    ctx.beginPath();\n    ctx.arc(center.x, center.y, radius, startAngle, endAngle);\n    ctx.strokeStyle = color;\n    ctx.stroke();\n}\nfunction $086612735116fd75$var$formatValue(value, precision = 2) {\n    const num = (n)=>n.toFixed(precision);\n    if (typeof value === 'number') return num(value);\n    if (typeof value === 'string') return value;\n    if (typeof value === 'boolean') return value ? \"\\u2705 Yes\" : \"\\u274C No\";\n    if (Array.isArray(value)) return `{${value.map(([k, v])=>`${k}=${$086612735116fd75$var$formatValue(v, precision)}`).join(', ')}}`;\n    if ('radius' in value) return `(${num(value.x)}, ${num(value.y)}, r=${num(value.radius)})`;\n    if ('width' in value) return `(${num(value.x)}, ${num(value.y)}) [${num(value.width)}\\xd7${num(value.height)}]`;\n    if ('start' in value) {\n        const start = `${num(value.start.x)}, ${num(value.start.y)}`;\n        const end = `${num(value.end.x)}, ${num(value.end.y)}`;\n        return `(${start}) \\u{2192} (${end})`;\n    }\n    return `(${num(value.x)}, ${num(value.y)})`;\n}\nfunction $086612735116fd75$export$4880d2177ba2b4c0(ctx, results, { x: x = 10, y: y = 20, spacing: spacing = 20, precision: precision = 2, color: color = 'black' } = {}) {\n    results.forEach((entry, i)=>{\n        const text = Array.isArray(entry) ? `${entry[0]}: ${$086612735116fd75$var$formatValue(entry[1], entry[2]?.precision ?? precision)}` : entry;\n        $086612735116fd75$export$b11bd9a0808bdc9(ctx, text, x, y + i * spacing, Array.isArray(entry) && entry[2]?.color || color);\n    });\n}\nfunction $086612735116fd75$export$63550218646aa6fc(canvas, evt, center = {\n    x: 0,\n    y: 0\n}) {\n    const pos = $086612735116fd75$export$8b59d3c9ad87edcd(canvas, evt);\n    return {\n        x: pos.x - center.x,\n        y: pos.y - center.y\n    };\n}\nfunction $086612735116fd75$export$d7d5d435647ed5a0({ canvas: canvas, draw: draw, center: center = {\n    x: 0,\n    y: 0\n} }, handlers) {\n    let isDragging = false;\n    canvas.addEventListener('mousedown', (e)=>{\n        isDragging = true;\n        handlers.onStart?.($086612735116fd75$export$63550218646aa6fc(canvas, e, center)) ?? handlers.onDrag?.($086612735116fd75$export$63550218646aa6fc(canvas, e, center));\n        draw?.();\n    });\n    canvas.addEventListener('mousemove', (e)=>{\n        if (isDragging) {\n            handlers.onDrag?.($086612735116fd75$export$63550218646aa6fc(canvas, e, center));\n            draw?.();\n        }\n    });\n    canvas.addEventListener('mouseup', (e)=>{\n        if (isDragging) {\n            handlers.onEnd?.($086612735116fd75$export$63550218646aa6fc(canvas, e, center));\n            isDragging = false;\n            draw?.();\n        }\n    });\n    canvas.addEventListener('mouseleave', (e)=>{\n        if (isDragging) {\n            handlers.onEnd?.($086612735116fd75$export$63550218646aa6fc(canvas, e, center));\n            isDragging = false;\n            draw?.();\n        }\n    });\n}\nfunction $086612735116fd75$export$64ef1bee2b9504c1({ canvas: canvas, draw: draw, center: center = {\n    x: 0,\n    y: 0\n} }, handler) {\n    canvas.addEventListener('click', (e)=>{\n        handler($086612735116fd75$export$63550218646aa6fc(canvas, e, center));\n        draw?.();\n    });\n}\nfunction $086612735116fd75$export$d947e5f4f4c48d48({ canvas: canvas, draw: draw, center: center = {\n    x: 0,\n    y: 0\n} }, handler) {\n    canvas.addEventListener('mousemove', (e)=>{\n        handler($086612735116fd75$export$63550218646aa6fc(canvas, e, center));\n        draw?.();\n    });\n}\nfunction $086612735116fd75$export$df61b30b684217c0({ canvas: canvas, draw: draw }, mappings) {\n    // Normalize keys to handle case-insensitivity and special key pairs\n    const normalizeKey = (key)=>({\n            '+': '=',\n            '-': '_'\n        })[key.toLowerCase()] ?? key.toLowerCase();\n    // Transform mappings into normalized handlers\n    const handlers = Object.entries(mappings).reduce((acc, [keys, callback])=>{\n        keys.split('').forEach((key)=>acc[normalizeKey(key.trim())] = callback);\n        return acc;\n    }, {});\n    const handler = (e)=>{\n        const callback = handlers[normalizeKey(e.key)];\n        if (callback) {\n            callback();\n            draw?.();\n        }\n    };\n    canvas.tabIndex = 0;\n    canvas.focus();\n    canvas.addEventListener('keydown', handler);\n    return ()=>canvas.removeEventListener('keydown', handler);\n}\nlet $086612735116fd75$var$currentAnimation = null;\nfunction $086612735116fd75$export$e3607ec2d7a891c4(draw, udpate) {\n    function loop() {\n        udpate?.();\n        draw();\n        $086612735116fd75$var$currentAnimation = requestAnimationFrame(loop);\n    }\n    loop();\n}\nfunction $086612735116fd75$export$1e61084297db69ac(update, draw) {\n    let lastTime = performance.now();\n    $086612735116fd75$export$e3607ec2d7a891c4(draw, ()=>{\n        const time = performance.now();\n        const deltaTime = Math.min((time - lastTime) / 1000, 0.1); // Cap at 100ms\n        lastTime = time;\n        update(deltaTime);\n    });\n}\nfunction $086612735116fd75$export$aad8462122ac592b() {\n    if ($086612735116fd75$var$currentAnimation !== null) {\n        cancelAnimationFrame($086612735116fd75$var$currentAnimation);\n        $086612735116fd75$var$currentAnimation = null;\n    }\n    $086612735116fd75$export$ed97f33186d4b816.stop();\n}\nfunction $086612735116fd75$export$b602ad7a6da8e372(ctx, center, drawFn) {\n    ctx.save();\n    ctx.translate(center.x, center.y);\n    drawFn(ctx);\n    ctx.restore();\n}\nfunction $086612735116fd75$export$712d35b7f1932be6(ctx) {\n    const width = ctx.canvas.width;\n    const height = ctx.canvas.height;\n    ctx.strokeStyle = 'lightgray';\n    ctx.lineWidth = 1;\n    // Draw horizontal axis\n    ctx.beginPath();\n    ctx.moveTo(-width / 2, 0);\n    ctx.lineTo(width / 2, 0);\n    ctx.stroke();\n    // Draw vertical axis\n    ctx.beginPath();\n    ctx.moveTo(0, -height / 2);\n    ctx.lineTo(0, height / 2);\n    ctx.stroke();\n}\nconst $086612735116fd75$export$ed97f33186d4b816 = (()=>{\n    const pressedKeys = new Set();\n    let listener = null;\n    return {\n        listen () {\n            if (listener) return; // Avoid multiple listeners\n            listener = (e)=>{\n                if (e.type === 'keydown') pressedKeys.add(e.code);\n                if (e.type === 'keyup') pressedKeys.delete(e.code);\n            };\n            window.addEventListener('keydown', listener);\n            window.addEventListener('keyup', listener);\n        },\n        isDown (keyCode) {\n            return pressedKeys.has(keyCode);\n        },\n        stop () {\n            if (listener) {\n                window.removeEventListener('keydown', listener);\n                window.removeEventListener('keyup', listener);\n                listener = null;\n                pressedKeys.clear();\n            }\n        }\n    };\n})();\n\n\nconst $804439357c53744a$export$edaf19bb1d4a3d18 = {\n    distance: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        let p1 = {\n            x: 100,\n            y: 100\n        };\n        let p2 = {\n            x: 300,\n            y: 300\n        };\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$654275d54901f10e)(ctx, p1, 'blue');\n            (0, $086612735116fd75$export$654275d54901f10e)(ctx, p2, 'red');\n            (0, $086612735116fd75$export$819db45aec5fcbe5)(ctx, {\n                start: p1,\n                end: p2\n            }, 'gray');\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Distance',\n                    $ee083671c43a5e14$export$9f17032d917177de(p1, p2)\n                ],\n                'Click to set point 1'\n            ]);\n        }\n        (0, $086612735116fd75$export$64ef1bee2b9504c1)({\n            canvas: canvas,\n            draw: draw\n        }, (pos)=>p1 = pos);\n        (0, $086612735116fd75$export$d947e5f4f4c48d48)({\n            canvas: canvas,\n            draw: draw\n        }, (pos)=>p2 = pos);\n        draw(); // initial draw still needed\n    },\n    distanceSquared: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        let p1 = {\n            x: 100,\n            y: 100\n        };\n        let p2 = {\n            x: 300,\n            y: 300\n        };\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$654275d54901f10e)(ctx, p1, 'blue');\n            (0, $086612735116fd75$export$654275d54901f10e)(ctx, p2, 'red');\n            (0, $086612735116fd75$export$819db45aec5fcbe5)(ctx, {\n                start: p1,\n                end: p2\n            }, 'gray');\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Distance',\n                    $ee083671c43a5e14$export$9f17032d917177de(p1, p2)\n                ],\n                [\n                    \"Distance\\xb2\",\n                    $ee083671c43a5e14$export$d019ad931e844842(p1, p2)\n                ],\n                'Click to set point 1'\n            ]);\n        }\n        (0, $086612735116fd75$export$64ef1bee2b9504c1)({\n            canvas: canvas,\n            draw: draw\n        }, (pos)=>p1 = pos);\n        (0, $086612735116fd75$export$d947e5f4f4c48d48)({\n            canvas: canvas,\n            draw: draw\n        }, (pos)=>p2 = pos);\n        draw();\n    },\n    midpoint: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        let p1 = {\n            x: 100,\n            y: 100\n        };\n        let p2 = {\n            x: 300,\n            y: 300\n        };\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$654275d54901f10e)(ctx, p1, 'blue');\n            (0, $086612735116fd75$export$654275d54901f10e)(ctx, p2, 'red');\n            (0, $086612735116fd75$export$819db45aec5fcbe5)(ctx, {\n                start: p1,\n                end: p2\n            }, 'gray');\n            const mid = $ee083671c43a5e14$export$f2e8a19be46147af(p1, p2);\n            (0, $086612735116fd75$export$654275d54901f10e)(ctx, mid, 'green');\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Midpoint',\n                    mid\n                ],\n                'Click to set point 1'\n            ]);\n        }\n        (0, $086612735116fd75$export$64ef1bee2b9504c1)({\n            canvas: canvas,\n            draw: draw\n        }, (pos)=>p1 = pos);\n        (0, $086612735116fd75$export$d947e5f4f4c48d48)({\n            canvas: canvas,\n            draw: draw\n        }, (pos)=>p2 = pos);\n        draw();\n    },\n    closest: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        let points = [];\n        let mousePos = {\n            x: 0,\n            y: 0\n        };\n        function generatePoints() {\n            points = Array.from({\n                length: 10\n            }, ()=>({\n                    x: Math.random() * canvas.width,\n                    y: Math.random() * canvas.height\n                }));\n        }\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            const closest = $ee083671c43a5e14$export$ff7f7c97cdce86e(mousePos, points);\n            points.forEach((p)=>{\n                (0, $086612735116fd75$export$654275d54901f10e)(ctx, p, p === closest ? 'red' : 'blue');\n            });\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Mouse',\n                    mousePos\n                ],\n                [\n                    'Closest',\n                    closest\n                ],\n                'Click to generate new points'\n            ]);\n        }\n        (0, $086612735116fd75$export$64ef1bee2b9504c1)({\n            canvas: canvas,\n            draw: draw\n        }, ()=>generatePoints());\n        (0, $086612735116fd75$export$d947e5f4f4c48d48)({\n            canvas: canvas,\n            draw: draw\n        }, (pos)=>mousePos = pos);\n        generatePoints();\n        draw();\n    },\n    isPointInCircle: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        let circle = {\n            x: 200,\n            y: 200,\n            radius: 50\n        };\n        let mousePos = {\n            x: 0,\n            y: 0\n        };\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            const isInside = $ee083671c43a5e14$export$489c99c59eb9ceb1(mousePos, circle);\n            (0, $086612735116fd75$export$8daab6f91f7ff730)(ctx, circle, isInside ? 'green' : 'red');\n            (0, $086612735116fd75$export$654275d54901f10e)(ctx, circle, 'blue');\n            (0, $086612735116fd75$export$654275d54901f10e)(ctx, mousePos, isInside ? 'green' : 'red');\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Inside',\n                    isInside\n                ],\n                [\n                    'Circle',\n                    circle\n                ],\n                'Click and drag to resize circle'\n            ]);\n        }\n        (0, $086612735116fd75$export$d947e5f4f4c48d48)({\n            canvas: canvas,\n            draw: draw\n        }, (pos)=>mousePos = pos);\n        (0, $086612735116fd75$export$d7d5d435647ed5a0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            onStart: (pos)=>circle = {\n                    ...circle,\n                    ...pos\n                },\n            onDrag: (pos)=>circle.radius = $ee083671c43a5e14$export$9f17032d917177de(circle, pos)\n        });\n        draw();\n    },\n    isPointInRectangle: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        let rect = {\n            x: 200,\n            y: 200,\n            width: 100,\n            height: 100\n        };\n        let mousePos = {\n            x: 0,\n            y: 0\n        };\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            const isInside = $ee083671c43a5e14$export$4a253f8fe7a58694(mousePos, rect);\n            (0, $086612735116fd75$export$92e8c004f9e4bf7d)(ctx, rect, isInside ? 'green' : 'red');\n            (0, $086612735116fd75$export$654275d54901f10e)(ctx, mousePos, isInside ? 'green' : 'red');\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Inside',\n                    isInside\n                ],\n                [\n                    'Rectangle',\n                    rect\n                ],\n                'Click and drag to draw rectangle'\n            ]);\n        }\n        (0, $086612735116fd75$export$d947e5f4f4c48d48)({\n            canvas: canvas,\n            draw: draw\n        }, (pos)=>mousePos = pos);\n        (0, $086612735116fd75$export$d7d5d435647ed5a0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            onStart: (pos)=>rect = {\n                    ...rect,\n                    x: pos.x,\n                    y: pos.y,\n                    width: 0,\n                    height: 0\n                },\n            onDrag: (pos)=>{\n                rect.width = pos.x - rect.x;\n                rect.height = pos.y - rect.y;\n            }\n        });\n        draw();\n    },\n    isPointInLine: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        let line = {\n            start: {\n                x: 100,\n                y: 100\n            },\n            end: {\n                x: 300,\n                y: 300\n            }\n        };\n        let mousePos = {\n            x: 0,\n            y: 0\n        };\n        let lineWidth = 10;\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            const isInside = $ee083671c43a5e14$export$ff9583e4b2d0fe53(mousePos, line, lineWidth);\n            const color = isInside ? 'green' : 'red';\n            (0, $086612735116fd75$export$8daab6f91f7ff730)(ctx, {\n                ...line.start,\n                radius: lineWidth / 2\n            }, color, true);\n            (0, $086612735116fd75$export$8daab6f91f7ff730)(ctx, {\n                ...line.end,\n                radius: lineWidth / 2\n            }, color, true);\n            (0, $086612735116fd75$export$819db45aec5fcbe5)(ctx, line, color, lineWidth);\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Inside',\n                    isInside\n                ],\n                [\n                    'Line',\n                    line\n                ],\n                [\n                    'Line Width',\n                    lineWidth\n                ],\n                'Click and drag to draw line',\n                'Press + or - to adjust width'\n            ]);\n        }\n        (0, $086612735116fd75$export$d947e5f4f4c48d48)({\n            canvas: canvas,\n            draw: draw\n        }, (pos)=>mousePos = pos);\n        (0, $086612735116fd75$export$d7d5d435647ed5a0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            onStart: (pos)=>line.start = line.end = pos,\n            onDrag: (pos)=>line.end = pos\n        });\n        (0, $086612735116fd75$export$df61b30b684217c0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            '+': ()=>lineWidth++,\n            '-': ()=>lineWidth--\n        });\n        draw();\n    },\n    moveTowards: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        let current = {\n            x: canvas.width / 2,\n            y: canvas.height / 2\n        };\n        let target = {\n            x: canvas.width / 2 + 100,\n            y: canvas.height / 2\n        };\n        let maxDistance = 5;\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$654275d54901f10e)(ctx, current, 'blue');\n            (0, $086612735116fd75$export$654275d54901f10e)(ctx, target, 'red');\n            (0, $086612735116fd75$export$819db45aec5fcbe5)(ctx, {\n                start: current,\n                end: target\n            }, 'gray');\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Current',\n                    current\n                ],\n                [\n                    'Target',\n                    target\n                ],\n                [\n                    'Distance',\n                    $ee083671c43a5e14$export$9f17032d917177de(current, target)\n                ],\n                [\n                    'Speed',\n                    maxDistance\n                ],\n                'Move mouse to set target',\n                'Use +/- to adjust speed'\n            ]);\n        }\n        (0, $086612735116fd75$export$d947e5f4f4c48d48)({\n            canvas: canvas,\n            draw: draw\n        }, (pos)=>target = pos);\n        (0, $086612735116fd75$export$df61b30b684217c0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            '+': ()=>maxDistance *= 1.2,\n            '-': ()=>maxDistance /= 1.2\n        });\n        (0, $086612735116fd75$export$e3607ec2d7a891c4)(draw, ()=>current = $ee083671c43a5e14$export$5145a8075501ee31(current, target, maxDistance));\n    },\n    interpolate: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        let p1 = {\n            x: 100,\n            y: 100\n        };\n        let p2 = {\n            x: 300,\n            y: 300\n        };\n        let t = 0.5;\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$654275d54901f10e)(ctx, p1, 'blue');\n            (0, $086612735116fd75$export$654275d54901f10e)(ctx, p2, 'red');\n            (0, $086612735116fd75$export$819db45aec5fcbe5)(ctx, {\n                start: p1,\n                end: p2\n            }, 'gray');\n            const interpolated = $ee083671c43a5e14$export$89e29e4ab65e70a9(p1, p2, t);\n            (0, $086612735116fd75$export$654275d54901f10e)(ctx, interpolated, 'green');\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Point 1',\n                    p1\n                ],\n                [\n                    'Point 2',\n                    p2\n                ],\n                [\n                    't (Interpolation)',\n                    t.toFixed(2)\n                ],\n                [\n                    'Interpolated',\n                    interpolated\n                ],\n                'Click to set Point 1',\n                'Move mouse to set Point 2',\n                'Use +/- to adjust t'\n            ]);\n        }\n        (0, $086612735116fd75$export$64ef1bee2b9504c1)({\n            canvas: canvas,\n            draw: draw\n        }, (pos)=>p1 = pos);\n        (0, $086612735116fd75$export$d947e5f4f4c48d48)({\n            canvas: canvas,\n            draw: draw\n        }, (pos)=>p2 = pos);\n        (0, $086612735116fd75$export$df61b30b684217c0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            '+': ()=>t = Math.min(1, t + 0.05),\n            '-': ()=>t = Math.max(0, t - 0.05)\n        });\n        draw();\n    }\n};\n\n\nvar $7d6e798d0a09cf0e$exports = {};\n\n$parcel$export($7d6e798d0a09cf0e$exports, \"degreesToRadians\", () => $7d6e798d0a09cf0e$export$c9fcf1a7df975d78);\n$parcel$export($7d6e798d0a09cf0e$exports, \"radiansToDegrees\", () => $7d6e798d0a09cf0e$export$c41dd2a8460d3196);\n$parcel$export($7d6e798d0a09cf0e$exports, \"radiansBetweenLines\", () => $7d6e798d0a09cf0e$export$3a4b8e4b64134e7c);\n$parcel$export($7d6e798d0a09cf0e$exports, \"degreesBetweenLines\", () => $7d6e798d0a09cf0e$export$ea8f9eb72b6b55d);\n$parcel$export($7d6e798d0a09cf0e$exports, \"radiansBetweenPoints\", () => $7d6e798d0a09cf0e$export$96f15a967e7c135d);\n$parcel$export($7d6e798d0a09cf0e$exports, \"degreesBetweenPoints\", () => $7d6e798d0a09cf0e$export$de2bf753b2214bd5);\n$parcel$export($7d6e798d0a09cf0e$exports, \"degreesBetweenAngles\", () => $7d6e798d0a09cf0e$export$4db6634817520e36);\n$parcel$export($7d6e798d0a09cf0e$exports, \"radiansBetweenAngles\", () => $7d6e798d0a09cf0e$export$8a7ae1f8cb144188);\n$parcel$export($7d6e798d0a09cf0e$exports, \"rotateAroundByRadians\", () => $7d6e798d0a09cf0e$export$4c204ff3dcb25f97);\n$parcel$export($7d6e798d0a09cf0e$exports, \"rotateAroundByDegrees\", () => $7d6e798d0a09cf0e$export$295b780a357000fd);\n$parcel$export($7d6e798d0a09cf0e$exports, \"rotateAngleTowardsRadians\", () => $7d6e798d0a09cf0e$export$33ea901e4ef74ae7);\n$parcel$export($7d6e798d0a09cf0e$exports, \"rotateAngleTowardsDegrees\", () => $7d6e798d0a09cf0e$export$6162db30a42a5821);\n\nconst $7d6e798d0a09cf0e$export$c9fcf1a7df975d78 = (degrees)=>{\n    return degrees * Math.PI / 180;\n};\nconst $7d6e798d0a09cf0e$export$c41dd2a8460d3196 = (radians)=>{\n    return radians * 180 / Math.PI;\n};\nconst $7d6e798d0a09cf0e$export$3a4b8e4b64134e7c = (line1, line2)=>{\n    const dx1 = line1.end.x - line1.start.x;\n    const dy1 = line1.end.y - line1.start.y;\n    const dx2 = line2.end.x - line2.start.x;\n    const dy2 = line2.end.y - line2.start.y;\n    const dotProduct = dx1 * dx2 + dy1 * dy2;\n    const magnitude1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);\n    const magnitude2 = Math.sqrt(dx2 * dx2 + dy2 * dy2);\n    const cosTheta = dotProduct / (magnitude1 * magnitude2);\n    return Math.acos(cosTheta);\n};\nconst $7d6e798d0a09cf0e$export$ea8f9eb72b6b55d = (line1, line2)=>{\n    return $7d6e798d0a09cf0e$export$c41dd2a8460d3196($7d6e798d0a09cf0e$export$3a4b8e4b64134e7c(line1, line2));\n};\nconst $7d6e798d0a09cf0e$export$96f15a967e7c135d = (p1, p2)=>{\n    const dx = p2.x - p1.x;\n    const dy = p2.y - p1.y;\n    return Math.atan2(dy, dx);\n};\nconst $7d6e798d0a09cf0e$export$de2bf753b2214bd5 = (p1, p2)=>{\n    return $7d6e798d0a09cf0e$export$c41dd2a8460d3196($7d6e798d0a09cf0e$export$96f15a967e7c135d(p1, p2));\n};\nconst $7d6e798d0a09cf0e$export$4db6634817520e36 = (degrees1, degrees2)=>{\n    const radians1 = $7d6e798d0a09cf0e$export$c9fcf1a7df975d78(degrees1);\n    const radians2 = $7d6e798d0a09cf0e$export$c9fcf1a7df975d78(degrees2);\n    const diff = radians2 - radians1;\n    return $7d6e798d0a09cf0e$export$c41dd2a8460d3196(Math.atan2(Math.sin(diff), Math.cos(diff)));\n};\nconst $7d6e798d0a09cf0e$export$8a7ae1f8cb144188 = (radians1, radians2)=>{\n    const diff = radians2 - radians1;\n    return Math.atan2(Math.sin(diff), Math.cos(diff));\n};\nconst $7d6e798d0a09cf0e$export$4c204ff3dcb25f97 = (center, point, angleRadians)=>{\n    const angleToTarget = $7d6e798d0a09cf0e$export$96f15a967e7c135d(center, point);\n    const distanceToTarget = (0, $ee083671c43a5e14$export$9f17032d917177de)(center, point);\n    return {\n        x: center.x + Math.cos(angleToTarget + angleRadians) * distanceToTarget,\n        y: center.y + Math.sin(angleToTarget + angleRadians) * distanceToTarget\n    };\n};\nconst $7d6e798d0a09cf0e$export$295b780a357000fd = (center, point, angleDegrees)=>{\n    return $7d6e798d0a09cf0e$export$4c204ff3dcb25f97(center, point, $7d6e798d0a09cf0e$export$c9fcf1a7df975d78(angleDegrees));\n};\nconst $7d6e798d0a09cf0e$export$33ea901e4ef74ae7 = (currentAngleRadians, targetAngleRadians, rotateAmountRadians)=>{\n    // Normalize angles to [0, 2π]\n    const current = (currentAngleRadians % (2 * Math.PI) + 2 * Math.PI) % (2 * Math.PI);\n    const normalizedTarget = (targetAngleRadians % (2 * Math.PI) + 2 * Math.PI) % (2 * Math.PI);\n    // Calculate shortest angular distance\n    let diff = normalizedTarget - current;\n    if (diff > Math.PI) diff -= 2 * Math.PI;\n    if (diff < -Math.PI) diff += 2 * Math.PI;\n    // Clamp rotation to the specified amount\n    const rotation = Math.abs(diff) <= rotateAmountRadians ? diff : Math.sign(diff) * rotateAmountRadians;\n    return current + rotation;\n};\nconst $7d6e798d0a09cf0e$export$6162db30a42a5821 = (currentAngleDegrees, targetAngleDegrees, rotateAmountDegrees)=>{\n    return $7d6e798d0a09cf0e$export$c41dd2a8460d3196($7d6e798d0a09cf0e$export$33ea901e4ef74ae7($7d6e798d0a09cf0e$export$c9fcf1a7df975d78(currentAngleDegrees), $7d6e798d0a09cf0e$export$c9fcf1a7df975d78(targetAngleDegrees), $7d6e798d0a09cf0e$export$c9fcf1a7df975d78(rotateAmountDegrees)));\n};\n\n\nconst $97fc7d4a5f524dad$export$7f9972325ebfd559 = ()=>({\n        x: 0,\n        y: 0\n    });\nconst $97fc7d4a5f524dad$export$e16d8520af44a096 = (v1, v2)=>({\n        x: v1.x + v2.x,\n        y: v1.y + v2.y\n    });\nconst $97fc7d4a5f524dad$export$4e2d2ead65e5f7e3 = (v1, v2)=>({\n        x: v1.x - v2.x,\n        y: v1.y - v2.y\n    });\nconst $97fc7d4a5f524dad$export$dcdf75081b88279d = (v, scalar)=>({\n        x: v.x * scalar,\n        y: v.y * scalar\n    });\nconst $97fc7d4a5f524dad$export$f24224f1c91d8156 = (v)=>Math.sqrt(v.x * v.x + v.y * v.y);\nconst $97fc7d4a5f524dad$export$411e9a7b4316b872 = (v1, v2)=>{\n    const edge = $97fc7d4a5f524dad$export$4e2d2ead65e5f7e3(v2, v1);\n    return $97fc7d4a5f524dad$export$a3295358bff77e({\n        x: -edge.y,\n        y: edge.x\n    }); // Perpendicular to the edge\n};\nconst $97fc7d4a5f524dad$export$a3295358bff77e = (v)=>{\n    const len = $97fc7d4a5f524dad$export$f24224f1c91d8156(v);\n    return len === 0 ? $97fc7d4a5f524dad$export$7f9972325ebfd559() : $97fc7d4a5f524dad$export$dcdf75081b88279d(v, 1 / len);\n};\nconst $97fc7d4a5f524dad$export$7d15b64cf5a3a4c4 = (v, minLength, maxLength)=>{\n    const len = $97fc7d4a5f524dad$export$f24224f1c91d8156(v);\n    const clampedLength = Math.max(minLength, Math.min(maxLength, len));\n    return $97fc7d4a5f524dad$export$dcdf75081b88279d($97fc7d4a5f524dad$export$a3295358bff77e(v), clampedLength);\n};\nconst $97fc7d4a5f524dad$export$89e29e4ab65e70a9 = (start, end, t)=>({\n        x: start.x + (end.x - start.x) * t,\n        y: start.y + (end.y - start.y) * t\n    });\nconst $97fc7d4a5f524dad$export$dcb617f3d34308fe = (start, end, point)=>{\n    const dx = end.x - start.x;\n    const dy = end.y - start.y;\n    const dp = $97fc7d4a5f524dad$export$4e2d2ead65e5f7e3(point, start);\n    return Math.max(0, Math.min(1, (dp.x * dx + dp.y * dy) / (dx * dx + dy * dy)));\n};\nconst $97fc7d4a5f524dad$export$9debe8cffacea23 = (vector, normal)=>{\n    // Using reflection formula R = V - 2(V·N)N\n    const dotProduct = 2 * $97fc7d4a5f524dad$export$94132a0e348806d4(vector, normal); // 2(V·N)\n    return {\n        x: vector.x - dotProduct * normal.x,\n        y: vector.y - dotProduct * normal.y\n    };\n};\nconst $97fc7d4a5f524dad$export$b1d53cea8aef9694 = (angleRadians, length)=>({\n        x: Math.cos(angleRadians) * length,\n        y: Math.sin(angleRadians) * length\n    });\nconst $97fc7d4a5f524dad$export$e92f669ea83c5a35 = (angleDegrees, length)=>$97fc7d4a5f524dad$export$b1d53cea8aef9694(angleDegrees * Math.PI / 180, length);\nconst $97fc7d4a5f524dad$export$c78ecdc202171e36 = (v, angleRadians)=>{\n    const cos = Math.cos(angleRadians);\n    const sin = Math.sin(angleRadians);\n    return {\n        x: v.x * cos - v.y * sin,\n        y: v.x * sin + v.y * cos\n    };\n};\nconst $97fc7d4a5f524dad$export$62f2d546c3c709dc = (v, angleDegrees)=>$97fc7d4a5f524dad$export$c78ecdc202171e36(v, angleDegrees * Math.PI / 180);\nconst $97fc7d4a5f524dad$export$94132a0e348806d4 = (v1, v2)=>v1.x * v2.x + v1.y * v2.y;\nconst $97fc7d4a5f524dad$export$4380c87abf28fdf = (v, newLength)=>{\n    return $97fc7d4a5f524dad$export$dcdf75081b88279d($97fc7d4a5f524dad$export$a3295358bff77e(v), newLength);\n};\n\n\n\n\nconst $1f98b464ed010556$export$4a0439d774561d41 = {\n    degreesToRadians: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        let degrees = 45;\n        const center = {\n            x: canvas.width / 2,\n            y: canvas.height / 2\n        };\n        const radius = 100;\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            // Draw center dot\n            (0, $086612735116fd75$export$654275d54901f10e)(ctx, center, 'black', 5);\n            // Draw angle visualization\n            const radians = $7d6e798d0a09cf0e$export$c9fcf1a7df975d78(degrees);\n            (0, $086612735116fd75$export$bf8a3f9983094125)(ctx, center, radius, 0, radians, 'blue');\n            // Draw lines at the end of the arc\n            const normalEnd = $97fc7d4a5f524dad$export$e16d8520af44a096(center, {\n                x: radius,\n                y: 0\n            });\n            const angleEnd = $97fc7d4a5f524dad$export$e16d8520af44a096(center, $97fc7d4a5f524dad$export$b1d53cea8aef9694(radians, radius));\n            (0, $086612735116fd75$export$819db45aec5fcbe5)(ctx, {\n                start: center,\n                end: normalEnd\n            }, 'blue');\n            (0, $086612735116fd75$export$819db45aec5fcbe5)(ctx, {\n                start: center,\n                end: angleEnd\n            }, 'blue');\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Degrees',\n                    degrees\n                ],\n                [\n                    'Radians',\n                    radians\n                ],\n                'Use +/- to adjust angle'\n            ]);\n        }\n        (0, $086612735116fd75$export$df61b30b684217c0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            '+': ()=>degrees++,\n            '-': ()=>degrees--\n        });\n        draw();\n    },\n    radiansToDegrees: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        let radians = Math.PI / 4;\n        const center = {\n            x: canvas.width / 2,\n            y: canvas.height / 2\n        };\n        const radius = 100;\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            // Draw center dot\n            (0, $086612735116fd75$export$654275d54901f10e)(ctx, center, 'black', 5);\n            // Draw angle visualization\n            const degrees = $7d6e798d0a09cf0e$export$c41dd2a8460d3196(radians);\n            (0, $086612735116fd75$export$bf8a3f9983094125)(ctx, center, radius, 0, radians, 'red');\n            // Draw lines at the end of the arc\n            const normalEnd = $97fc7d4a5f524dad$export$e16d8520af44a096(center, {\n                x: radius,\n                y: 0\n            });\n            const angleEnd = $97fc7d4a5f524dad$export$e16d8520af44a096(center, $97fc7d4a5f524dad$export$b1d53cea8aef9694(radians, radius));\n            (0, $086612735116fd75$export$819db45aec5fcbe5)(ctx, {\n                start: center,\n                end: normalEnd\n            }, 'red');\n            (0, $086612735116fd75$export$819db45aec5fcbe5)(ctx, {\n                start: center,\n                end: angleEnd\n            }, 'red');\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Radians',\n                    radians\n                ],\n                [\n                    'Degrees',\n                    degrees\n                ],\n                'Use +/- to adjust angle'\n            ]);\n        }\n        (0, $086612735116fd75$export$df61b30b684217c0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            '+': ()=>radians + Math.PI / 180,\n            '-': ()=>radians -= Math.PI / 180\n        });\n        draw();\n    },\n    radiansBetweenLines: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        let line1 = {\n            start: {\n                x: 400,\n                y: 300\n            },\n            end: {\n                x: 500,\n                y: 300\n            }\n        };\n        let line2 = {\n            start: {\n                x: 400,\n                y: 300\n            },\n            end: {\n                x: 500,\n                y: 400\n            }\n        };\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$819db45aec5fcbe5)(ctx, line1, 'blue');\n            (0, $086612735116fd75$export$819db45aec5fcbe5)(ctx, line2, 'red');\n            (0, $086612735116fd75$export$654275d54901f10e)(ctx, line1.start, 'black');\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Angle (rad)',\n                    $7d6e798d0a09cf0e$export$3a4b8e4b64134e7c(line1, line2)\n                ],\n                'Drag endpoints to adjust lines'\n            ]);\n        }\n        (0, $086612735116fd75$export$d7d5d435647ed5a0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            onStart: (pos)=>{\n                const endpoint = $ee083671c43a5e14$export$ff7f7c97cdce86e(pos, [\n                    line1.end,\n                    line2.end\n                ]);\n                if (endpoint === line1.end) line1.end = pos;\n                else line2.end = pos;\n            },\n            onDrag: (pos)=>{\n                const endpoint = $ee083671c43a5e14$export$ff7f7c97cdce86e(pos, [\n                    line1.end,\n                    line2.end\n                ]);\n                if (endpoint === line1.end) line1.end = pos;\n                else line2.end = pos;\n            }\n        });\n        draw();\n    },\n    degreesBetweenLines: (canvas)=>{\n        // Same as radiansBetweenLines but showing degrees\n        const ctx = canvas.getContext('2d');\n        let line1 = {\n            start: {\n                x: 400,\n                y: 300\n            },\n            end: {\n                x: 500,\n                y: 300\n            }\n        };\n        let line2 = {\n            start: {\n                x: 400,\n                y: 300\n            },\n            end: {\n                x: 500,\n                y: 400\n            }\n        };\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$819db45aec5fcbe5)(ctx, line1, 'blue');\n            (0, $086612735116fd75$export$819db45aec5fcbe5)(ctx, line2, 'red');\n            (0, $086612735116fd75$export$654275d54901f10e)(ctx, line1.start, 'black');\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Angle (deg)',\n                    $7d6e798d0a09cf0e$export$ea8f9eb72b6b55d(line1, line2)\n                ],\n                'Drag endpoints to adjust lines'\n            ]);\n        }\n        (0, $086612735116fd75$export$d7d5d435647ed5a0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            onStart: (pos)=>{\n                const endpoint = $ee083671c43a5e14$export$ff7f7c97cdce86e(pos, [\n                    line1.end,\n                    line2.end\n                ]);\n                if (endpoint === line1.end) line1.end = pos;\n                else line2.end = pos;\n            },\n            onDrag: (pos)=>{\n                const endpoint = $ee083671c43a5e14$export$ff7f7c97cdce86e(pos, [\n                    line1.end,\n                    line2.end\n                ]);\n                if (endpoint === line1.end) line1.end = pos;\n                else line2.end = pos;\n            }\n        });\n        draw();\n    },\n    radiansBetweenPoints: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        let center = {\n            x: 400,\n            y: 300\n        };\n        let target = {\n            x: 500,\n            y: 300\n        };\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$654275d54901f10e)(ctx, center, 'blue');\n            (0, $086612735116fd75$export$654275d54901f10e)(ctx, target, 'red');\n            (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, center, target);\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Angle (rad)',\n                    $7d6e798d0a09cf0e$export$96f15a967e7c135d(center, target)\n                ],\n                'Click to set center, move mouse for target'\n            ]);\n        }\n        (0, $086612735116fd75$export$d947e5f4f4c48d48)({\n            canvas: canvas,\n            draw: draw\n        }, (pos)=>target = pos);\n        (0, $086612735116fd75$export$d7d5d435647ed5a0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            onStart: (pos)=>center = pos,\n            onDrag: (pos)=>center = pos\n        });\n        draw();\n    },\n    degreesBetweenPoints: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        let center = {\n            x: 400,\n            y: 300\n        };\n        let target = {\n            x: 500,\n            y: 300\n        };\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$654275d54901f10e)(ctx, center, 'blue');\n            (0, $086612735116fd75$export$654275d54901f10e)(ctx, target, 'red');\n            (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, center, target);\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Angle (deg)',\n                    $7d6e798d0a09cf0e$export$de2bf753b2214bd5(center, target)\n                ],\n                'Click to set center, move mouse for target'\n            ]);\n        }\n        (0, $086612735116fd75$export$d947e5f4f4c48d48)({\n            canvas: canvas,\n            draw: draw\n        }, (pos)=>target = pos);\n        (0, $086612735116fd75$export$d7d5d435647ed5a0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            onStart: (pos)=>center = pos,\n            onDrag: (pos)=>center = pos\n        });\n        draw();\n    },\n    degreesBetweenAngles: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        let angle1 = 45;\n        let angle2 = 90;\n        const center = {\n            x: canvas.width / 2,\n            y: canvas.height / 2\n        };\n        const radius = 100;\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            // Draw angle arrows\n            const end1 = $97fc7d4a5f524dad$export$e16d8520af44a096(center, $97fc7d4a5f524dad$export$e92f669ea83c5a35(angle1, radius));\n            const end2 = $97fc7d4a5f524dad$export$e16d8520af44a096(center, $97fc7d4a5f524dad$export$e92f669ea83c5a35(angle2, radius));\n            (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, center, end1, 'blue');\n            (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, center, end2, 'red');\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Angle 1 (deg)',\n                    angle1\n                ],\n                [\n                    'Angle 2 (deg)',\n                    angle2\n                ],\n                [\n                    'Degrees Between',\n                    $7d6e798d0a09cf0e$export$4db6634817520e36(angle1, angle2)\n                ],\n                'Use 1/2 to adjust angles'\n            ]);\n        }\n        (0, $086612735116fd75$export$df61b30b684217c0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            '1': ()=>angle1 = (angle1 + 15) % 360,\n            '2': ()=>angle2 = (angle2 + 15) % 360\n        });\n        draw();\n    },\n    radiansBetweenAngles: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        let angle1 = Math.PI / 4;\n        let angle2 = Math.PI / 2;\n        const center = {\n            x: canvas.width / 2,\n            y: canvas.height / 2\n        };\n        const radius = 100;\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            // Draw angle arrows\n            const end1 = $97fc7d4a5f524dad$export$e16d8520af44a096(center, $97fc7d4a5f524dad$export$b1d53cea8aef9694(angle1, radius));\n            const end2 = $97fc7d4a5f524dad$export$e16d8520af44a096(center, $97fc7d4a5f524dad$export$b1d53cea8aef9694(angle2, radius));\n            (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, center, end1, 'blue');\n            (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, center, end2, 'red');\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Angle 1 (rad)',\n                    angle1\n                ],\n                [\n                    'Angle 2 (rad)',\n                    angle2\n                ],\n                [\n                    'Radians Between',\n                    $7d6e798d0a09cf0e$export$8a7ae1f8cb144188(angle1, angle2)\n                ],\n                'Use 1/2 to adjust angles'\n            ]);\n        }\n        (0, $086612735116fd75$export$df61b30b684217c0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            '1': ()=>angle1 = (angle1 + Math.PI / 6) % (Math.PI * 2),\n            '2': ()=>angle2 = (angle2 + Math.PI / 6) % (Math.PI * 2)\n        });\n        draw();\n    },\n    rotateAroundByRadians: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        let center = {\n            x: 400,\n            y: 300\n        };\n        let point = {\n            x: 500,\n            y: 300\n        };\n        const step = Math.PI / 180;\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$654275d54901f10e)(ctx, center, 'blue');\n            (0, $086612735116fd75$export$654275d54901f10e)(ctx, point, 'red');\n            (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, center, point);\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Center',\n                    center\n                ],\n                [\n                    'Point',\n                    point\n                ],\n                [\n                    'Angle (rad)',\n                    $7d6e798d0a09cf0e$export$96f15a967e7c135d(center, point)\n                ],\n                'Click to set center, move mouse for point'\n            ]);\n        }\n        (0, $086612735116fd75$export$d947e5f4f4c48d48)({\n            canvas: canvas,\n            draw: draw\n        }, (pos)=>point = pos);\n        (0, $086612735116fd75$export$64ef1bee2b9504c1)({\n            canvas: canvas,\n            draw: draw\n        }, (pos)=>center = pos);\n        (0, $086612735116fd75$export$e3607ec2d7a891c4)(draw, ()=>point = $7d6e798d0a09cf0e$export$4c204ff3dcb25f97(center, point, step));\n    },\n    rotateAroundByDegrees: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        let center = {\n            x: 400,\n            y: 300\n        };\n        let point = {\n            x: 500,\n            y: 300\n        };\n        const step = 1; // 1 degree per frame\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$654275d54901f10e)(ctx, center, 'blue');\n            (0, $086612735116fd75$export$654275d54901f10e)(ctx, point, 'red');\n            (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, center, point);\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Center',\n                    center\n                ],\n                [\n                    'Point',\n                    point\n                ],\n                [\n                    'Angle (deg)',\n                    $7d6e798d0a09cf0e$export$de2bf753b2214bd5(center, point)\n                ],\n                'Click to set center, move mouse for point'\n            ]);\n        }\n        (0, $086612735116fd75$export$d947e5f4f4c48d48)({\n            canvas: canvas,\n            draw: draw\n        }, (pos)=>point = pos);\n        (0, $086612735116fd75$export$64ef1bee2b9504c1)({\n            canvas: canvas,\n            draw: draw\n        }, (pos)=>center = pos);\n        (0, $086612735116fd75$export$e3607ec2d7a891c4)(draw, ()=>point = $7d6e798d0a09cf0e$export$295b780a357000fd(center, point, step));\n    },\n    rotateAngleTowardsRadians: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        let currentAngle = 0;\n        let center = {\n            x: 400,\n            y: 300\n        };\n        let target = {\n            x: 500,\n            y: 300\n        };\n        let step = Math.PI / 180 / 3;\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$654275d54901f10e)(ctx, center, 'blue');\n            (0, $086612735116fd75$export$654275d54901f10e)(ctx, target, 'red');\n            const arrowEnd = $97fc7d4a5f524dad$export$e16d8520af44a096(center, $97fc7d4a5f524dad$export$b1d53cea8aef9694(currentAngle, 100));\n            (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, center, arrowEnd);\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Current Angle',\n                    currentAngle\n                ],\n                [\n                    'Target Angle',\n                    $7d6e798d0a09cf0e$export$96f15a967e7c135d(center, target)\n                ],\n                [\n                    'Speed',\n                    step\n                ],\n                'Move mouse to change target',\n                'Press +/- to adjust speed'\n            ]);\n        }\n        (0, $086612735116fd75$export$d947e5f4f4c48d48)({\n            canvas: canvas,\n            draw: draw\n        }, (pos)=>target = pos);\n        (0, $086612735116fd75$export$df61b30b684217c0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            '+': ()=>step *= 1.5,\n            '-': ()=>step /= 1.5\n        });\n        (0, $086612735116fd75$export$e3607ec2d7a891c4)(draw, ()=>currentAngle = $7d6e798d0a09cf0e$export$33ea901e4ef74ae7(currentAngle, $7d6e798d0a09cf0e$export$96f15a967e7c135d(center, target), step));\n    },\n    rotateAngleTowardsDegrees: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        let currentAngle = 0;\n        let center = {\n            x: 400,\n            y: 300\n        };\n        let target = {\n            x: 500,\n            y: 300\n        };\n        let step = .33;\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$654275d54901f10e)(ctx, center, 'blue');\n            (0, $086612735116fd75$export$654275d54901f10e)(ctx, target, 'red');\n            const arrowEnd = $97fc7d4a5f524dad$export$e16d8520af44a096(center, $97fc7d4a5f524dad$export$e92f669ea83c5a35(currentAngle, 100));\n            (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, center, arrowEnd);\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Current Angle',\n                    currentAngle\n                ],\n                [\n                    'Target Angle',\n                    $7d6e798d0a09cf0e$export$de2bf753b2214bd5(center, target)\n                ],\n                [\n                    'Speed',\n                    step\n                ],\n                'Move mouse to change target',\n                'Press +/- to adjust speed'\n            ]);\n        }\n        (0, $086612735116fd75$export$d947e5f4f4c48d48)({\n            canvas: canvas,\n            draw: draw\n        }, (pos)=>target = pos);\n        (0, $086612735116fd75$export$df61b30b684217c0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            '+': ()=>step *= 1.5,\n            '-': ()=>step /= 1.5\n        });\n        (0, $086612735116fd75$export$e3607ec2d7a891c4)(draw, ()=>currentAngle = $7d6e798d0a09cf0e$export$6162db30a42a5821(currentAngle, $7d6e798d0a09cf0e$export$de2bf753b2214bd5(center, target), step));\n    }\n};\n\n\n\nconst $e0f9ecfe35f13ee3$export$717b54132acde7e2 = (line1, line2)=>{\n    const { start: p1, end: p2 } = line1;\n    const { start: p3, end: p4 } = line2;\n    const denom = (p1.x - p2.x) * (p3.y - p4.y) - (p1.y - p2.y) * (p3.x - p4.x);\n    if (denom === 0) return null; // Parallel lines\n    const t = ((p1.x - p3.x) * (p3.y - p4.y) - (p1.y - p3.y) * (p3.x - p4.x)) / denom;\n    const u = ((p1.x - p3.x) * (p1.y - p2.y) - (p1.y - p3.y) * (p1.x - p2.x)) / denom;\n    if (t >= 0 && t <= 1 && u >= 0 && u <= 1) return {\n        x: p1.x + t * (p2.x - p1.x),\n        y: p1.y + t * (p2.y - p1.y)\n    };\n    return null; // No intersection\n};\nconst $e0f9ecfe35f13ee3$export$87a9ad0c3c05abf7 = (line, circle)=>{\n    const { start: start, end: end } = line;\n    const { x: cx, y: cy, radius: radius } = circle;\n    const dx = end.x - start.x;\n    const dy = end.y - start.y;\n    const a = dx * dx + dy * dy;\n    const b = 2 * (dx * (start.x - cx) + dy * (start.y - cy));\n    const c = (start.x - cx) ** 2 + (start.y - cy) ** 2 - radius ** 2;\n    const discriminant = b * b - 4 * a * c;\n    if (discriminant < 0) return []; // No intersection\n    const t1 = (-b - Math.sqrt(discriminant)) / (2 * a);\n    const t2 = (-b + Math.sqrt(discriminant)) / (2 * a);\n    const points = [];\n    if (t1 >= 0 && t1 <= 1) points.push({\n        x: start.x + t1 * dx,\n        y: start.y + t1 * dy\n    });\n    if (t2 >= 0 && t2 <= 1) points.push({\n        x: start.x + t2 * dx,\n        y: start.y + t2 * dy\n    });\n    return points;\n};\nconst $e0f9ecfe35f13ee3$export$1064a8e0d217f0ed = (line, rect)=>{\n    const { x: x, y: y, width: width, height: height } = rect;\n    const rectLines = [\n        {\n            start: {\n                x: x,\n                y: y\n            },\n            end: {\n                x: x + width,\n                y: y\n            }\n        },\n        {\n            start: {\n                x: x + width,\n                y: y\n            },\n            end: {\n                x: x + width,\n                y: y + height\n            }\n        },\n        {\n            start: {\n                x: x + width,\n                y: y + height\n            },\n            end: {\n                x: x,\n                y: y + height\n            }\n        },\n        {\n            start: {\n                x: x,\n                y: y + height\n            },\n            end: {\n                x: x,\n                y: y\n            }\n        }\n    ];\n    const intersections = [];\n    rectLines.forEach((rectLine)=>{\n        const intersection = $e0f9ecfe35f13ee3$export$717b54132acde7e2(line, rectLine);\n        if (intersection) intersections.push(intersection);\n    });\n    return intersections;\n};\nconst $e0f9ecfe35f13ee3$export$8e4f20627449cf66 = (circle1, circle2)=>{\n    const d = (0, $ee083671c43a5e14$export$9f17032d917177de)(circle1, circle2);\n    const overlap = circle1.radius + circle2.radius - d;\n    return overlap > 0 ? overlap : 0; // Return overlap depth or 0 if no overlap\n};\nconst $e0f9ecfe35f13ee3$export$e90bccbb88aa9786 = (rect1, rect2)=>{\n    const x = Math.max(rect1.x, rect2.x);\n    const y = Math.max(rect1.y, rect2.y);\n    const width = Math.min(rect1.x + rect1.width, rect2.x + rect2.width) - x;\n    const height = Math.min(rect1.y + rect1.height, rect2.y + rect2.height) - y;\n    if (width > 0 && height > 0) return {\n        x: x,\n        y: y,\n        width: width,\n        height: height\n    };\n    return null; // No intersection\n};\n\n\n\n\n\n\n\n\n\nvar $5dda501f4a9774dc$exports = {};\n\n$parcel$export($5dda501f4a9774dc$exports, \"applyForce\", () => $5dda501f4a9774dc$export$da81038170e85b8c);\n$parcel$export($5dda501f4a9774dc$exports, \"applyDamping\", () => $5dda501f4a9774dc$export$da1fe76f9b6a25f);\n$parcel$export($5dda501f4a9774dc$exports, \"applyTorque\", () => $5dda501f4a9774dc$export$a7d88964434daaec);\n$parcel$export($5dda501f4a9774dc$exports, \"applyAngleForce\", () => $5dda501f4a9774dc$export$3ffb1581bff1af41);\n$parcel$export($5dda501f4a9774dc$exports, \"collide\", () => $5dda501f4a9774dc$export$98e6d07575f46913);\n$parcel$export($5dda501f4a9774dc$exports, \"separate\", () => $5dda501f4a9774dc$export$709f6946f4e97408);\n$parcel$export($5dda501f4a9774dc$exports, \"repel\", () => $5dda501f4a9774dc$export$168bb2ff78cb66b4);\n$parcel$export($5dda501f4a9774dc$exports, \"fluid\", () => $5dda501f4a9774dc$export$86e87f677abfca4b);\n$parcel$export($5dda501f4a9774dc$exports, \"boids\", () => $5dda501f4a9774dc$export$fbe21c35773c13ce);\n\n\nconst $5dda501f4a9774dc$export$da81038170e85b8c = (vector, force, scaler = 1)=>{\n    vector.x += force.x * scaler;\n    vector.y += force.y * scaler;\n};\nconst $5dda501f4a9774dc$export$da1fe76f9b6a25f = (vector, damping)=>{\n    vector.x *= 1 - damping;\n    vector.y *= 1 - damping;\n};\nconst $5dda501f4a9774dc$export$a7d88964434daaec = (angularVelocity, torque, scaler = 1)=>{\n    return angularVelocity + torque * scaler;\n};\nconst $5dda501f4a9774dc$export$3ffb1581bff1af41 = (vector, angle, force, scaler = 1)=>{\n    $5dda501f4a9774dc$export$da81038170e85b8c(vector, (0, $97fc7d4a5f524dad$export$b1d53cea8aef9694)(angle, force), scaler);\n};\nconst $5dda501f4a9774dc$export$98e6d07575f46913 = (obj1, obj2, restitution = 0.9, resolveOverlapMode = 'separate')=>{\n    const normal = (0, $97fc7d4a5f524dad$export$a3295358bff77e)((0, $97fc7d4a5f524dad$export$4e2d2ead65e5f7e3)(obj2.position, obj1.position));\n    const relativeVelocity = (0, $97fc7d4a5f524dad$export$4e2d2ead65e5f7e3)(obj2.velocity, obj1.velocity);\n    // Check if objects are moving toward each other\n    const velocityAlongNormal = (0, $97fc7d4a5f524dad$export$94132a0e348806d4)(relativeVelocity, normal);\n    if (velocityAlongNormal <= 0) {\n        // Calculate impulse\n        const impulseMagnitude = -(1 + restitution) * velocityAlongNormal;\n        const impulse = impulseMagnitude / (1 / obj1.mass + 1 / obj2.mass);\n        // Apply impulse\n        const impulseVector = (0, $97fc7d4a5f524dad$export$dcdf75081b88279d)(normal, impulse);\n        obj1.velocity = (0, $97fc7d4a5f524dad$export$4e2d2ead65e5f7e3)(obj1.velocity, (0, $97fc7d4a5f524dad$export$dcdf75081b88279d)(impulseVector, 1 / obj1.mass));\n        obj2.velocity = (0, $97fc7d4a5f524dad$export$e16d8520af44a096)(obj2.velocity, (0, $97fc7d4a5f524dad$export$dcdf75081b88279d)(impulseVector, 1 / obj2.mass));\n    }\n    // Handle overlap resolution based on mode\n    if (resolveOverlapMode === 'separate') $5dda501f4a9774dc$export$709f6946f4e97408(obj1, obj2);\n    else if (resolveOverlapMode === 'repel') $5dda501f4a9774dc$export$168bb2ff78cb66b4(obj1, obj2);\n};\nconst $5dda501f4a9774dc$export$709f6946f4e97408 = (obj1, obj2)=>{\n    const normal = (0, $97fc7d4a5f524dad$export$4e2d2ead65e5f7e3)(obj2.position, obj1.position);\n    const dist = (0, $ee083671c43a5e14$export$9f17032d917177de)(obj1.position, obj2.position);\n    // Check if there is overlap\n    const overlap = obj1.radius + obj2.radius - dist;\n    if (overlap <= 0) return; // No overlap\n    // Handle case where positions are identical\n    const direction = dist === 0 ? {\n        x: 1,\n        y: 0\n    } : (0, $97fc7d4a5f524dad$export$dcdf75081b88279d)(normal, 1 / dist);\n    // Calculate the correction vector\n    const totalMass = obj1.mass + obj2.mass;\n    const correction = (0, $97fc7d4a5f524dad$export$dcdf75081b88279d)(direction, overlap);\n    // Distribute the correction based on the masses\n    const obj1Correction = (0, $97fc7d4a5f524dad$export$dcdf75081b88279d)(correction, obj2.mass / totalMass);\n    const obj2Correction = (0, $97fc7d4a5f524dad$export$dcdf75081b88279d)(correction, obj1.mass / totalMass);\n    // Adjust the positions of the objects\n    obj1.position = (0, $97fc7d4a5f524dad$export$4e2d2ead65e5f7e3)(obj1.position, obj1Correction);\n    obj2.position = (0, $97fc7d4a5f524dad$export$e16d8520af44a096)(obj2.position, obj2Correction);\n};\nconst $5dda501f4a9774dc$export$168bb2ff78cb66b4 = (obj1, obj2, strength = 1)=>{\n    const normal = (0, $97fc7d4a5f524dad$export$4e2d2ead65e5f7e3)(obj2.position, obj1.position);\n    const dist = (0, $ee083671c43a5e14$export$9f17032d917177de)(obj1.position, obj2.position);\n    const overlap = obj1.radius + obj2.radius - dist;\n    // Only apply repulsion if overlapping\n    if (overlap <= 0 || dist === 0) return;\n    // Normalize the direction vector\n    const direction = (0, $97fc7d4a5f524dad$export$dcdf75081b88279d)(normal, 1 / dist);\n    // Calculate repulsion force based on overlap and scale by strength\n    const repulsionForce = overlap * strength;\n    // Calculate repulsion force proportional to mass difference\n    const totalMass = obj1.mass + obj2.mass;\n    const obj1Strength = obj2.mass / totalMass * repulsionForce;\n    const obj2Strength = obj1.mass / totalMass * repulsionForce;\n    // Apply repulsion forces to velocities\n    obj1.velocity = (0, $97fc7d4a5f524dad$export$4e2d2ead65e5f7e3)(obj1.velocity, (0, $97fc7d4a5f524dad$export$dcdf75081b88279d)(direction, obj1Strength));\n    obj2.velocity = (0, $97fc7d4a5f524dad$export$e16d8520af44a096)(obj2.velocity, (0, $97fc7d4a5f524dad$export$dcdf75081b88279d)(direction, obj2Strength));\n};\nconst $5dda501f4a9774dc$export$86e87f677abfca4b = (particles, { smoothingRadius: smoothingRadius = 30, stiffness: stiffness = 50, restDensity: restDensity = 1, viscosity: viscosity = 0.1 } = {})=>{\n    const forces = particles.map(()=>({\n            x: 0,\n            y: 0\n        }));\n    const gridSize = smoothingRadius; // Size of each grid cell\n    const grid = {};\n    // Helper to compute grid key\n    const getGridKey = (x, y)=>`${Math.floor(x / gridSize)},${Math.floor(y / gridSize)}`;\n    // Populate the grid\n    particles.forEach((p)=>{\n        const key = getGridKey(p.position.x, p.position.y);\n        if (!grid[key]) grid[key] = [];\n        grid[key].push(p);\n    });\n    // Calculate densities\n    particles.forEach((p)=>{\n        p.density = 0;\n        const key = getGridKey(p.position.x, p.position.y);\n        // Check neighboring cells\n        const [gx, gy] = key.split(',').map(Number);\n        for(let dx = -1; dx <= 1; dx++)for(let dy = -1; dy <= 1; dy++){\n            const neighborKey = `${gx + dx},${gy + dy}`;\n            const neighbors = grid[neighborKey] || [];\n            neighbors.forEach((neighbor)=>{\n                const dist = Math.sqrt((0, $ee083671c43a5e14$export$d019ad931e844842)(p.position, neighbor.position));\n                if (dist < smoothingRadius) p.density += neighbor.mass * (1 - dist / smoothingRadius);\n            });\n        }\n        // Calculate pressure from density\n        p.pressure = stiffness * (p.density - restDensity);\n    });\n    // Calculate forces\n    particles.forEach((p, i)=>{\n        const key = getGridKey(p.position.x, p.position.y);\n        // Check neighboring cells\n        const [gx, gy] = key.split(',').map(Number);\n        for(let dx = -1; dx <= 1; dx++)for(let dy = -1; dy <= 1; dy++){\n            const neighborKey = `${gx + dx},${gy + dy}`;\n            const neighbors = grid[neighborKey] || [];\n            neighbors.forEach((neighbor)=>{\n                if (p === neighbor) return;\n                const dist = (0, $ee083671c43a5e14$export$9f17032d917177de)(p.position, neighbor.position);\n                if (dist < smoothingRadius) {\n                    // Direction from p to neighbor\n                    const dir = (0, $97fc7d4a5f524dad$export$a3295358bff77e)((0, $97fc7d4a5f524dad$export$4e2d2ead65e5f7e3)(neighbor.position, p.position));\n                    // Pressure force (repels particles in compressed regions)\n                    const pressureForce = (0, $97fc7d4a5f524dad$export$dcdf75081b88279d)(dir, -(p.pressure + neighbor.pressure) * (1 - dist / smoothingRadius) / (2 * p.density * neighbor.density));\n                    // Viscosity force (averages out velocities)\n                    const relativeVel = (0, $97fc7d4a5f524dad$export$4e2d2ead65e5f7e3)(neighbor.velocity, p.velocity);\n                    const viscosityForce = (0, $97fc7d4a5f524dad$export$dcdf75081b88279d)(relativeVel, viscosity * (1 - dist / smoothingRadius) / (p.density * neighbor.density));\n                    forces[i] = (0, $97fc7d4a5f524dad$export$e16d8520af44a096)(forces[i], (0, $97fc7d4a5f524dad$export$dcdf75081b88279d)((0, $97fc7d4a5f524dad$export$e16d8520af44a096)(pressureForce, viscosityForce), p.mass * neighbor.mass));\n                }\n            });\n        }\n    });\n    return forces;\n};\nconst $5dda501f4a9774dc$export$fbe21c35773c13ce = (boids, rules = {})=>{\n    const { separationRadius: separationRadius = 25, alignmentRadius: alignmentRadius = 50, cohesionRadius: cohesionRadius = 50, separationWeight: separationWeight = 1, alignmentWeight: alignmentWeight = 1, cohesionWeight: cohesionWeight = 1, maxSpeed: maxSpeed = 10 } = rules;\n    return boids.map((boid, i)=>{\n        let separation = {\n            x: 0,\n            y: 0\n        };\n        let alignment = {\n            x: 0,\n            y: 0\n        };\n        let cohesion = {\n            x: 0,\n            y: 0\n        };\n        let neighborCount = 0;\n        // Calculate forces from all neighbors\n        boids.forEach((other, j)=>{\n            if (i === j) return;\n            const dist = (0, $ee083671c43a5e14$export$9f17032d917177de)(boid.position, other.position);\n            // Separation - avoid crowding\n            if (dist < separationRadius) {\n                const away = (0, $97fc7d4a5f524dad$export$a3295358bff77e)((0, $97fc7d4a5f524dad$export$4e2d2ead65e5f7e3)(boid.position, other.position));\n                separation = (0, $97fc7d4a5f524dad$export$e16d8520af44a096)(separation, (0, $97fc7d4a5f524dad$export$dcdf75081b88279d)(away, 1 / Math.max(dist, 0.1)));\n            }\n            // Alignment and Cohesion\n            if (dist < alignmentRadius) {\n                alignment = (0, $97fc7d4a5f524dad$export$e16d8520af44a096)(alignment, other.velocity);\n                cohesion = (0, $97fc7d4a5f524dad$export$e16d8520af44a096)(cohesion, other.position);\n                neighborCount++;\n            }\n        });\n        // Average and scale forces\n        let force = {\n            x: 0,\n            y: 0\n        };\n        if (neighborCount > 0) {\n            // Normalize separation\n            if (separation.x !== 0 || separation.y !== 0) separation = (0, $97fc7d4a5f524dad$export$a3295358bff77e)(separation);\n            // Average alignment and cohesion\n            alignment = (0, $97fc7d4a5f524dad$export$dcdf75081b88279d)(alignment, 1 / neighborCount);\n            cohesion = (0, $97fc7d4a5f524dad$export$dcdf75081b88279d)(cohesion, 1 / neighborCount);\n            // Move toward center of neighbors\n            cohesion = (0, $97fc7d4a5f524dad$export$4e2d2ead65e5f7e3)(cohesion, boid.position);\n            // Normalize forces\n            if (alignment.x !== 0 || alignment.y !== 0) alignment = (0, $97fc7d4a5f524dad$export$a3295358bff77e)(alignment);\n            if (cohesion.x !== 0 || cohesion.y !== 0) cohesion = (0, $97fc7d4a5f524dad$export$a3295358bff77e)(cohesion);\n            // Combine forces with weights\n            force = (0, $97fc7d4a5f524dad$export$e16d8520af44a096)((0, $97fc7d4a5f524dad$export$e16d8520af44a096)((0, $97fc7d4a5f524dad$export$dcdf75081b88279d)(separation, separationWeight), (0, $97fc7d4a5f524dad$export$dcdf75081b88279d)(alignment, alignmentWeight)), (0, $97fc7d4a5f524dad$export$dcdf75081b88279d)(cohesion, cohesionWeight));\n        }\n        // Clamp to max speed\n        if (maxSpeed > 0) {\n            const speed = Math.sqrt(force.x * force.x + force.y * force.y);\n            if (speed > maxSpeed) force = (0, $97fc7d4a5f524dad$export$dcdf75081b88279d)(force, maxSpeed / speed);\n        }\n        return force;\n    });\n};\n\n\n\n\n\n\nclass $e80cf0db060d44c4$export$324e885649fee72 {\n    static{\n        /** Default downward gravity for 2D side-view games */ this.DOWNWARD_GRAVITY = {\n            x: 0,\n            y: 980\n        };\n    }\n    constructor(props = {}){\n        /** General Properties (useful in all scenarios) */ this.position = {\n            x: 0,\n            y: 0\n        } // Current position in world space\n        ;\n        this.velocity = $97fc7d4a5f524dad$export$7f9972325ebfd559() // Current movement speed & direction\n        ;\n        this.acceleration = $97fc7d4a5f524dad$export$7f9972325ebfd559() // Current change in velocity\n        ;\n        this.mass = 1 // Mass affects force response & collisions\n        ;\n        this.radius = 0 // Collision radius\n        ;\n        this.elasticity = 0.8 // Bounce factor (0 = stop, 1 = perfect bounce)\n        ;\n        this.collisionOverlapResolution = 'separate' // Overlap resolution mode\n        ;\n        this.minSpeed = 0 // Velocity below this will be set to zero\n        ;\n        /** Top-Down Properties (for top-down games like tanks, racing) */ this.angle = 0 // Rotation angle in radians\n        ;\n        this.angularVelocity = 0 // Speed of rotation\n        ;\n        this.angularDrag = 0 // Rotation damping\n        ;\n        this.friction = 0 // Ground friction (0 = slide forever, 1 = instant stop)\n        ;\n        /** Side-View Properties (for platformers, physics games) */ this.gravity = $97fc7d4a5f524dad$export$7f9972325ebfd559() // Gravity force vector\n        ;\n        this.drag = 0 // Air drag (0 = none, 1 = instant stop)\n        ;\n        Object.assign(this, props);\n    }\n    update(deltaTime) {\n        // Apply gravity directly as acceleration (no mass needed)\n        $5dda501f4a9774dc$export$da81038170e85b8c(this.acceleration, this.gravity);\n        // Apply ground friction for top-down movement\n        if (this.friction > 0) $5dda501f4a9774dc$export$da1fe76f9b6a25f(this.velocity, this.friction);\n        // Apply air resistance for side-view movement\n        if (this.drag > 0) $5dda501f4a9774dc$export$da1fe76f9b6a25f(this.velocity, this.drag);\n        // Update velocity with acceleration\n        $5dda501f4a9774dc$export$da81038170e85b8c(this.velocity, this.acceleration, deltaTime);\n        // Clamp velocity to minSpeed and maxSpeed if set\n        const speed = $97fc7d4a5f524dad$export$f24224f1c91d8156(this.velocity);\n        if (this.maxSpeed !== undefined && speed > this.maxSpeed) this.velocity = $97fc7d4a5f524dad$export$dcdf75081b88279d($97fc7d4a5f524dad$export$a3295358bff77e(this.velocity), this.maxSpeed);\n        if (speed < this.minSpeed) this.velocity = $97fc7d4a5f524dad$export$7f9972325ebfd559(); // Zero the velocity if below minSpeed\n        // Update position with velocity\n        $5dda501f4a9774dc$export$da81038170e85b8c(this.position, this.velocity, deltaTime);\n        // Update angle with angular velocity\n        this.angle += this.angularVelocity * deltaTime;\n        // Apply angular drag\n        if (this.angularDrag > 0) this.angularVelocity = $5dda501f4a9774dc$export$a7d88964434daaec(this.angularVelocity, this.angularVelocity, 1 / this.mass);\n        // Reset forces\n        this.acceleration = $97fc7d4a5f524dad$export$7f9972325ebfd559();\n        this.angularVelocity = 0;\n    }\n    /**\n   * Applies a continuous force that affects acceleration over time\n   * Example: Gravity, engine thrust, wind\n   * @param force The force vector to apply\n   */ applyForce(force) {\n        $5dda501f4a9774dc$export$da81038170e85b8c(this.acceleration, force, 1 / this.mass);\n    }\n    /**\n   * Applies an instant change in velocity\n   * Example: Collision impact, jump, explosion knockback\n   * @param impulse The impulse vector (mass * velocity change)\n   */ applyImpulse(impulse) {\n        $5dda501f4a9774dc$export$da81038170e85b8c(this.velocity, impulse, 1 / this.mass);\n    }\n    /**\n   * Applies a continuous rotational force\n   * Example: Steering torque, wind rotation\n   */ applyTorque(torque) {\n        this.angularVelocity = $5dda501f4a9774dc$export$a7d88964434daaec(this.angularVelocity, torque, 1 / this.mass);\n    }\n    /**\n   * Applies a continuous forward force in the direction of angle\n   * Example: Rocket engine, car acceleration\n   */ thrust(force, angle = this.angle) {\n        $5dda501f4a9774dc$export$3ffb1581bff1af41(this.acceleration, angle, force, this.mass);\n    }\n    /**\n   * Points the body towards a target point\n   */ pointAt(target) {\n        this.angle = (0, $7d6e798d0a09cf0e$export$96f15a967e7c135d)(this.position, target);\n    }\n    /**\n   * Gradually rotates the body towards a target point at a specified rotation speed.\n   * @param target The target point to rotate towards.\n   * @param rotationSpeed The maximum rotation speed in radians per second.\n   * @param deltaTime The time step for the rotation.\n   */ pointTowards(target, rotationSpeed) {\n        const targetAngle = (0, $7d6e798d0a09cf0e$export$96f15a967e7c135d)(this.position, target);\n        this.angle = (0, $7d6e798d0a09cf0e$export$33ea901e4ef74ae7)(this.angle, targetAngle, rotationSpeed);\n    }\n    collideWithBody(other) {\n        if (this === other) return false; // Ignore self-collision\n        // Check if bodies are overlapping\n        const dist = (0, $ee083671c43a5e14$export$9f17032d917177de)(other.position, this.position);\n        if (dist > this.radius + other.radius) return false;\n        // Calculate bounciness from combined restitution (multiply elasticities)\n        const restitution = this.elasticity * other.elasticity;\n        // Resolve collision using physics library\n        $5dda501f4a9774dc$export$98e6d07575f46913(this, other, restitution, this.collisionOverlapResolution);\n        return true;\n    }\n    collideWithSurface(point, normal) {\n        // Normalize the normal vector\n        const n = $97fc7d4a5f524dad$export$a3295358bff77e(normal);\n        // Calculate penetration (negative means penetrating)\n        const d = $97fc7d4a5f524dad$export$94132a0e348806d4($97fc7d4a5f524dad$export$4e2d2ead65e5f7e3(this.position, point), n);\n        if (d >= this.radius) return;\n        // Move out of surface by remaining distance\n        this.position = $97fc7d4a5f524dad$export$e16d8520af44a096(this.position, $97fc7d4a5f524dad$export$dcdf75081b88279d(n, this.radius - d));\n        // Apply reflection with elasticity\n        this.velocity = $97fc7d4a5f524dad$export$dcdf75081b88279d($97fc7d4a5f524dad$export$9debe8cffacea23(this.velocity, n), this.elasticity);\n    }\n    // Getters and Setters for x position\n    get x() {\n        return this.position.x;\n    }\n    set x(value) {\n        this.position.x = value;\n    }\n    // Getters and Setters for y position\n    get y() {\n        return this.position.y;\n    }\n    set y(value) {\n        this.position.y = value;\n    }\n    get speed() {\n        return $97fc7d4a5f524dad$export$f24224f1c91d8156(this.velocity);\n    }\n    set speed(value) {\n        if (Math.abs(value) < this.minSpeed) this.velocity = $97fc7d4a5f524dad$export$7f9972325ebfd559(); // Zero the velocity if below minSpeed\n        else this.velocity = $97fc7d4a5f524dad$export$4380c87abf28fdf(this.velocity, value);\n    }\n}\n\n\n\n\nconst $fdcbb30aaeabb80a$export$10b0d1ad557ec395 = {\n    getLineIntersection: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        let line1 = {\n            start: {\n                x: 100,\n                y: 100\n            },\n            end: {\n                x: 300,\n                y: 300\n            }\n        };\n        let line2 = {\n            start: {\n                x: 100,\n                y: 300\n            },\n            end: {\n                x: 300,\n                y: 100\n            }\n        };\n        let draggedPoint = null;\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$819db45aec5fcbe5)(ctx, line1, 'blue');\n            (0, $086612735116fd75$export$819db45aec5fcbe5)(ctx, line2, 'red');\n            const p = $e0f9ecfe35f13ee3$export$717b54132acde7e2(line1, line2);\n            if (p) (0, $086612735116fd75$export$654275d54901f10e)(ctx, p, 'green');\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Intersection',\n                    p || 'None'\n                ],\n                'Drag endpoints to adjust the lines'\n            ]);\n        }\n        (0, $086612735116fd75$export$d7d5d435647ed5a0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            onStart: (pos)=>{\n                draggedPoint = (0, $ee083671c43a5e14$exports).closest(pos, [\n                    line1.start,\n                    line1.end,\n                    line2.start,\n                    line2.end\n                ]);\n            },\n            onDrag: (pos)=>{\n                if (draggedPoint) {\n                    draggedPoint.x = pos.x;\n                    draggedPoint.y = pos.y;\n                }\n            },\n            onEnd: ()=>{\n                draggedPoint = null;\n            }\n        });\n        draw();\n    },\n    getLineCircleIntersections: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        let lineSegment = {\n            start: {\n                x: 100,\n                y: 100\n            },\n            end: {\n                x: 300,\n                y: 300\n            }\n        };\n        let circle = {\n            x: 200,\n            y: 200,\n            radius: 50\n        };\n        let draggedPoint = null;\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$819db45aec5fcbe5)(ctx, lineSegment, 'blue');\n            (0, $086612735116fd75$export$8daab6f91f7ff730)(ctx, circle, 'red');\n            const intersections = $e0f9ecfe35f13ee3$export$87a9ad0c3c05abf7(lineSegment, circle);\n            intersections.forEach((p)=>(0, $086612735116fd75$export$654275d54901f10e)(ctx, p, 'green'));\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                ...intersections?.map((p)=>[\n                        'Intersection',\n                        p\n                    ]) ?? [],\n                'Drag endpoints or circle to adjust'\n            ]);\n        }\n        (0, $086612735116fd75$export$d7d5d435647ed5a0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            onStart: (pos)=>{\n                const points = [\n                    lineSegment.start,\n                    lineSegment.end,\n                    circle\n                ];\n                draggedPoint = (0, $ee083671c43a5e14$exports).closest(pos, points);\n            },\n            onDrag: (pos)=>{\n                if (draggedPoint) {\n                    draggedPoint.x = pos.x;\n                    draggedPoint.y = pos.y;\n                }\n            },\n            onEnd: ()=>{\n                draggedPoint = null;\n            }\n        });\n        draw();\n    },\n    getLineRectIntersections: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        let lineSegment = {\n            start: {\n                x: 100,\n                y: 100\n            },\n            end: {\n                x: 300,\n                y: 300\n            }\n        };\n        let rect = {\n            x: 150,\n            y: 150,\n            width: 100,\n            height: 100\n        };\n        let draggedPoint = null;\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$819db45aec5fcbe5)(ctx, lineSegment, 'blue');\n            (0, $086612735116fd75$export$92e8c004f9e4bf7d)(ctx, rect, 'red');\n            const intersections = $e0f9ecfe35f13ee3$export$1064a8e0d217f0ed(lineSegment, rect);\n            intersections.forEach((p)=>(0, $086612735116fd75$export$654275d54901f10e)(ctx, p, 'green'));\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                ...intersections?.map((p)=>[\n                        'Intersection',\n                        p\n                    ]) ?? [],\n                'Drag endpoints or rectangle to adjust'\n            ]);\n        }\n        (0, $086612735116fd75$export$d7d5d435647ed5a0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            onStart: (pos)=>{\n                const points = [\n                    lineSegment.start,\n                    lineSegment.end,\n                    rect\n                ];\n                draggedPoint = (0, $ee083671c43a5e14$exports).closest(pos, points);\n            },\n            onDrag: (pos)=>{\n                if (draggedPoint) {\n                    draggedPoint.x = pos.x;\n                    draggedPoint.y = pos.y;\n                }\n            },\n            onEnd: ()=>{\n                draggedPoint = null;\n            }\n        });\n        draw();\n    },\n    getCircleOverlap: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        let circle1 = {\n            x: 200,\n            y: 200,\n            radius: 100\n        };\n        let circle2 = {\n            x: 300,\n            y: 200,\n            radius: 50\n        };\n        let draggedCircle = null;\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$8daab6f91f7ff730)(ctx, circle1, 'blue');\n            (0, $086612735116fd75$export$8daab6f91f7ff730)(ctx, circle2, 'red');\n            const overlap = $e0f9ecfe35f13ee3$export$8e4f20627449cf66(circle1, circle2);\n            if (overlap > 0) {\n                // Use getLineCircleIntersections to find overlap center\n                const line = {\n                    start: circle1,\n                    end: circle2\n                };\n                const intersections = $e0f9ecfe35f13ee3$export$87a9ad0c3c05abf7(line, {\n                    x: circle1.x,\n                    y: circle1.y,\n                    radius: circle1.radius - overlap / 2\n                });\n                if (intersections.length > 0) {\n                    const overlapCenter = intersections[0];\n                    (0, $086612735116fd75$export$8daab6f91f7ff730)(ctx, {\n                        x: overlapCenter.x,\n                        y: overlapCenter.y,\n                        radius: overlap / 2\n                    }, 'green', true);\n                }\n            }\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Overlap Depth',\n                    overlap\n                ],\n                'Drag circles to adjust'\n            ]);\n        }\n        (0, $086612735116fd75$export$d7d5d435647ed5a0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            onStart: (pos)=>{\n                const points = [\n                    circle1,\n                    circle2\n                ];\n                draggedCircle = (0, $ee083671c43a5e14$exports).closest(pos, points);\n            },\n            onDrag: (pos)=>{\n                if (draggedCircle) {\n                    draggedCircle.x = pos.x;\n                    draggedCircle.y = pos.y;\n                }\n            },\n            onEnd: ()=>{\n                draggedCircle = null;\n            }\n        });\n        draw();\n    },\n    getRectanglesIntersection: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        let rect1 = {\n            x: 100,\n            y: 100,\n            width: 150,\n            height: 100\n        };\n        let rect2 = {\n            x: 200,\n            y: 150,\n            width: 250,\n            height: 150\n        };\n        let draggedRect = null;\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$92e8c004f9e4bf7d)(ctx, rect1, 'blue');\n            (0, $086612735116fd75$export$92e8c004f9e4bf7d)(ctx, rect2, 'red');\n            const intersectionRect = $e0f9ecfe35f13ee3$export$e90bccbb88aa9786(rect1, rect2);\n            if (intersectionRect) (0, $086612735116fd75$export$92e8c004f9e4bf7d)(ctx, intersectionRect, 'green', true);\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Intersection',\n                    intersectionRect || 'None'\n                ],\n                'Drag rectangles to adjust'\n            ]);\n        }\n        (0, $086612735116fd75$export$d7d5d435647ed5a0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            onStart: (pos)=>{\n                const points = [\n                    rect1,\n                    rect2\n                ];\n                draggedRect = (0, $ee083671c43a5e14$exports).closest(pos, points);\n            },\n            onDrag: (pos)=>{\n                if (draggedRect) {\n                    draggedRect.x = pos.x;\n                    draggedRect.y = pos.y;\n                }\n            },\n            onEnd: ()=>{\n                draggedRect = null;\n            }\n        });\n        draw();\n    }\n};\n\n\n\n\n\nconst $598db149d2af8004$export$f9d080264ca8206b = {\n    zero: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        const center = {\n            x: canvas.width / 2,\n            y: canvas.height / 2\n        };\n        const origin = {\n            x: 0,\n            y: 0\n        };\n        const v = $97fc7d4a5f524dad$export$7f9972325ebfd559();\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$b602ad7a6da8e372)(ctx, center, (ctx)=>{\n                (0, $086612735116fd75$export$712d35b7f1932be6)(ctx);\n                (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, origin, v, 'blue');\n            });\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Vector',\n                    v\n                ],\n                'Zero vector has no direction or length'\n            ]);\n        }\n        draw();\n    },\n    add: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        const center = {\n            x: canvas.width / 2,\n            y: canvas.height / 2\n        };\n        const origin = {\n            x: 0,\n            y: 0\n        };\n        let v1 = {\n            x: 100,\n            y: 0\n        };\n        let v2 = {\n            x: 0,\n            y: 100\n        };\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$b602ad7a6da8e372)(ctx, center, (ctx)=>{\n                (0, $086612735116fd75$export$712d35b7f1932be6)(ctx);\n                (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, origin, v1, 'blue');\n                (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, v1, $97fc7d4a5f524dad$export$e16d8520af44a096(v1, v2), 'red');\n                (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, origin, $97fc7d4a5f524dad$export$e16d8520af44a096(v1, v2), 'green');\n            });\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Vector 1',\n                    v1\n                ],\n                [\n                    'Vector 2',\n                    v2\n                ],\n                [\n                    'Sum',\n                    $97fc7d4a5f524dad$export$e16d8520af44a096(v1, v2)\n                ],\n                'Drag blue/red arrows to adjust vectors'\n            ]);\n        }\n        (0, $086612735116fd75$export$d7d5d435647ed5a0)({\n            canvas: canvas,\n            draw: draw,\n            center: center\n        }, {\n            onDrag: (pos)=>{\n                const end1 = $97fc7d4a5f524dad$export$e16d8520af44a096(origin, v1);\n                const end2 = $97fc7d4a5f524dad$export$e16d8520af44a096(end1, v2);\n                const closest = $ee083671c43a5e14$export$ff7f7c97cdce86e(pos, [\n                    end1,\n                    end2\n                ]);\n                if (closest === end1) v1 = $97fc7d4a5f524dad$export$4e2d2ead65e5f7e3(pos, origin);\n                else v2 = $97fc7d4a5f524dad$export$4e2d2ead65e5f7e3(pos, end1);\n            }\n        });\n        draw();\n    },\n    subtract: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        const center = {\n            x: canvas.width / 2,\n            y: canvas.height / 2\n        };\n        const origin = {\n            x: 0,\n            y: 0\n        };\n        let v1 = {\n            x: 100,\n            y: 0\n        };\n        let v2 = {\n            x: 0,\n            y: 100\n        };\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$b602ad7a6da8e372)(ctx, center, (ctx)=>{\n                (0, $086612735116fd75$export$712d35b7f1932be6)(ctx);\n                (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, origin, v1, 'blue');\n                (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, origin, v2, 'red');\n                (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, origin, $97fc7d4a5f524dad$export$4e2d2ead65e5f7e3(v1, v2), 'green');\n            });\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Vector 1',\n                    v1\n                ],\n                [\n                    'Vector 2',\n                    v2\n                ],\n                [\n                    'Difference',\n                    $97fc7d4a5f524dad$export$4e2d2ead65e5f7e3(v1, v2)\n                ],\n                'Drag blue/red arrows to adjust vectors'\n            ]);\n        }\n        (0, $086612735116fd75$export$d7d5d435647ed5a0)({\n            canvas: canvas,\n            draw: draw,\n            center: center\n        }, {\n            onDrag: (pos)=>{\n                const end1 = $97fc7d4a5f524dad$export$e16d8520af44a096(origin, v1);\n                const end2 = $97fc7d4a5f524dad$export$e16d8520af44a096(origin, v2);\n                const closest = $ee083671c43a5e14$export$ff7f7c97cdce86e(pos, [\n                    end1,\n                    end2\n                ]);\n                if (closest === end1) v1 = $97fc7d4a5f524dad$export$4e2d2ead65e5f7e3(pos, origin);\n                else v2 = $97fc7d4a5f524dad$export$4e2d2ead65e5f7e3(pos, origin);\n            }\n        });\n        draw();\n    },\n    scale: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        const center = {\n            x: canvas.width / 2,\n            y: canvas.height / 2\n        };\n        const origin = {\n            x: 0,\n            y: 0\n        };\n        let v = {\n            x: 100,\n            y: 0\n        };\n        let scale = 0.75;\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$b602ad7a6da8e372)(ctx, center, (ctx)=>{\n                (0, $086612735116fd75$export$712d35b7f1932be6)(ctx);\n                (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, origin, v, 'blue');\n                (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, origin, $97fc7d4a5f524dad$export$dcdf75081b88279d(v, scale), 'green');\n            });\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Vector',\n                    v\n                ],\n                [\n                    'Scale',\n                    scale\n                ],\n                [\n                    'Result',\n                    $97fc7d4a5f524dad$export$dcdf75081b88279d(v, scale)\n                ],\n                'Drag blue arrow to adjust vector',\n                'Use +/- to adjust scale'\n            ]);\n        }\n        (0, $086612735116fd75$export$d7d5d435647ed5a0)({\n            canvas: canvas,\n            draw: draw,\n            center: center\n        }, {\n            onDrag: (pos)=>v = pos\n        });\n        (0, $086612735116fd75$export$df61b30b684217c0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            '+': ()=>scale *= 1.1,\n            '-': ()=>scale /= 1.1\n        });\n        draw();\n    },\n    length: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        const center = {\n            x: canvas.width / 2,\n            y: canvas.height / 2\n        };\n        const origin = {\n            x: 0,\n            y: 0\n        };\n        let v = {\n            x: 100,\n            y: 0\n        };\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$b602ad7a6da8e372)(ctx, center, (ctx)=>{\n                (0, $086612735116fd75$export$712d35b7f1932be6)(ctx);\n                (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, origin, v, 'blue');\n            });\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Vector',\n                    v\n                ],\n                [\n                    'Length',\n                    $97fc7d4a5f524dad$export$f24224f1c91d8156(v)\n                ],\n                'Drag arrow to adjust vector'\n            ]);\n        }\n        (0, $086612735116fd75$export$d7d5d435647ed5a0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            onDrag: (pos)=>v = $97fc7d4a5f524dad$export$4e2d2ead65e5f7e3(pos, center)\n        });\n        draw();\n    },\n    normal: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        const center = {\n            x: canvas.width / 2,\n            y: canvas.height / 2\n        };\n        const origin = {\n            x: 0,\n            y: 0\n        };\n        let p1 = {\n            x: center.x - 100,\n            y: center.y\n        };\n        let p2 = {\n            x: center.x + 100,\n            y: center.y\n        };\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            // Draw points and line\n            (0, $086612735116fd75$export$654275d54901f10e)(ctx, p1, 'blue');\n            (0, $086612735116fd75$export$654275d54901f10e)(ctx, p2, 'red');\n            (0, $086612735116fd75$export$819db45aec5fcbe5)(ctx, {\n                start: p1,\n                end: p2\n            }, 'gray');\n            // Calculate and draw normal\n            const normalVector = $97fc7d4a5f524dad$export$411e9a7b4316b872(p1, p2);\n            const normalStart = $97fc7d4a5f524dad$export$89e29e4ab65e70a9(p1, p2, 0.5); // Midpoint\n            const normalEnd = $97fc7d4a5f524dad$export$e16d8520af44a096(normalStart, $97fc7d4a5f524dad$export$dcdf75081b88279d(normalVector, 50));\n            (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, normalStart, normalEnd, 'green');\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Point 1',\n                    p1\n                ],\n                [\n                    'Point 2',\n                    p2\n                ],\n                [\n                    'Normal',\n                    normalVector\n                ],\n                'Drag blue/red points to adjust'\n            ]);\n        }\n        (0, $086612735116fd75$export$d7d5d435647ed5a0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            onDrag: (pos)=>{\n                const closest = $ee083671c43a5e14$export$ff7f7c97cdce86e(pos, [\n                    p1,\n                    p2\n                ]);\n                if (closest === p1) p1 = pos;\n                else p2 = pos;\n            }\n        });\n        draw();\n    },\n    normalize: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        const center = {\n            x: canvas.width / 2,\n            y: canvas.height / 2\n        };\n        const origin = {\n            x: 0,\n            y: 0\n        };\n        let v = {\n            x: 100,\n            y: 0\n        };\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$b602ad7a6da8e372)(ctx, center, (ctx)=>{\n                (0, $086612735116fd75$export$712d35b7f1932be6)(ctx);\n                (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, origin, v, 'blue');\n                (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, origin, $97fc7d4a5f524dad$export$a3295358bff77e(v), 'green');\n            });\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Vector',\n                    v\n                ],\n                [\n                    'Length',\n                    $97fc7d4a5f524dad$export$f24224f1c91d8156(v)\n                ],\n                [\n                    'Normalized',\n                    $97fc7d4a5f524dad$export$a3295358bff77e(v)\n                ],\n                'Drag arrow to adjust vector'\n            ]);\n        }\n        (0, $086612735116fd75$export$d7d5d435647ed5a0)({\n            canvas: canvas,\n            draw: draw,\n            center: center\n        }, {\n            onDrag: (pos)=>v = pos\n        });\n        draw();\n    },\n    clamp: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        const center = {\n            x: canvas.width / 2,\n            y: canvas.height / 2\n        };\n        const origin = {\n            x: 0,\n            y: 0\n        };\n        let v = {\n            x: 100,\n            y: 0\n        };\n        let minLength = 50;\n        let maxLength = 100;\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$b602ad7a6da8e372)(ctx, center, (ctx)=>{\n                (0, $086612735116fd75$export$712d35b7f1932be6)(ctx);\n                (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, origin, v, 'blue');\n                (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, origin, $97fc7d4a5f524dad$export$7d15b64cf5a3a4c4(v, minLength, maxLength), 'green');\n                (0, $086612735116fd75$export$8daab6f91f7ff730)(ctx, {\n                    x: 0,\n                    y: 0,\n                    radius: maxLength\n                }, 'gray'); // Max length boundary\n                (0, $086612735116fd75$export$8daab6f91f7ff730)(ctx, {\n                    x: 0,\n                    y: 0,\n                    radius: minLength\n                }, 'lightgray'); // Min length boundary\n            });\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Vector',\n                    v\n                ],\n                [\n                    'Length',\n                    $97fc7d4a5f524dad$export$f24224f1c91d8156(v)\n                ],\n                [\n                    'Min Length',\n                    minLength\n                ],\n                [\n                    'Max Length',\n                    maxLength\n                ],\n                'Drag arrow to adjust vector',\n                'Use +/- to adjust max length',\n                'Use [/] to adjust min length'\n            ]);\n        }\n        (0, $086612735116fd75$export$d7d5d435647ed5a0)({\n            canvas: canvas,\n            draw: draw,\n            center: center\n        }, {\n            onDrag: (pos)=>v = pos\n        });\n        (0, $086612735116fd75$export$df61b30b684217c0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            '+': ()=>maxLength += 10,\n            '-': ()=>maxLength = Math.max(minLength + 10, maxLength - 10),\n            '[': ()=>minLength = Math.max(0, minLength - 10),\n            ']': ()=>minLength = Math.min(maxLength - 10, minLength + 10)\n        });\n        draw();\n    },\n    interpolate: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        const center = {\n            x: canvas.width / 2,\n            y: canvas.height / 2\n        };\n        const origin = {\n            x: 0,\n            y: 0\n        };\n        let v1 = {\n            x: -100,\n            y: 0\n        };\n        let v2 = {\n            x: 100,\n            y: 0\n        };\n        let t = 0.5;\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$b602ad7a6da8e372)(ctx, center, (ctx)=>{\n                (0, $086612735116fd75$export$712d35b7f1932be6)(ctx);\n                const result = $97fc7d4a5f524dad$export$89e29e4ab65e70a9(v1, v2, t);\n                (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, origin, v1, 'blue');\n                (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, origin, v2, 'red');\n                (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, origin, result, 'green');\n            });\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Vector 1',\n                    v1\n                ],\n                [\n                    'Vector 2',\n                    v2\n                ],\n                [\n                    't',\n                    t\n                ],\n                [\n                    'Result',\n                    $97fc7d4a5f524dad$export$89e29e4ab65e70a9(v1, v2, t)\n                ],\n                'Drag blue/red arrows to adjust vectors',\n                'Use +/- to adjust t'\n            ]);\n        }\n        (0, $086612735116fd75$export$d7d5d435647ed5a0)({\n            canvas: canvas,\n            draw: draw,\n            center: center\n        }, {\n            onDrag: (pos)=>{\n                const closest = $ee083671c43a5e14$export$ff7f7c97cdce86e(pos, [\n                    v1,\n                    v2\n                ]);\n                closest.x = pos.x;\n                closest.y = pos.y;\n            }\n        });\n        (0, $086612735116fd75$export$df61b30b684217c0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            '+': ()=>t = Math.min(1, t + 0.1),\n            '-': ()=>t = Math.max(0, t - 0.1)\n        });\n        draw();\n    },\n    interpolateInverse: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        const center = {\n            x: canvas.width / 2,\n            y: canvas.height / 2\n        };\n        const origin = {\n            x: 0,\n            y: 0\n        };\n        let v1 = {\n            x: -100,\n            y: 0\n        };\n        let v2 = {\n            x: 100,\n            y: 0\n        };\n        let p = {\n            x: 0,\n            y: 0\n        };\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$b602ad7a6da8e372)(ctx, center, (ctx)=>{\n                (0, $086612735116fd75$export$712d35b7f1932be6)(ctx);\n                const t = $97fc7d4a5f524dad$export$dcb617f3d34308fe(v1, v2, p);\n                const projected = $97fc7d4a5f524dad$export$89e29e4ab65e70a9(v1, v2, t);\n                (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, origin, v1, 'blue');\n                (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, origin, v2, 'red');\n                (0, $086612735116fd75$export$654275d54901f10e)(ctx, p, 'green');\n                (0, $086612735116fd75$export$654275d54901f10e)(ctx, projected, 'black');\n                (0, $086612735116fd75$export$819db45aec5fcbe5)(ctx, {\n                    start: p,\n                    end: projected\n                }, 'gray');\n            });\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Start',\n                    v1\n                ],\n                [\n                    'End',\n                    v2\n                ],\n                [\n                    'Point',\n                    p\n                ],\n                [\n                    't',\n                    $97fc7d4a5f524dad$export$dcb617f3d34308fe(v1, v2, p)\n                ],\n                'Drag blue/red arrows for vectors',\n                'Move mouse to test positions'\n            ]);\n        }\n        (0, $086612735116fd75$export$d947e5f4f4c48d48)({\n            canvas: canvas,\n            draw: draw,\n            center: center\n        }, (pos)=>{\n            p = pos;\n        });\n        (0, $086612735116fd75$export$d7d5d435647ed5a0)({\n            canvas: canvas,\n            draw: draw,\n            center: center\n        }, {\n            onDrag: (pos)=>{\n                const closest = $ee083671c43a5e14$export$ff7f7c97cdce86e(pos, [\n                    v1,\n                    v2\n                ]);\n                closest.x = pos.x;\n                closest.y = pos.y;\n            }\n        });\n        draw();\n    },\n    reflect: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        const center = {\n            x: canvas.width / 2,\n            y: canvas.height / 2\n        };\n        const origin = {\n            x: 0,\n            y: 0\n        };\n        let velocity = {\n            x: 100,\n            y: 100\n        };\n        let normal = $97fc7d4a5f524dad$export$b1d53cea8aef9694(0, 1);\n        const rotateAmount = Math.PI / 12;\n        let restitution = 1;\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$b602ad7a6da8e372)(ctx, center, (ctx)=>{\n                (0, $086612735116fd75$export$712d35b7f1932be6)(ctx);\n                const normalVec = $97fc7d4a5f524dad$export$dcdf75081b88279d($97fc7d4a5f524dad$export$a3295358bff77e(normal), 100);\n                (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, origin, normalVec, 'blue');\n                (0, $086612735116fd75$export$654275d54901f10e)(ctx, velocity, 'red');\n                (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, velocity, origin, 'red');\n                const reflected = $97fc7d4a5f524dad$export$dcdf75081b88279d($97fc7d4a5f524dad$export$9debe8cffacea23(velocity, $97fc7d4a5f524dad$export$a3295358bff77e(normal)), restitution);\n                (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, origin, reflected, 'green');\n            });\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Normal',\n                    normal\n                ],\n                [\n                    'Velocity',\n                    velocity\n                ],\n                [\n                    'Restitution',\n                    restitution\n                ],\n                [\n                    'Reflected',\n                    $97fc7d4a5f524dad$export$dcdf75081b88279d($97fc7d4a5f524dad$export$9debe8cffacea23(velocity, $97fc7d4a5f524dad$export$a3295358bff77e(normal)), restitution)\n                ],\n                'Drag red arrow to adjust incoming velocity',\n                'Drag blue arrow to adjust surface normal',\n                'Use +/- to adjust restitution'\n            ]);\n        }\n        (0, $086612735116fd75$export$d7d5d435647ed5a0)({\n            canvas: canvas,\n            draw: draw,\n            center: center\n        }, {\n            onDrag: (pos)=>{\n                const closest = $ee083671c43a5e14$export$ff7f7c97cdce86e(pos, [\n                    velocity,\n                    normal\n                ]);\n                if (closest === velocity) velocity = pos;\n                else normal = $97fc7d4a5f524dad$export$4e2d2ead65e5f7e3(pos, origin);\n            }\n        });\n        (0, $086612735116fd75$export$df61b30b684217c0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            '+': ()=>restitution = Math.min(2, restitution + 0.1),\n            '-': ()=>restitution = Math.max(0, restitution - 0.1)\n        });\n        draw();\n    },\n    fromAngleRadians: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        const center = {\n            x: canvas.width / 2,\n            y: canvas.height / 2\n        };\n        const origin = {\n            x: 0,\n            y: 0\n        };\n        let angle = 0;\n        let length = 100;\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$b602ad7a6da8e372)(ctx, center, (ctx)=>{\n                (0, $086612735116fd75$export$712d35b7f1932be6)(ctx);\n                const v = $97fc7d4a5f524dad$export$b1d53cea8aef9694(angle, length);\n                (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, origin, v, 'blue');\n            });\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Angle (rad)',\n                    angle\n                ],\n                [\n                    'Length',\n                    length\n                ],\n                [\n                    'Vector',\n                    $97fc7d4a5f524dad$export$b1d53cea8aef9694(angle, length)\n                ],\n                'Use +/- to adjust angle',\n                'Use [/] to adjust length'\n            ]);\n        }\n        (0, $086612735116fd75$export$df61b30b684217c0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            '+': ()=>angle += Math.PI / 12,\n            '-': ()=>angle -= Math.PI / 12,\n            '[': ()=>length = Math.max(10, length - 10),\n            ']': ()=>length += 10\n        });\n        draw();\n    },\n    fromAngleDegrees: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        const center = {\n            x: canvas.width / 2,\n            y: canvas.height / 2\n        };\n        const origin = {\n            x: 0,\n            y: 0\n        };\n        let angle = 0;\n        let length = 100;\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$b602ad7a6da8e372)(ctx, center, (ctx)=>{\n                (0, $086612735116fd75$export$712d35b7f1932be6)(ctx);\n                const v = $97fc7d4a5f524dad$export$e92f669ea83c5a35(angle, length);\n                (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, origin, v, 'blue');\n            });\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Angle (deg)',\n                    angle\n                ],\n                [\n                    'Length',\n                    length\n                ],\n                [\n                    'Vector',\n                    $97fc7d4a5f524dad$export$e92f669ea83c5a35(angle, length)\n                ],\n                'Use +/- to adjust angle',\n                'Use [/] to adjust length'\n            ]);\n        }\n        (0, $086612735116fd75$export$df61b30b684217c0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            '+': ()=>angle += 15,\n            '-': ()=>angle -= 15,\n            '[': ()=>length = Math.max(10, length - 10),\n            ']': ()=>length += 10\n        });\n        draw();\n    },\n    rotateByRadians: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        const center = {\n            x: canvas.width / 2,\n            y: canvas.height / 2\n        };\n        const origin = {\n            x: 0,\n            y: 0\n        };\n        let v = {\n            x: 100,\n            y: 0\n        };\n        let angle = Math.PI / 4;\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$b602ad7a6da8e372)(ctx, center, (ctx)=>{\n                (0, $086612735116fd75$export$712d35b7f1932be6)(ctx);\n                (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, origin, v, 'blue');\n                (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, origin, $97fc7d4a5f524dad$export$c78ecdc202171e36(v, angle), 'green');\n            });\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Vector',\n                    v\n                ],\n                [\n                    'Angle (rad)',\n                    angle\n                ],\n                [\n                    'Rotated',\n                    $97fc7d4a5f524dad$export$c78ecdc202171e36(v, angle)\n                ],\n                'Drag blue arrow to adjust vector',\n                'Use +/- to adjust angle'\n            ]);\n        }\n        (0, $086612735116fd75$export$d7d5d435647ed5a0)({\n            canvas: canvas,\n            draw: draw,\n            center: center\n        }, {\n            onDrag: (pos)=>v = pos\n        });\n        (0, $086612735116fd75$export$df61b30b684217c0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            '+': ()=>angle += Math.PI / 12,\n            '-': ()=>angle -= Math.PI / 12\n        });\n        draw();\n    },\n    rotateByDegrees: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        const center = {\n            x: canvas.width / 2,\n            y: canvas.height / 2\n        };\n        const origin = {\n            x: 0,\n            y: 0\n        };\n        let v = {\n            x: 100,\n            y: 0\n        };\n        let angle = 15;\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$b602ad7a6da8e372)(ctx, center, (ctx)=>{\n                (0, $086612735116fd75$export$712d35b7f1932be6)(ctx);\n                (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, origin, v, 'blue');\n                (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, origin, $97fc7d4a5f524dad$export$62f2d546c3c709dc(v, angle), 'green');\n            });\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Vector',\n                    v\n                ],\n                [\n                    'Angle (deg)',\n                    angle\n                ],\n                [\n                    'Rotated',\n                    $97fc7d4a5f524dad$export$62f2d546c3c709dc(v, angle)\n                ],\n                'Drag blue arrow to adjust vector',\n                'Use +/- to adjust angle'\n            ]);\n        }\n        (0, $086612735116fd75$export$d7d5d435647ed5a0)({\n            canvas: canvas,\n            draw: draw,\n            center: center\n        }, {\n            onDrag: (pos)=>v = pos\n        });\n        (0, $086612735116fd75$export$df61b30b684217c0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            '+': ()=>angle += 15,\n            '-': ()=>angle -= 15\n        });\n        draw();\n    },\n    dot: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        const center = {\n            x: canvas.width / 2,\n            y: canvas.height / 2\n        };\n        const origin = {\n            x: 0,\n            y: 0\n        };\n        let v1 = {\n            x: 100,\n            y: 0\n        };\n        let v2 = {\n            x: 0,\n            y: 100\n        };\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$b602ad7a6da8e372)(ctx, center, (ctx)=>{\n                (0, $086612735116fd75$export$712d35b7f1932be6)(ctx);\n                (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, origin, v1, 'blue');\n                (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, origin, v2, 'red');\n                const dotProduct = $97fc7d4a5f524dad$export$94132a0e348806d4(v1, v2);\n                const projectionScale = dotProduct / ($97fc7d4a5f524dad$export$f24224f1c91d8156(v1) * $97fc7d4a5f524dad$export$f24224f1c91d8156(v2));\n                const projection = $97fc7d4a5f524dad$export$dcdf75081b88279d(v2, projectionScale);\n                (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, origin, projection, 'green');\n            });\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Vector 1',\n                    v1\n                ],\n                [\n                    'Vector 2',\n                    v2\n                ],\n                [\n                    'Dot Product',\n                    $97fc7d4a5f524dad$export$94132a0e348806d4(v1, v2)\n                ],\n                [\n                    'Projection of v1 onto v2',\n                    $97fc7d4a5f524dad$export$dcdf75081b88279d(v2, $97fc7d4a5f524dad$export$94132a0e348806d4(v1, v2) / $97fc7d4a5f524dad$export$f24224f1c91d8156(v2) ** 2)\n                ],\n                'Drag blue/red arrows to adjust vectors'\n            ]);\n        }\n        (0, $086612735116fd75$export$d7d5d435647ed5a0)({\n            canvas: canvas,\n            draw: draw,\n            center: center\n        }, {\n            onDrag: (pos)=>{\n                const closest = $ee083671c43a5e14$export$ff7f7c97cdce86e(pos, [\n                    v1,\n                    v2\n                ]);\n                closest.x = pos.x;\n                closest.y = pos.y;\n            }\n        });\n        draw();\n    },\n    resize: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        const center = {\n            x: canvas.width / 2,\n            y: canvas.height / 2\n        };\n        const origin = {\n            x: 0,\n            y: 0\n        };\n        let v = {\n            x: 100,\n            y: 50\n        };\n        let newLength = 150;\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$b602ad7a6da8e372)(ctx, center, (ctx)=>{\n                (0, $086612735116fd75$export$712d35b7f1932be6)(ctx);\n                (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, origin, v, 'blue');\n                (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, origin, $97fc7d4a5f524dad$export$4380c87abf28fdf(v, newLength), 'green');\n            });\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Vector',\n                    v\n                ],\n                [\n                    'Original Length',\n                    $97fc7d4a5f524dad$export$f24224f1c91d8156(v)\n                ],\n                [\n                    'New Length',\n                    newLength\n                ],\n                [\n                    'Resized Vector',\n                    $97fc7d4a5f524dad$export$4380c87abf28fdf(v, newLength)\n                ],\n                'Drag arrow to adjust vector',\n                'Use +/- to adjust new length'\n            ]);\n        }\n        (0, $086612735116fd75$export$d7d5d435647ed5a0)({\n            canvas: canvas,\n            draw: draw,\n            center: center\n        }, {\n            onDrag: (pos)=>v = pos\n        });\n        (0, $086612735116fd75$export$df61b30b684217c0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            '+': ()=>newLength += 10,\n            '-': ()=>newLength = Math.max(10, newLength - 10)\n        });\n        draw();\n    }\n};\n\n\n\n\n\n\n\n\nconst $51a78989f62341bf$export$3ee404efaa54ac8a = {\n    applyForce: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        let position = {\n            x: canvas.width / 2,\n            y: canvas.height / 2\n        };\n        let velocity = {\n            x: 0,\n            y: 0\n        };\n        let force = {\n            x: 0.05,\n            y: -0.03\n        };\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$8daab6f91f7ff730)(ctx, {\n                ...position,\n                radius: 10\n            }, 'blue');\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Position',\n                    position\n                ],\n                [\n                    'Velocity',\n                    velocity\n                ],\n                [\n                    'Force',\n                    force\n                ],\n                'Click to reset position',\n                'Use +/- to change force magnitude'\n            ]);\n        }\n        (0, $086612735116fd75$export$e3607ec2d7a891c4)(()=>{\n            $5dda501f4a9774dc$export$da81038170e85b8c(velocity, force, 1);\n            position.x += velocity.x;\n            position.y += velocity.y;\n        }, draw);\n        (0, $086612735116fd75$export$64ef1bee2b9504c1)({\n            canvas: canvas,\n            draw: draw\n        }, (pos)=>{\n            position = {\n                ...pos\n            };\n            velocity = {\n                x: 0,\n                y: 0\n            };\n        });\n        (0, $086612735116fd75$export$df61b30b684217c0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            '+': ()=>{\n                force.x *= 1.1;\n                force.y *= 1.1;\n            },\n            '-': ()=>{\n                force.x *= 0.9;\n                force.y *= 0.9;\n            }\n        });\n    },\n    applyDamping: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        let position = {\n            x: canvas.width / 2,\n            y: canvas.height / 2\n        };\n        let velocity = {\n            x: 5,\n            y: -3\n        };\n        let damping = 0.05;\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$8daab6f91f7ff730)(ctx, {\n                ...position,\n                radius: 10\n            }, 'blue');\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Position',\n                    position\n                ],\n                [\n                    'Velocity',\n                    velocity\n                ],\n                [\n                    'Damping',\n                    damping\n                ],\n                'Click to reset position',\n                'Use +/- to change damping amount'\n            ]);\n        }\n        (0, $086612735116fd75$export$e3607ec2d7a891c4)(()=>{\n            $5dda501f4a9774dc$export$da1fe76f9b6a25f(velocity, damping);\n            position.x += velocity.x;\n            position.y += velocity.y;\n        }, draw);\n        (0, $086612735116fd75$export$64ef1bee2b9504c1)({\n            canvas: canvas,\n            draw: draw\n        }, (pos)=>{\n            position = {\n                ...pos\n            };\n            velocity = {\n                x: 5,\n                y: -3\n            };\n        });\n        (0, $086612735116fd75$export$df61b30b684217c0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            '+': ()=>{\n                damping = Math.min(damping + 0.01, 1); // Cap damping at 1\n            },\n            '-': ()=>{\n                damping = Math.max(damping - 0.01, 0); // Ensure damping is non-negative\n            }\n        });\n    },\n    applyTorque: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        let angle = 0;\n        let angularVelocity = 0;\n        let torque = 0.1;\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            const center = {\n                x: canvas.width / 2,\n                y: canvas.height / 2\n            };\n            const end = (0, $97fc7d4a5f524dad$export$b1d53cea8aef9694)(angle, 50);\n            (0, $086612735116fd75$export$b602ad7a6da8e372)(ctx, center, (ctx)=>{\n                (0, $086612735116fd75$export$819db45aec5fcbe5)(ctx, {\n                    start: {\n                        x: 0,\n                        y: 0\n                    },\n                    end: end\n                }, 'blue', 2);\n            });\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Angle',\n                    angle\n                ],\n                [\n                    'Angular Velocity',\n                    angularVelocity\n                ],\n                [\n                    'Torque',\n                    torque\n                ],\n                'Click to reset angle',\n                'Use +/- to change torque amount'\n            ]);\n        }\n        (0, $086612735116fd75$export$e3607ec2d7a891c4)(()=>{\n            angularVelocity = $5dda501f4a9774dc$export$a7d88964434daaec(angularVelocity, torque, 0.01);\n            angle += angularVelocity;\n        }, draw);\n        (0, $086612735116fd75$export$64ef1bee2b9504c1)({\n            canvas: canvas,\n            draw: draw\n        }, ()=>{\n            angle = 0;\n            angularVelocity = 0;\n        });\n        (0, $086612735116fd75$export$df61b30b684217c0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            '+': ()=>{\n                torque = Math.min(torque + 0.01, 1); // Cap torque at 1\n            },\n            '-': ()=>{\n                torque = Math.max(torque - 0.01, 0); // Ensure torque is non-negative\n            }\n        });\n    },\n    applyAngleForce: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        let position = {\n            x: canvas.width / 2,\n            y: canvas.height / 2\n        };\n        let velocity = {\n            x: 0,\n            y: 0\n        };\n        let forceMagnitude = 0.1;\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            (0, $086612735116fd75$export$8daab6f91f7ff730)(ctx, {\n                ...position,\n                radius: 10\n            }, 'blue');\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Position',\n                    position\n                ],\n                [\n                    'Velocity',\n                    velocity\n                ],\n                [\n                    'Force Magnitude',\n                    forceMagnitude\n                ],\n                'Press to apply force away from mouse',\n                'Use +/- to change force magnitude'\n            ]);\n        }\n        let isMouseDown = false;\n        let mousePos = {\n            x: 0,\n            y: 0\n        };\n        (0, $086612735116fd75$export$e3607ec2d7a891c4)(()=>{\n            if (isMouseDown) {\n                const angle = (0, $7d6e798d0a09cf0e$export$96f15a967e7c135d)(mousePos, position);\n                $5dda501f4a9774dc$export$3ffb1581bff1af41(velocity, angle, forceMagnitude, 1);\n            }\n            position.x += velocity.x;\n            position.y += velocity.y;\n            // Reset position if it leaves the canvas bounds\n            if (position.x < 0 || position.x > canvas.width || position.y < 0 || position.y > canvas.height) {\n                position = {\n                    x: canvas.width / 2,\n                    y: canvas.height / 2\n                };\n                velocity = {\n                    x: 0,\n                    y: 0\n                };\n            }\n        }, draw);\n        (0, $086612735116fd75$export$d7d5d435647ed5a0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            onStart: (pos)=>{\n                isMouseDown = true;\n                mousePos = pos;\n            },\n            onDrag: (pos)=>mousePos = pos,\n            onEnd: (pos)=>{\n                mousePos = pos;\n                isMouseDown = false;\n            }\n        });\n        (0, $086612735116fd75$export$df61b30b684217c0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            '+': ()=>forceMagnitude += .01,\n            '-': ()=>forceMagnitude -= .01\n        });\n    },\n    collide: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        let obj1 = {\n            position: {\n                x: 200,\n                y: 200\n            },\n            velocity: {\n                x: 0,\n                y: 0\n            },\n            mass: 1,\n            radius: 20\n        };\n        let obj2 = {\n            position: {\n                x: 400,\n                y: 200\n            },\n            velocity: {\n                x: 0,\n                y: 0\n            },\n            mass: 1,\n            radius: 20\n        };\n        let isSimulationRunning = false;\n        let draggedPosition = null;\n        const init1 = {\n            start: {\n                x: 200,\n                y: 300\n            },\n            end: {\n                x: 250,\n                y: 320\n            }\n        };\n        const init2 = {\n            start: {\n                x: 400,\n                y: 300\n            },\n            end: {\n                x: 330,\n                y: 310\n            }\n        };\n        start();\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            // Update object radii based on mass\n            obj1.radius = obj1.mass * 20;\n            obj2.radius = obj2.mass * 20;\n            // Draw initial circles and velocity arrows\n            (0, $086612735116fd75$export$8daab6f91f7ff730)(ctx, {\n                x: init1.start.x,\n                y: init1.start.y,\n                radius: obj1.radius\n            }, 'gray', false);\n            (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, init1.start, init1.end, 'gray');\n            (0, $086612735116fd75$export$8daab6f91f7ff730)(ctx, {\n                x: init2.start.x,\n                y: init2.start.y,\n                radius: obj2.radius\n            }, 'gray', false);\n            (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, init2.start, init2.end, 'gray');\n            if (isSimulationRunning) {\n                // Draw solid circles during simulation\n                (0, $086612735116fd75$export$8daab6f91f7ff730)(ctx, {\n                    ...obj1.position,\n                    radius: obj1.radius\n                }, 'blue', true);\n                (0, $086612735116fd75$export$8daab6f91f7ff730)(ctx, {\n                    ...obj2.position,\n                    radius: obj2.radius\n                }, 'red', true);\n            }\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                'Drag initial positions and velocities',\n                [\n                    \"Object 1\",\n                    Object.entries(obj1)\n                ],\n                [\n                    \"Object 2\",\n                    Object.entries(obj2)\n                ],\n                [\n                    'Restitution',\n                    restitution\n                ],\n                'Press +/- to adjust mass of first object',\n                'Press [/] to adjust mass of second object',\n                'Press 1/2 to adjust restitution',\n                'Press R to replay simulation'\n            ]);\n        }\n        function start() {\n            obj1 = {\n                ...obj1,\n                position: {\n                    ...init1.start\n                },\n                velocity: (0, $97fc7d4a5f524dad$export$dcdf75081b88279d)((0, $97fc7d4a5f524dad$export$4e2d2ead65e5f7e3)(init1.end, init1.start), .1)\n            };\n            obj2 = {\n                ...obj2,\n                position: {\n                    ...init2.start\n                },\n                velocity: (0, $97fc7d4a5f524dad$export$dcdf75081b88279d)((0, $97fc7d4a5f524dad$export$4e2d2ead65e5f7e3)(init2.end, init2.start), .1)\n            };\n            isSimulationRunning = true;\n        }\n        (0, $086612735116fd75$export$d7d5d435647ed5a0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            onStart: (pos)=>{\n                draggedPosition = (0, $ee083671c43a5e14$export$ff7f7c97cdce86e)(pos, [\n                    init1.start,\n                    init1.end,\n                    init2.start,\n                    init2.end\n                ]);\n            },\n            onDrag: (pos)=>{\n                if (draggedPosition) {\n                    draggedPosition.x = pos.x;\n                    draggedPosition.y = pos.y;\n                }\n            },\n            onEnd: ()=>{\n                draggedPosition = null;\n                start();\n            }\n        });\n        (0, $086612735116fd75$export$df61b30b684217c0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            'r': start,\n            '+': ()=>obj1.mass += 0.1,\n            '-': ()=>obj1.mass -= 0.1,\n            '[': ()=>obj2.mass -= 0.1,\n            ']': ()=>obj2.mass += 0.1,\n            '1': ()=>restitution = Math.max(restitution - 0.1, 0),\n            '2': ()=>restitution = Math.min(restitution + 0.1, 1)\n        });\n        let restitution = 0.9; // Default restitution\n        (0, $086612735116fd75$export$e3607ec2d7a891c4)(()=>{\n            if (isSimulationRunning) {\n                obj1.position.x += obj1.velocity.x;\n                obj1.position.y += obj1.velocity.y;\n                obj2.position.x += obj2.velocity.x;\n                obj2.position.y += obj2.velocity.y;\n                if ((0, $ee083671c43a5e14$export$9f17032d917177de)(obj1.position, obj2.position) < obj1.radius + obj2.radius) $5dda501f4a9774dc$export$98e6d07575f46913(obj1, obj2, restitution);\n            }\n        }, draw);\n    },\n    separate: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        const objects = Array.from({\n            length: 5\n        }, ()=>createRandomObject());\n        function createRandomObject(position = {\n            x: canvas.width / 2 + Math.random() * 50 - 25,\n            y: canvas.height / 2 + Math.random() * 50 - 25\n        }) {\n            const radius = Math.random() * 20 + 10; // Random radius between 10 and 30\n            return {\n                position: position,\n                velocity: {\n                    x: 0,\n                    y: 0\n                },\n                mass: radius / 10,\n                radius: radius\n            };\n        }\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            objects.forEach((obj)=>{\n                (0, $086612735116fd75$export$8daab6f91f7ff730)(ctx, {\n                    ...obj.position,\n                    radius: obj.radius\n                }, 'blue');\n            });\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                'Click to add a new random size object'\n            ]);\n        }\n        (0, $086612735116fd75$export$e3607ec2d7a891c4)(()=>{\n            for(let i = 0; i < objects.length; i++)for(let j = i + 1; j < objects.length; j++)$5dda501f4a9774dc$export$709f6946f4e97408(objects[i], objects[j]);\n        }, draw);\n        (0, $086612735116fd75$export$64ef1bee2b9504c1)({\n            canvas: canvas,\n            draw: draw\n        }, (pos)=>{\n            const noise = ()=>Math.random() * 2 - 1; // Random noise between -1 and 1\n            const noisyPos = {\n                x: pos.x + noise(),\n                y: pos.y + noise()\n            };\n            objects.push(createRandomObject(noisyPos));\n        });\n    },\n    repel: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        const objects = Array.from({\n            length: 5\n        }, ()=>createRandomObject());\n        let repelStrength = 0.001;\n        let friction = 0.99;\n        function createRandomObject(position = {\n            x: canvas.width / 2 + Math.random() * 50 - 25,\n            y: canvas.height / 2 + Math.random() * 50 - 25\n        }) {\n            const radius = Math.random() * 20 + 10; // Random radius between 10 and 30\n            return {\n                position: position,\n                velocity: {\n                    x: 0,\n                    y: 0\n                },\n                mass: radius / 10,\n                radius: radius\n            };\n        }\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            objects.forEach((obj)=>{\n                (0, $086612735116fd75$export$8daab6f91f7ff730)(ctx, {\n                    ...obj.position,\n                    radius: obj.radius\n                }, 'red');\n            });\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                'Click to add a new random size object',\n                [\n                    `Repel Strength`,\n                    repelStrength,\n                    {\n                        precision: 4\n                    }\n                ],\n                [\n                    `Friction`,\n                    friction\n                ],\n                'Use +/- to change repel strength',\n                'Use [/] to change friction'\n            ]);\n        }\n        (0, $086612735116fd75$export$e3607ec2d7a891c4)(()=>{\n            for(let i = 0; i < objects.length; i++)for(let j = i + 1; j < objects.length; j++)$5dda501f4a9774dc$export$168bb2ff78cb66b4(objects[i], objects[j], repelStrength);\n            // Update positions based on velocities\n            objects.forEach((obj)=>{\n                obj.position.x += obj.velocity.x;\n                obj.position.y += obj.velocity.y;\n                // Apply drag to slow down the velocity\n                obj.velocity.x *= friction;\n                obj.velocity.y *= friction;\n            });\n        }, draw);\n        (0, $086612735116fd75$export$df61b30b684217c0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            '+': ()=>repelStrength += .001,\n            '-': ()=>repelStrength -= .001,\n            '[': ()=>friction -= .01,\n            ']': ()=>friction += .01\n        });\n        (0, $086612735116fd75$export$64ef1bee2b9504c1)({\n            canvas: canvas,\n            draw: draw\n        }, (pos)=>{\n            const noise = ()=>Math.random() * 2 - 1; // Random noise between -1 and 1\n            const noisyPos = {\n                x: pos.x + noise(),\n                y: pos.y + noise()\n            };\n            objects.push(createRandomObject(noisyPos));\n        });\n    },\n    fluid: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        const particles = Array.from({\n            length: 1500\n        }, ()=>({\n                position: {\n                    x: canvas.width / 2 + Math.random() * 150 - 25,\n                    y: canvas.height / 2 + Math.random() * 150 - 25\n                },\n                velocity: {\n                    x: 0,\n                    y: 0\n                },\n                density: 0,\n                pressure: 0,\n                mass: 1\n            }));\n        const settings = {\n            smoothingRadius: 15,\n            stiffness: 5,\n            restDensity: 1,\n            viscosity: 0.5\n        };\n        const gravity = {\n            x: 0,\n            y: 0.1\n        }; // Gravity force\n        let lastMousePos = null;\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            particles.forEach((p)=>(0, $086612735116fd75$export$8daab6f91f7ff730)(ctx, {\n                    ...p.position,\n                    radius: 5\n                }, 'blue')); // Reduced radius to 2\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                'Fluid simulation',\n                [\n                    'Particles',\n                    particles.length,\n                    {\n                        precision: 0\n                    }\n                ],\n                [\n                    'Fluid',\n                    Object.entries(settings)\n                ],\n                'Click and drag to apply forces'\n            ]);\n        }\n        (0, $086612735116fd75$export$e3607ec2d7a891c4)(()=>{\n            const forces = $5dda501f4a9774dc$export$86e87f677abfca4b(particles, settings);\n            particles.forEach((p, i)=>{\n                // Apply fluid forces\n                p.velocity.x += forces[i].x;\n                p.velocity.y += forces[i].y;\n                // Apply gravity\n                p.velocity.x += gravity.x;\n                p.velocity.y += gravity.y;\n                // Update position\n                p.position.x += p.velocity.x;\n                p.position.y += p.velocity.y;\n                // Keep particles within canvas bounds\n                if (p.position.x < 0 || p.position.x > canvas.width) {\n                    p.velocity.x *= -0.5; // Reverse and dampen velocity\n                    p.position.x = Math.max(0, Math.min(canvas.width, p.position.x));\n                }\n                if (p.position.y < 0 || p.position.y > canvas.height) {\n                    p.velocity.y *= -0.5; // Reverse and dampen velocity\n                    p.position.y = Math.max(0, Math.min(canvas.height, p.position.y));\n                }\n            });\n        }, draw);\n        (0, $086612735116fd75$export$d7d5d435647ed5a0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            onStart: (pos)=>{\n                lastMousePos = pos;\n            },\n            onDrag: (pos)=>{\n                if (lastMousePos) {\n                    const dragForce = 2.5; // Strength of the drag force\n                    const dragVector = (0, $97fc7d4a5f524dad$export$4e2d2ead65e5f7e3)(pos, lastMousePos);\n                    particles.forEach((p)=>{\n                        const dist = (0, $ee083671c43a5e14$export$9f17032d917177de)(p.position, pos);\n                        if (dist < 50) {\n                            const force = (0, $97fc7d4a5f524dad$export$dcdf75081b88279d)(dragVector, dragForce / (dist + 1)); // Inverse distance weighting\n                            p.velocity.x += force.x;\n                            p.velocity.y += force.y;\n                        }\n                    });\n                }\n                lastMousePos = pos;\n            },\n            onEnd: ()=>{\n                lastMousePos = null;\n            }\n        });\n    },\n    boids: (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        const boids = Array.from({\n            length: 30\n        }, ()=>({\n                position: {\n                    x: Math.random() * canvas.width,\n                    y: Math.random() * canvas.height\n                },\n                velocity: {\n                    x: Math.random() * 2 - 1,\n                    y: Math.random() * 2 - 1\n                }\n            }));\n        const settings = {\n            separationRadius: 25,\n            alignmentRadius: 50,\n            cohesionRadius: 50,\n            separationWeight: 1.5,\n            alignmentWeight: 2,\n            cohesionWeight: 0.1,\n            maxSpeed: 0.12\n        };\n        const wallAvoidanceRadius = 50; // Distance to start avoiding walls\n        const wallAvoidanceWeight = 2; // Strength of wall avoidance\n        const mouseAvoidanceRadius = 100; // Distance to start avoiding the mouse\n        const mouseAvoidanceWeight = 5; // Strength of mouse avoidance\n        let mousePos = null;\n        const wanderingAngles = Array.from({\n            length: boids.length\n        }, ()=>Math.random() * Math.PI * 2);\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            boids.forEach((b)=>{\n                const angle = Math.atan2(b.velocity.y, b.velocity.x);\n                const bodyLength = 20;\n                const bodyWidth = 10;\n                // Draw boid as a longer arrow\n                ctx.save();\n                ctx.translate(b.position.x, b.position.y);\n                ctx.rotate(angle);\n                ctx.beginPath();\n                ctx.moveTo(bodyLength / 2, 0); // Arrow tip\n                ctx.lineTo(-bodyLength / 2, -bodyWidth / 2); // Left wing\n                ctx.lineTo(-bodyLength / 2, bodyWidth / 2); // Right wing\n                ctx.closePath();\n                ctx.fillStyle = 'blue';\n                ctx.fill();\n                ctx.strokeStyle = 'black';\n                ctx.stroke();\n                ctx.restore();\n            });\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                'Flocking simulation',\n                ...Object.entries(settings).map(([key, value])=>[\n                        key,\n                        value\n                    ])\n            ]);\n        }\n        (0, $086612735116fd75$export$d947e5f4f4c48d48)({\n            canvas: canvas,\n            draw: draw\n        }, (pos)=>{\n            mousePos = pos;\n        });\n        (0, $086612735116fd75$export$e3607ec2d7a891c4)(()=>{\n            const forces = $5dda501f4a9774dc$export$fbe21c35773c13ce(boids, settings);\n            boids.forEach((b, i)=>{\n                // Apply forces to velocity\n                b.velocity.x += forces[i].x;\n                b.velocity.y += forces[i].y;\n                // Gradual wandering behavior for isolated boids\n                if (forces[i].x === 0 && forces[i].y === 0) {\n                    wanderingAngles[i] += (Math.random() - 0.5) * 0.1; // Gradually change angle\n                    const wanderForce = (0, $97fc7d4a5f524dad$export$b1d53cea8aef9694)(wanderingAngles[i], settings.maxSpeed);\n                    b.velocity = (0, $97fc7d4a5f524dad$export$e16d8520af44a096)(b.velocity, wanderForce);\n                }\n                // Wall avoidance\n                const wallForces = {\n                    x: 0,\n                    y: 0\n                };\n                if (b.position.x < wallAvoidanceRadius) wallForces.x += wallAvoidanceWeight / Math.max(b.position.x, 1);\n                if (b.position.x > canvas.width - wallAvoidanceRadius) wallForces.x -= wallAvoidanceWeight / Math.max(canvas.width - b.position.x, 1);\n                if (b.position.y < wallAvoidanceRadius) wallForces.y += wallAvoidanceWeight / Math.max(b.position.y, 1);\n                if (b.position.y > canvas.height - wallAvoidanceRadius) wallForces.y -= wallAvoidanceWeight / Math.max(canvas.height - b.position.y, 1);\n                b.velocity = (0, $97fc7d4a5f524dad$export$e16d8520af44a096)(b.velocity, wallForces);\n                // Mouse avoidance\n                if (mousePos) {\n                    const mouseDist = (0, $ee083671c43a5e14$export$9f17032d917177de)(b.position, mousePos);\n                    if (mouseDist < mouseAvoidanceRadius) {\n                        const awayFromMouse = (0, $97fc7d4a5f524dad$export$a3295358bff77e)((0, $97fc7d4a5f524dad$export$4e2d2ead65e5f7e3)(b.position, mousePos));\n                        const mouseForce = (0, $97fc7d4a5f524dad$export$dcdf75081b88279d)(awayFromMouse, mouseAvoidanceWeight / Math.max(mouseDist, 1));\n                        b.velocity = (0, $97fc7d4a5f524dad$export$e16d8520af44a096)(b.velocity, mouseForce);\n                    }\n                }\n                // Apply damping\n                b.velocity = (0, $97fc7d4a5f524dad$export$dcdf75081b88279d)(b.velocity, 0.95);\n                // Update position\n                b.position = (0, $97fc7d4a5f524dad$export$e16d8520af44a096)(b.position, b.velocity);\n                // Prevent boids from leaving the canvas\n                b.position.x = Math.max(0, Math.min(canvas.width, b.position.x));\n                b.position.y = Math.max(0, Math.min(canvas.height, b.position.y));\n            });\n        }, draw);\n    }\n};\n\n\n\n\n\n\n\nconst $441597d29ead1611$export$695b29557618ac72 = {\n    \"Balls\": (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        class Ball extends (0, $e80cf0db060d44c4$export$324e885649fee72) {\n            constructor(x, y, radius){\n                super({\n                    x: x,\n                    y: y,\n                    mass: Math.PI * radius * radius,\n                    gravity: (0, $e80cf0db060d44c4$export$324e885649fee72).DOWNWARD_GRAVITY\n                }), this.grabbed = false, this.grabOffset = {\n                    x: 0,\n                    y: 0\n                };\n                this.radius = radius;\n            }\n        }\n        const balls = [];\n        let draggedBall = null;\n        const mousePos = {\n            x: 0,\n            y: 0\n        };\n        const dragStart = {\n            x: 0,\n            y: 0\n        };\n        const lastPos = {\n            x: 0,\n            y: 0\n        };\n        let lastTime = 0;\n        const overlapModes = [\n            'separate',\n            'repel',\n            'none'\n        ];\n        let currentOverlapModeIndex = 0;\n        const addBall = ()=>{\n            const radius = 10 + Math.random() * 20;\n            const ball = new Ball(Math.random() * canvas.width, Math.random() * canvas.height * 0.5, radius);\n            ball.velocity = {\n                x: Math.random() * 200 - 100,\n                y: Math.random() * 200 - 100\n            };\n            ball.collisionOverlapResolution = overlapModes[currentOverlapModeIndex];\n            balls.push(ball);\n        };\n        const removeBall = ()=>{\n            if (balls.length > 0) balls.pop();\n        };\n        const resetBalls = ()=>{\n            balls.length = 0;\n            Array.from({\n                length: 10\n            }).forEach(addBall);\n        };\n        const toggleOverlapMode = ()=>{\n            currentOverlapModeIndex = (currentOverlapModeIndex + 1) % overlapModes.length;\n            balls.forEach((ball)=>{\n                ball.collisionOverlapResolution = overlapModes[currentOverlapModeIndex];\n            });\n        };\n        resetBalls();\n        const update = (deltaTime)=>{\n            // Update physics\n            balls.forEach((ball)=>{\n                if (ball.grabbed) {\n                    ball.velocity.x = 0;\n                    ball.velocity.y = 0;\n                    ball.position.x = mousePos.x - ball.grabOffset.x;\n                    ball.position.y = mousePos.y - ball.grabOffset.y;\n                    ball.mass = Number.MAX_SAFE_INTEGER; // Give maximum mass while dragging\n                } else {\n                    ball.mass = Math.PI * ball.radius * ball.radius; // Reset mass\n                    ball.update(deltaTime);\n                    // Wall collisions\n                    ball.collideWithSurface({\n                        x: 0,\n                        y: 0\n                    }, {\n                        x: 1,\n                        y: 0\n                    }); // Left wall\n                    ball.collideWithSurface({\n                        x: canvas.width,\n                        y: 0\n                    }, {\n                        x: -1,\n                        y: 0\n                    }); // Right wall\n                    ball.collideWithSurface({\n                        x: 0,\n                        y: 0\n                    }, {\n                        x: 0,\n                        y: 1\n                    }); // Top wall\n                    ball.collideWithSurface({\n                        x: 0,\n                        y: canvas.height\n                    }, {\n                        x: 0,\n                        y: -1\n                    }); // Bottom wall\n                }\n            });\n            // Ball-to-ball collisions\n            balls.forEach((b1, i)=>{\n                balls.slice(i + 1).forEach((b2)=>{\n                    b1.collideWithBody(b2);\n                });\n            });\n        };\n        const draw = ()=>{\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            balls.forEach((ball)=>{\n                (0, $086612735116fd75$export$8daab6f91f7ff730)(ctx, ball, ball.grabbed ? 'red' : 'blue', true);\n            });\n            // Show results\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Number of Balls',\n                    balls.length,\n                    {\n                        precision: 0\n                    }\n                ],\n                [\n                    'Overlap Mode',\n                    overlapModes[currentOverlapModeIndex]\n                ],\n                'Drag balls to move them',\n                'Press +/- to add/remove a ball',\n                'Press R to reset',\n                'Press O to toggle overlap mode'\n            ]);\n        };\n        (0, $086612735116fd75$export$d7d5d435647ed5a0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            onStart: (pos)=>{\n                mousePos.x = pos.x;\n                mousePos.y = pos.y;\n                dragStart.x = pos.x;\n                dragStart.y = pos.y;\n                lastPos.x = pos.x;\n                lastPos.y = pos.y;\n                lastTime = performance.now();\n                balls.forEach((ball)=>{\n                    const dist = $ee083671c43a5e14$export$9f17032d917177de(ball.position, mousePos);\n                    if (dist <= ball.radius) {\n                        ball.grabbed = true;\n                        draggedBall = ball;\n                        ball.grabOffset = $97fc7d4a5f524dad$export$4e2d2ead65e5f7e3(mousePos, ball.position);\n                    }\n                });\n            },\n            onDrag: (pos)=>{\n                lastPos.x = mousePos.x;\n                lastPos.y = mousePos.y;\n                mousePos.x = pos.x;\n                mousePos.y = pos.y;\n                lastTime = performance.now();\n                if (draggedBall) draggedBall.position = $97fc7d4a5f524dad$export$4e2d2ead65e5f7e3(mousePos, draggedBall.grabOffset);\n            },\n            onEnd: ()=>{\n                if (draggedBall) {\n                    const currentTime = performance.now();\n                    const dt = (currentTime - lastTime) / 1000;\n                    if (dt > 0) {\n                        // Calculate velocity based on movement over time\n                        const dragVel = $97fc7d4a5f524dad$export$dcdf75081b88279d($97fc7d4a5f524dad$export$4e2d2ead65e5f7e3(mousePos, lastPos), 1 / dt // Divide by time to get velocity\n                        );\n                        draggedBall.velocity = dragVel;\n                    }\n                    draggedBall.grabbed = false;\n                    draggedBall = null;\n                }\n            }\n        });\n        (0, $086612735116fd75$export$df61b30b684217c0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            '+': addBall,\n            '-': removeBall,\n            'r': resetBalls,\n            'o': toggleOverlapMode\n        });\n        return (0, $086612735116fd75$export$1e61084297db69ac)(update, draw);\n    },\n    \"Billiards\": (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        class BilliardBall extends (0, $e80cf0db060d44c4$export$324e885649fee72) {\n            constructor(x, y, color){\n                super({\n                    x: x,\n                    y: y,\n                    mass: 1\n                }), this.grabbed = false, this.grabOffset = {\n                    x: 0,\n                    y: 0\n                };\n                this.radius = 15;\n                this.color = color;\n                this.elasticity = 0.95;\n                this.friction = 0.01;\n            }\n        }\n        const balls = [];\n        const pockets = [\n            {\n                x: 20,\n                y: 20\n            },\n            {\n                x: canvas.width / 2,\n                y: 20\n            },\n            {\n                x: canvas.width - 20,\n                y: 20\n            },\n            {\n                x: 20,\n                y: canvas.height - 20\n            },\n            {\n                x: canvas.width / 2,\n                y: canvas.height - 20\n            },\n            {\n                x: canvas.width - 20,\n                y: canvas.height - 20\n            } // Bottom-right\n        ];\n        const pocketRadius = 25;\n        const colors = [\n            'white',\n            'gold',\n            'royalblue',\n            'crimson',\n            'purple',\n            'darkorange',\n            'forestgreen',\n            'saddlebrown',\n            'black',\n            'khaki',\n            'steelblue',\n            'indianred',\n            'darkmagenta',\n            'coral',\n            'seagreen',\n            'sienna' // 15\n        ];\n        let draggedBall = null;\n        const mousePos = {\n            x: 0,\n            y: 0\n        };\n        const dragStart = {\n            x: 0,\n            y: 0\n        };\n        const resetBalls = ()=>{\n            balls.length = 0;\n            balls.push(new BilliardBall(200, canvas.height / 2, colors[0])); // Cue ball\n            let row = 0;\n            let idx = 1;\n            for(let y = -2; y <= 2; y++){\n                for(let x = 0; x <= row; x++)if (idx < colors.length) balls.push(new BilliardBall(// Centered along the midline x-axis, facing left\n                550 + row * 15, canvas.height / 2 + x * 30 - row * 15, colors[idx++]));\n                row++;\n            }\n        };\n        resetBalls();\n        const update = (deltaTime)=>{\n            balls.forEach((ball)=>{\n                ball.update(deltaTime);\n                // Cushion collisions\n                const wallPadding = 10;\n                ball.collideWithSurface({\n                    x: wallPadding,\n                    y: 0\n                }, {\n                    x: 1,\n                    y: 0\n                }); // Left wall\n                ball.collideWithSurface({\n                    x: canvas.width - wallPadding,\n                    y: 0\n                }, {\n                    x: -1,\n                    y: 0\n                }); // Right wall\n                ball.collideWithSurface({\n                    x: 0,\n                    y: wallPadding\n                }, {\n                    x: 0,\n                    y: 1\n                }); // Top wall\n                ball.collideWithSurface({\n                    x: 0,\n                    y: canvas.height - wallPadding\n                }, {\n                    x: 0,\n                    y: -1\n                }); // Bottom wall\n            });\n            // Ball collisions\n            balls.forEach((b1, i)=>{\n                balls.slice(i + 1).forEach((b2)=>{\n                    b1.collideWithBody(b2);\n                });\n            });\n            // Check for balls in pockets\n            for(let i = balls.length - 1; i >= 0; i--){\n                const ball = balls[i];\n                const inPocket = pockets.some((pocket)=>$ee083671c43a5e14$export$9f17032d917177de(ball.position, pocket) < pocketRadius);\n                if (inPocket) {\n                    if (ball.color === 'white') {\n                        // Reset cue ball to starting position\n                        ball.position = {\n                            x: 200,\n                            y: canvas.height / 2\n                        };\n                        ball.velocity = $97fc7d4a5f524dad$export$b1d53cea8aef9694(Math.random() * Math.PI * 2, 50);\n                    } else balls.splice(i, 1); // Remove ball\n                }\n            }\n        };\n        const draw = ()=>{\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            // Draw wooden frame\n            const wallPadding = 10; // Match wall padding\n            (0, $086612735116fd75$export$92e8c004f9e4bf7d)(ctx, {\n                x: 0,\n                y: 0,\n                width: canvas.width,\n                height: canvas.height\n            }, 'brown', true); // Outer frame\n            (0, $086612735116fd75$export$92e8c004f9e4bf7d)(ctx, {\n                x: wallPadding,\n                y: wallPadding,\n                width: canvas.width - 2 * wallPadding,\n                height: canvas.height - 2 * wallPadding\n            }, 'darkgreen', true); // Inner table\n            // Draw pockets\n            pockets.forEach((pocket)=>{\n                (0, $086612735116fd75$export$8daab6f91f7ff730)(ctx, {\n                    x: pocket.x,\n                    y: pocket.y,\n                    radius: pocketRadius\n                }, 'black', true);\n            });\n            // Draw balls\n            balls.forEach((ball)=>{\n                (0, $086612735116fd75$export$8daab6f91f7ff730)(ctx, ball, ball.color, true);\n            });\n            // Draw aiming line\n            if (draggedBall) {\n                const pullBack = $97fc7d4a5f524dad$export$4e2d2ead65e5f7e3(dragStart, mousePos);\n                const aimLine = $97fc7d4a5f524dad$export$dcdf75081b88279d(pullBack, 2);\n                // Draw power gauge\n                (0, $086612735116fd75$export$819db45aec5fcbe5)(ctx, {\n                    start: draggedBall.position,\n                    end: $97fc7d4a5f524dad$export$e16d8520af44a096(draggedBall.position, aimLine)\n                }, 'rgba(255, 255, 255, .25)', 2);\n                // Draw direction indicator\n                (0, $086612735116fd75$export$8daab6f91f7ff730)(ctx, {\n                    x: draggedBall.position.x + aimLine.x,\n                    y: draggedBall.position.y + aimLine.y,\n                    radius: 2\n                }, 'white', true);\n            }\n            // Show results\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Number of Balls',\n                    balls.length,\n                    {\n                        precision: 0\n                    }\n                ],\n                'Drag the cue ball to aim and shoot',\n                'Press R to reset'\n            ], {\n                color: 'white'\n            });\n        };\n        (0, $086612735116fd75$export$d7d5d435647ed5a0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            onStart: (pos)=>{\n                mousePos.x = pos.x;\n                mousePos.y = pos.y;\n                dragStart.x = pos.x;\n                dragStart.y = pos.y;\n                const cueBall = balls[0];\n                if ($ee083671c43a5e14$export$9f17032d917177de(cueBall.position, mousePos) <= cueBall.radius) draggedBall = cueBall;\n            },\n            onDrag: (pos)=>{\n                mousePos.x = pos.x;\n                mousePos.y = pos.y;\n            },\n            onEnd: ()=>{\n                if (draggedBall) {\n                    const pullBack = $97fc7d4a5f524dad$export$4e2d2ead65e5f7e3(dragStart, mousePos);\n                    draggedBall.velocity = $97fc7d4a5f524dad$export$e16d8520af44a096(draggedBall.velocity, $97fc7d4a5f524dad$export$dcdf75081b88279d(pullBack, 10));\n                    draggedBall = null;\n                }\n            }\n        });\n        (0, $086612735116fd75$export$df61b30b684217c0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            'r': resetBalls\n        });\n        return (0, $086612735116fd75$export$1e61084297db69ac)(update, draw);\n    },\n    \"Spaceship\": (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        class Spaceship extends (0, $e80cf0db060d44c4$export$324e885649fee72) {\n            constructor(){\n                super({\n                    x: canvas.width / 2,\n                    y: canvas.height / 2,\n                    mass: 1\n                }), this.thrusting = false;\n                this.radius = 20;\n            }\n            thrust() {\n                const force = $97fc7d4a5f524dad$export$b1d53cea8aef9694(this.angle, 500);\n                this.applyForce(force);\n            }\n            update(deltaTime) {\n                // Apply minimal drag\n                this.velocity = $97fc7d4a5f524dad$export$dcdf75081b88279d(this.velocity, 0.999);\n                super.update(deltaTime);\n                // Wrap around edges\n                this.position.x = (this.position.x + canvas.width) % canvas.width;\n                this.position.y = (this.position.y + canvas.height) % canvas.height;\n            }\n        }\n        const ship = new Spaceship();\n        // Generate stars\n        const stars = Array.from({\n            length: 100\n        }, ()=>({\n                x: Math.random() * canvas.width,\n                y: Math.random() * canvas.height,\n                color: `rgba(${200 + Math.random() * 55}, ${200 + Math.random() * 55}, ${200 + Math.random() * 55}, 1)`,\n                size: Math.random() * 2 + 1\n            }));\n        let particles = [];\n        (0, $086612735116fd75$export$ed97f33186d4b816).listen();\n        const update = (deltaTime)=>{\n            if ((0, $086612735116fd75$export$ed97f33186d4b816).isDown('ArrowLeft')) ship.angle -= 4 * deltaTime;\n            if ((0, $086612735116fd75$export$ed97f33186d4b816).isDown('ArrowRight')) ship.angle += 4 * deltaTime;\n            if ((0, $086612735116fd75$export$ed97f33186d4b816).isDown('ArrowUp')) {\n                ship.thrust();\n                ship.thrusting = true;\n                // Emit particles\n                for(let i = 0; i < 3; i++){\n                    const thrustVector = $97fc7d4a5f524dad$export$b1d53cea8aef9694(ship.angle, -15);\n                    particles.push({\n                        x: ship.position.x + thrustVector.x + (Math.random() - 0.5) * 10,\n                        y: ship.position.y + thrustVector.y + (Math.random() - 0.5) * 10,\n                        radius: Math.random() * 3 + 1,\n                        life: 1,\n                        velocity: $97fc7d4a5f524dad$export$e16d8520af44a096($97fc7d4a5f524dad$export$b1d53cea8aef9694(ship.angle, -100), $97fc7d4a5f524dad$export$b1d53cea8aef9694(Math.random() * Math.PI * 2, Math.random() * 50))\n                    });\n                }\n            } else ship.thrusting = false;\n            ship.update(deltaTime);\n            // Update particles\n            particles.forEach((p)=>{\n                p.life -= deltaTime;\n                p.x += p.velocity.x * deltaTime;\n                p.y += p.velocity.y * deltaTime;\n                // Apply friction to slow down particles\n                p.velocity = $97fc7d4a5f524dad$export$dcdf75081b88279d(p.velocity, 0.95);\n                p.radius *= 0.95; // Shrink over time\n            });\n            particles = particles.filter((p)=>p.life > 0); // Remove dead particles\n        };\n        const draw = ()=>{\n            // Draw black background\n            (0, $086612735116fd75$export$92e8c004f9e4bf7d)(ctx, {\n                x: 0,\n                y: 0,\n                width: canvas.width,\n                height: canvas.height\n            }, 'black', true);\n            // Draw stars\n            stars.forEach((star)=>{\n                (0, $086612735116fd75$export$654275d54901f10e)(ctx, {\n                    x: star.x,\n                    y: star.y\n                }, star.color, star.size);\n            });\n            // Draw particles\n            particles.forEach((p)=>{\n                (0, $086612735116fd75$export$8daab6f91f7ff730)(ctx, {\n                    x: p.x,\n                    y: p.y,\n                    radius: p.radius\n                }, 'orange', true);\n            });\n            // Draw spaceship\n            ctx.save();\n            ctx.translate(ship.position.x, ship.position.y);\n            ctx.rotate(ship.angle);\n            // Draw ship body\n            ctx.beginPath();\n            ctx.moveTo(20, 0);\n            ctx.lineTo(-10, 10);\n            ctx.lineTo(-10, -10);\n            ctx.closePath();\n            ctx.strokeStyle = 'white';\n            ctx.stroke();\n            // Draw thrust\n            if (ship.thrusting) {\n                ctx.beginPath();\n                ctx.moveTo(-10, 0);\n                const spikes = 5;\n                for(let i = 0; i <= spikes; i++){\n                    const angle = i / spikes * Math.PI / 3 - Math.PI / 6; // Symmetrical angle range\n                    const length = 10 + Math.random() * 10; // Random spiky length\n                    ctx.lineTo(-10 - length * Math.cos(angle), length * Math.sin(angle));\n                }\n                ctx.closePath();\n                ctx.fillStyle = 'orange';\n                ctx.fill();\n            }\n            ctx.restore();\n        };\n        return (0, $086612735116fd75$export$1e61084297db69ac)(update, draw);\n    },\n    \"Artillery\": (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        class Cannon {\n            constructor(x, y){\n                this.angle = -Math.PI / 4;\n                this.power = 0;\n                this.charging = false;\n                this.chargeStartTime = 0;\n                this.position = {\n                    x: x,\n                    y: y\n                };\n            }\n            startCharging() {\n                this.charging = true;\n                this.chargeStartTime = performance.now();\n            }\n            stopCharging() {\n                this.charging = false;\n                this.power = this.calculatePower();\n            }\n            calculatePower() {\n                const minPower = 100;\n                const maxPower = 1000;\n                const powerPerSecond = 500;\n                const chargeDuration = (performance.now() - this.chargeStartTime) / 1000; // in seconds\n                return Math.min(maxPower, minPower + chargeDuration * powerPerSecond);\n            }\n        }\n        class Cannonball extends (0, $e80cf0db060d44c4$export$324e885649fee72) {\n            constructor(position, velocity){\n                super({\n                    position: position,\n                    velocity: velocity,\n                    mass: 5,\n                    gravity: {\n                        x: 0,\n                        y: 500\n                    }\n                });\n                this.radius = 5;\n            }\n        }\n        class Target extends (0, $e80cf0db060d44c4$export$324e885649fee72) {\n            constructor(x){\n                super({\n                    x: x,\n                    y: canvas.height - 50,\n                    mass: 10 // Give the target some mass to react to collisions\n                }), this.hit = false;\n                this.radius = 20;\n            }\n            applyGravity() {\n                this.gravity = {\n                    x: 0,\n                    y: 500\n                }; // Apply downward gravity\n            }\n            reset() {\n                this.hit = false;\n                this.gravity = {\n                    x: 0,\n                    y: 0\n                }; // Remove gravity\n                this.velocity = {\n                    x: 0,\n                    y: 0\n                }; // Reset velocity\n                this.position.x = Math.random() * (canvas.width - 200) + 100; // Random x position\n                this.position.y = Math.random() * (canvas.height - 200); // Random y position\n            }\n        }\n        const cannon = new Cannon(50, canvas.height - 50);\n        const target = new Target(canvas.width - 100);\n        let cannonball = null;\n        let score = 0;\n        const ground = canvas.height - 30;\n        (0, $086612735116fd75$export$d7d5d435647ed5a0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            onStart: ()=>{\n                cannon.startCharging();\n            },\n            onEnd: ()=>{\n                cannon.stopCharging();\n                const velocity = $97fc7d4a5f524dad$export$b1d53cea8aef9694(cannon.angle, cannon.power);\n                cannonball = new Cannonball({\n                    ...cannon.position\n                }, velocity);\n            }\n        });\n        (0, $086612735116fd75$export$d947e5f4f4c48d48)({\n            canvas: canvas\n        }, (pos)=>{\n            cannon.angle = (0, $7d6e798d0a09cf0e$exports).radiansBetweenPoints(cannon.position, pos);\n        });\n        const update = (deltaTime)=>{\n            if (cannonball) {\n                cannonball.update(deltaTime);\n                // Check for collision with the target\n                if (!target.hit && cannonball.collideWithBody(target)) {\n                    target.hit = true;\n                    target.applyGravity(); // Apply gravity to the target\n                    score++;\n                    cannonball = null;\n                } else if (cannonball.position.y > ground) cannonball = null;\n            }\n            // Update target physics\n            target.update(deltaTime);\n            // Reset target if it falls below the ground\n            if (target.position.y > ground) target.reset();\n        };\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            // Draw ground\n            (0, $086612735116fd75$export$92e8c004f9e4bf7d)(ctx, {\n                x: 0,\n                y: ground,\n                width: canvas.width,\n                height: canvas.height - ground\n            }, '#764', true);\n            // Draw cannon base\n            (0, $086612735116fd75$export$8daab6f91f7ff730)(ctx, {\n                x: cannon.position.x,\n                y: cannon.position.y,\n                radius: 15\n            }, '#333', true);\n            // Draw cannon\n            const cannonEnd = $97fc7d4a5f524dad$export$e16d8520af44a096(cannon.position, $97fc7d4a5f524dad$export$b1d53cea8aef9694(cannon.angle, 30) // Cannon length\n            );\n            (0, $086612735116fd75$export$819db45aec5fcbe5)(ctx, {\n                start: cannon.position,\n                end: cannonEnd\n            }, '#333', 10);\n            // Visualize charged power with a red arrow\n            if (cannon.charging) {\n                const power = cannon.calculatePower();\n                const powerArrowEnd = $97fc7d4a5f524dad$export$e16d8520af44a096(cannon.position, $97fc7d4a5f524dad$export$b1d53cea8aef9694(cannon.angle, power / 10) // Scale power for visualization\n                );\n                (0, $086612735116fd75$export$f6d70d79295e1392)(ctx, cannon.position, powerArrowEnd, 'red');\n            }\n            // Draw target\n            (0, $086612735116fd75$export$8daab6f91f7ff730)(ctx, target, target.hit ? 'red' : 'blue', true);\n            // Draw cannonball\n            if (cannonball) (0, $086612735116fd75$export$8daab6f91f7ff730)(ctx, cannonball, '#333', true);\n            // Draw score and power\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Score',\n                    score,\n                    {\n                        precision: 0\n                    }\n                ],\n                [\n                    'Angle',\n                    (0, $7d6e798d0a09cf0e$exports).radiansToDegrees(cannon.angle)\n                ],\n                [\n                    'Power',\n                    cannon.charging ? cannon.calculatePower() : cannon.power\n                ],\n                \"Click and hold to charge cannon\"\n            ]);\n        }\n        return (0, $086612735116fd75$export$1e61084297db69ac)(update, draw);\n    },\n    \"Tank\": (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        class Tank extends (0, $e80cf0db060d44c4$export$324e885649fee72) {\n            constructor(){\n                super({\n                    x: canvas.width / 2,\n                    y: canvas.height / 2,\n                    mass: 5\n                }), this.angle = 0, this.turretAngle = 0, this.throttle = 0, this.turretRotationSpeed = 5;\n                this.radius = 20;\n                this.mass = 100;\n            }\n            update(deltaTime) {\n                // Update turret angle based on mouse position\n                const mouseTargetAngle = (0, $7d6e798d0a09cf0e$exports).radiansBetweenPoints(this.position, mousePos);\n                this.turretAngle = (0, $7d6e798d0a09cf0e$exports).rotateAngleTowardsRadians(this.turretAngle, mouseTargetAngle, this.turretRotationSpeed * deltaTime);\n                // Tank movement -- always move in the direction of the tank's angle\n                this.velocity = $97fc7d4a5f524dad$export$b1d53cea8aef9694(tank.angle, tank.throttle);\n                // Apply drag\n                this.throttle *= 0.99;\n                super.update(deltaTime);\n            }\n        }\n        class Bullet extends (0, $e80cf0db060d44c4$export$324e885649fee72) {\n            constructor(position, angle){\n                super({\n                    position: position,\n                    velocity: $97fc7d4a5f524dad$export$b1d53cea8aef9694(angle, 2500)\n                }), this.timeAlive = 0;\n                this.radius = 3;\n                this.mass = 25;\n            }\n        }\n        class Obstacle extends (0, $e80cf0db060d44c4$export$324e885649fee72) {\n            constructor(x, y, radius){\n                super({\n                    x: x,\n                    y: y,\n                    mass: radius * 10\n                });\n                this.radius = radius;\n                this.elasticity = 0.8;\n                this.friction = 0.2;\n            }\n        }\n        const tank = new Tank();\n        const bullets = [];\n        const obstacles = Array.from({\n            length: 15\n        }, ()=>new Obstacle(Math.random() * canvas.width, Math.random() * canvas.height, 10 + Math.random() * 20));\n        const mousePos = {\n            x: 0,\n            y: 0\n        };\n        // Use move() to update turret angle based on mouse position\n        (0, $086612735116fd75$export$d947e5f4f4c48d48)({\n            canvas: canvas,\n            draw: draw\n        }, (pos)=>{\n            mousePos.x = pos.x;\n            mousePos.y = pos.y;\n        });\n        // Use click() to fire bullets\n        (0, $086612735116fd75$export$64ef1bee2b9504c1)({\n            canvas: canvas,\n            draw: draw\n        }, ()=>{\n            const bulletPos = $97fc7d4a5f524dad$export$e16d8520af44a096(tank.position, $97fc7d4a5f524dad$export$b1d53cea8aef9694(tank.turretAngle, tank.radius));\n            bullets.push(new Bullet(bulletPos, tank.turretAngle));\n        });\n        (0, $086612735116fd75$export$ed97f33186d4b816).listen();\n        const update = (deltaTime)=>{\n            // Tank movement controls using keys.isDown()\n            const turnSpeed = 2;\n            const throttleSpeed = 400;\n            if ((0, $086612735116fd75$export$ed97f33186d4b816).isDown('ArrowLeft')) tank.angle -= turnSpeed * deltaTime;\n            if ((0, $086612735116fd75$export$ed97f33186d4b816).isDown('ArrowRight')) tank.angle += turnSpeed * deltaTime;\n            if ((0, $086612735116fd75$export$ed97f33186d4b816).isDown('ArrowUp')) tank.throttle = Math.min(200, tank.throttle + throttleSpeed * deltaTime);\n            if ((0, $086612735116fd75$export$ed97f33186d4b816).isDown('ArrowDown')) tank.throttle = Math.max(-100, tank.throttle - throttleSpeed * deltaTime);\n            // Tank movement\n            tank.update(deltaTime);\n            // Keep tank in bounds\n            tank.position.x = Math.max(tank.radius, Math.min(canvas.width - tank.radius, tank.position.x));\n            tank.position.y = Math.max(tank.radius, Math.min(canvas.height - tank.radius, tank.position.y));\n            // Update bullets\n            for(let i = bullets.length - 1; i >= 0; i--){\n                const bullet = bullets[i];\n                bullet.update(deltaTime);\n                bullet.timeAlive += deltaTime;\n                // Remove bullets that are too old or out of bounds\n                if (bullet.timeAlive > 2 || bullet.position.x < 0 || bullet.position.x > canvas.width || bullet.position.y < 0 || bullet.position.y > canvas.height) bullets.splice(i, 1);\n            }\n            // Update obstacles\n            obstacles.forEach((obstacle)=>obstacle.update(deltaTime));\n            // Handle collisions between tank and obstacles\n            obstacles.forEach((obstacle)=>tank.collideWithBody(obstacle));\n            // Handle collisions between bullets and obstacles\n            bullets.forEach((bullet)=>{\n                obstacles.forEach((obstacle)=>bullet.collideWithBody(obstacle));\n            });\n            // Handle collisions between obstacles\n            obstacles.forEach((o1, i)=>{\n                obstacles.slice(i + 1).forEach((o2)=>o1.collideWithBody(o2));\n            });\n        };\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            // Draw tank body\n            (0, $086612735116fd75$export$b602ad7a6da8e372)(ctx, tank.position, (ctx)=>{\n                ctx.rotate(tank.angle);\n                (0, $086612735116fd75$export$92e8c004f9e4bf7d)(ctx, {\n                    x: -25,\n                    y: -15,\n                    width: 50,\n                    height: 30\n                }, '#3a3', true);\n            });\n            // Draw tank turret\n            (0, $086612735116fd75$export$b602ad7a6da8e372)(ctx, tank.position, (ctx)=>{\n                ctx.rotate(tank.turretAngle);\n                const turretEnd = $97fc7d4a5f524dad$export$b1d53cea8aef9694(0, 30);\n                (0, $086612735116fd75$export$819db45aec5fcbe5)(ctx, {\n                    start: {\n                        x: 0,\n                        y: 0\n                    },\n                    end: turretEnd\n                }, '#373', 10);\n            });\n            // Draw bullets\n            bullets.forEach((bullet)=>{\n                (0, $086612735116fd75$export$8daab6f91f7ff730)(ctx, bullet, \"orange\", true);\n            });\n            // Draw obstacles\n            obstacles.forEach((obstacle)=>{\n                (0, $086612735116fd75$export$8daab6f91f7ff730)(ctx, obstacle, \"gray\", true);\n            });\n            // Render speed in the output\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Speed',\n                    tank.speed\n                ],\n                \"Arrow Keys: Rotate and Throttle\",\n                \"Click to Fire\"\n            ]);\n        }\n        return (0, $086612735116fd75$export$1e61084297db69ac)(update, draw);\n    },\n    \"Car\": (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        class Car extends (0, $e80cf0db060d44c4$export$324e885649fee72) {\n            constructor(){\n                super({\n                    x: canvas.width / 2,\n                    y: canvas.height / 2,\n                    mass: 2\n                }), this.steering = 0, this.throttle = 0;\n                this.radius = 20;\n                this.mass = 20;\n            }\n            update(deltaTime) {\n                // Apply steering\n                this.angle += this.steering * this.throttle * deltaTime * 0.003;\n                // Update velocity based on car's angle\n                this.velocity = $97fc7d4a5f524dad$export$b1d53cea8aef9694(this.angle, this.throttle);\n                // Apply drag\n                this.throttle *= 0.99;\n                super.update(deltaTime);\n            }\n        }\n        class Obstacle extends (0, $e80cf0db060d44c4$export$324e885649fee72) {\n            constructor(x, y, radius){\n                super({\n                    x: x,\n                    y: y,\n                    mass: radius ** 2\n                });\n                this.radius = radius;\n                this.elasticity = 0.8;\n                this.friction = 0.002;\n            }\n        }\n        const car = new Car();\n        const obstacles = Array.from({\n            length: 50\n        }, ()=>new Obstacle(Math.random() * canvas.width, Math.random() * canvas.height, 5 + Math.random() ** 5 * 25));\n        (0, $086612735116fd75$export$ed97f33186d4b816).listen();\n        const update = (deltaTime)=>{\n            // Car controls using keys.isDown()\n            const steeringSpeed = 1;\n            if ((0, $086612735116fd75$export$ed97f33186d4b816).isDown('ArrowLeft')) car.steering = -steeringSpeed;\n            else if ((0, $086612735116fd75$export$ed97f33186d4b816).isDown('ArrowRight')) car.steering = steeringSpeed;\n            else car.steering = 0;\n            const throttleSpeed = 400;\n            if ((0, $086612735116fd75$export$ed97f33186d4b816).isDown('ArrowUp')) car.throttle = Math.min(300, car.throttle + throttleSpeed * deltaTime);\n            if ((0, $086612735116fd75$export$ed97f33186d4b816).isDown('ArrowDown')) car.throttle = Math.max(-100, car.throttle - throttleSpeed * deltaTime);\n            car.update(deltaTime);\n            // Keep car in bounds\n            car.position.x = (car.position.x + canvas.width) % canvas.width;\n            car.position.y = (car.position.y + canvas.height) % canvas.height;\n            // Update obstacles\n            obstacles.forEach((obstacle)=>{\n                obstacle.update(deltaTime);\n                // Loop obstacles around the canvas\n                obstacle.position.x = (obstacle.position.x + canvas.width) % canvas.width;\n                obstacle.position.y = (obstacle.position.y + canvas.height) % canvas.height;\n            });\n            // Handle collisions between car and obstacles\n            obstacles.forEach((obstacle)=>car.collideWithBody(obstacle));\n            // Handle collisions between obstacles\n            obstacles.forEach((o1, i)=>{\n                obstacles.slice(i + 1).forEach((o2)=>o1.collideWithBody(o2));\n            });\n        };\n        const draw = ()=>{\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            // Draw car body and wheels using drawWithOffset and drawRect\n            (0, $086612735116fd75$export$b602ad7a6da8e372)(ctx, car.position, (ctx)=>{\n                ctx.rotate(car.angle);\n                // Draw car body\n                (0, $086612735116fd75$export$92e8c004f9e4bf7d)(ctx, {\n                    x: -20,\n                    y: -10,\n                    width: 40,\n                    height: 20\n                }, '#d33', true);\n                // Draw wheels\n                (0, $086612735116fd75$export$92e8c004f9e4bf7d)(ctx, {\n                    x: -15,\n                    y: -12,\n                    width: 8,\n                    height: 4\n                }, '#333', true);\n                (0, $086612735116fd75$export$92e8c004f9e4bf7d)(ctx, {\n                    x: -15,\n                    y: 8,\n                    width: 8,\n                    height: 4\n                }, '#333', true);\n                (0, $086612735116fd75$export$92e8c004f9e4bf7d)(ctx, {\n                    x: 7,\n                    y: -12,\n                    width: 8,\n                    height: 4\n                }, '#333', true);\n                (0, $086612735116fd75$export$92e8c004f9e4bf7d)(ctx, {\n                    x: 7,\n                    y: 8,\n                    width: 8,\n                    height: 4\n                }, '#333', true);\n            });\n            // Draw obstacles\n            obstacles.forEach((obstacle)=>{\n                (0, $086612735116fd75$export$8daab6f91f7ff730)(ctx, obstacle, \"gray\", true);\n            });\n            // Render speed and steering in the output\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Speed',\n                    car.speed\n                ],\n                [\n                    'Steering',\n                    car.steering\n                ],\n                \"Arrow Keys: Steer and Accelerate\"\n            ]);\n        };\n        return (0, $086612735116fd75$export$1e61084297db69ac)(update, draw);\n    },\n    \"Chase\": (canvas)=>{\n        const ctx = canvas.getContext('2d');\n        class Bird extends (0, $e80cf0db060d44c4$export$324e885649fee72) {\n            static{\n                this.MIN_THRUST_SPEED = 200;\n            }\n            static{\n                this.MAX_THRUST_SPEED = 1500;\n            }\n            get color() {\n                const ratio = (this.thrustSpeed - Bird.MIN_THRUST_SPEED) / (Bird.MAX_THRUST_SPEED - Bird.MIN_THRUST_SPEED);\n                const red = Math.round(255 * ratio);\n                const blue = Math.round(255 * (1 - ratio));\n                return `rgb(${red}, 0, ${blue})`;\n            }\n            constructor(x, y){\n                super({\n                    x: x,\n                    y: y,\n                    mass: 1\n                }), this.thrustSpeed = Bird.MIN_THRUST_SPEED + (Bird.MAX_THRUST_SPEED - Bird.MIN_THRUST_SPEED) * Math.random() ** 3, this.turnSpeed = (0, $7d6e798d0a09cf0e$export$c9fcf1a7df975d78)(5), this.trail = [], this.trailLength = 20;\n                this.radius = 5;\n                this.maxSpeed = 1500;\n                this.friction = 0.01;\n            }\n            chase(target) {\n                this.pointTowards(target, this.turnSpeed);\n                this.thrust(this.thrustSpeed);\n            }\n            update(deltaTime) {\n                super.update(deltaTime);\n                // Add the current position to the trail\n                this.trail.push({\n                    ...this.position\n                });\n                // Keep only the last 20 positions\n                if (this.trail.length > this.trailLength) this.trail.shift();\n            }\n        }\n        const birds = Array.from({\n            length: 50\n        }, ()=>new Bird(Math.random() * canvas.width, Math.random() * canvas.height));\n        const addBirds = (count)=>{\n            for(let i = 0; i < count; i++)birds.push(new Bird(Math.random() * canvas.width, Math.random() * canvas.height));\n        };\n        const removeBirds = (count)=>{\n            birds.splice(-count, count);\n        };\n        let mousePos = {\n            x: canvas.width / 2,\n            y: canvas.height / 2\n        };\n        (0, $086612735116fd75$export$d947e5f4f4c48d48)({\n            canvas: canvas,\n            draw: draw\n        }, (pos)=>{\n            mousePos = pos;\n        });\n        function update(deltaTime) {\n            birds.forEach((bird, i)=>{\n                // Chase the mouse\n                bird.chase(mousePos);\n                // Repel from other birds\n                birds.slice(i + 1).forEach((other)=>{\n                    (0, $5dda501f4a9774dc$exports).repel(bird, other, 20);\n                });\n                bird.update(deltaTime);\n            });\n        }\n        function draw() {\n            (0, $086612735116fd75$export$a1c066623ac679d3)(ctx);\n            // Draw birds\n            birds.forEach((bird)=>{\n                (0, $086612735116fd75$export$654275d54901f10e)(ctx, bird.position, bird.color, 2);\n                // Draw the trailing path\n                ctx.beginPath();\n                bird.trail.forEach((pos)=>ctx.lineTo(pos.x, pos.y));\n                ctx.strokeStyle = bird.color;\n                ctx.stroke();\n            });\n            // Draw mouse position\n            (0, $086612735116fd75$export$8daab6f91f7ff730)(ctx, {\n                x: mousePos.x,\n                y: mousePos.y,\n                radius: 5\n            }, 'red', true);\n            // Render results\n            (0, $086612735116fd75$export$4880d2177ba2b4c0)(ctx, [\n                [\n                    'Number of Birds',\n                    birds.length,\n                    {\n                        precision: 0\n                    }\n                ],\n                'Move the mouse to attract the birds',\n                'Press +/- to add/remove 10 birds'\n            ]);\n        }\n        (0, $086612735116fd75$export$df61b30b684217c0)({\n            canvas: canvas,\n            draw: draw\n        }, {\n            '+': ()=>addBirds(10),\n            '-': ()=>removeBirds(10)\n        });\n        return (0, $086612735116fd75$export$1e61084297db69ac)(update, draw);\n    }\n};\n\n\nconst $1d47723cd548cd0a$export$7eb1b49cd2af1357 = {\n    point: (0, $804439357c53744a$export$edaf19bb1d4a3d18),\n    angle: (0, $1f98b464ed010556$export$4a0439d774561d41),\n    intersection: (0, $fdcbb30aaeabb80a$export$10b0d1ad557ec395),\n    vector: (0, $598db149d2af8004$export$f9d080264ca8206b),\n    body: (0, $441597d29ead1611$export$695b29557618ac72),\n    physics: (0, $51a78989f62341bf$export$3ee404efaa54ac8a)\n};\n\n\n\nfunction $d7fbee754ebec663$var$renderNav(currentSection, currentMethod) {\n    return (0, $e5ed8027d647799b$export$c0bb0b647f701bb5)`\n    <div class=\"demo-nav\">\n      <div class=\"section-nav\">\n        ${Object.keys((0, $1d47723cd548cd0a$export$7eb1b49cd2af1357)).map((section)=>(0, $e5ed8027d647799b$export$c0bb0b647f701bb5)`\n          <a href=\"#${section}\" class=\"${section === currentSection ? 'active' : ''}\">${section}</a>\n        `)}\n      </div>\n      <div class=\"method-nav\">\n        ${currentSection && (0, $1d47723cd548cd0a$export$7eb1b49cd2af1357)[currentSection] && Object.keys((0, $1d47723cd548cd0a$export$7eb1b49cd2af1357)[currentSection]).map((method)=>(0, $e5ed8027d647799b$export$c0bb0b647f701bb5)`\n            <a href=\"#${currentSection}/${method}\" \n               class=\"${method === currentMethod ? 'active' : ''}\">${method}</a>\n          `)}\n      </div>\n    </div>\n  `;\n}\nfunction $d7fbee754ebec663$var$renderDemo(section, method) {\n    return (0, $e5ed8027d647799b$export$c0bb0b647f701bb5)`\n    ${$d7fbee754ebec663$var$renderNav(section, method)}\n    ${(0, $e41d1b66de65ecc4$export$76d90c956114f2c2)([\n        Date.now()\n    ], (id)=>id, ()=>(0, $e5ed8027d647799b$export$c0bb0b647f701bb5)`<canvas width=\"800\" height=\"600\"></canvas>`)}\n  `;\n}\nfunction $d7fbee754ebec663$var$route() {\n    const [section = 'point', method] = location.hash.slice(1).split('/');\n    const demo = document.getElementById('demo');\n    (0, $086612735116fd75$export$aad8462122ac592b)();\n    (0, $e5ed8027d647799b$export$b3890eb0ae9dca99)($d7fbee754ebec663$var$renderDemo(section, method), demo);\n    const canvas = demo.querySelector('canvas');\n    (0, $086612735116fd75$export$a1c066623ac679d3)(canvas.getContext('2d'));\n    if (method && (0, $1d47723cd548cd0a$export$7eb1b49cd2af1357)[section]?.[method]) (0, $1d47723cd548cd0a$export$7eb1b49cd2af1357)[section][method](canvas);\n}\nwindow.addEventListener('hashchange', $d7fbee754ebec663$var$route);\n$d7fbee754ebec663$var$route();\n\n\n//# sourceMappingURL=demo.93048f35.js.map\n","import { html, render } from 'lit-html';\nimport { repeat } from 'lit-html/directives/repeat.js';\nimport { demos } from './pages/index';\nimport { clearCanvas, reset as reset } from './utils';\n\nfunction renderNav(currentSection: string, currentMethod?: string) {\n  return html`\n    <div class=\"demo-nav\">\n      <div class=\"section-nav\">\n        ${Object.keys(demos).map(section => html`\n          <a href=\"#${section}\" class=\"${section === currentSection ? 'active' : ''}\">${section}</a>\n        `)}\n      </div>\n      <div class=\"method-nav\">\n        ${currentSection && demos[currentSection] && \n          Object.keys(demos[currentSection]).map(method => html`\n            <a href=\"#${currentSection}/${method}\" \n               class=\"${method === currentMethod ? 'active' : ''}\">${method}</a>\n          `)\n        }\n      </div>\n    </div>\n  `;\n}\n\nfunction renderDemo(section: string, method?: string) {\n  return html`\n    ${renderNav(section, method)}\n    ${repeat([Date.now()], (id) => id, () => \n      html`<canvas width=\"800\" height=\"600\"></canvas>`\n    )}\n  `;\n}\n\nfunction route() {\n  const [section = 'point', method] = location.hash.slice(1).split('/');\n  const demo = document.getElementById('demo')!;\n\n  reset();\n  \n  render(renderDemo(section, method), demo);\n  \n  const canvas = demo.querySelector('canvas')!;\n  clearCanvas(canvas.getContext('2d')!);\n  \n  if (method && demos[section]?.[method]) {\n    demos[section][method](canvas);\n  }\n}\n\nwindow.addEventListener('hashchange', route);\nroute();\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst t=globalThis,i=t.trustedTypes,s=i?i.createPolicy(\"lit-html\",{createHTML:t=>t}):void 0,e=\"$lit$\",h=`lit$${Math.random().toFixed(9).slice(2)}$`,o=\"?\"+h,n=`<${o}>`,r=document,l=()=>r.createComment(\"\"),c=t=>null===t||\"object\"!=typeof t&&\"function\"!=typeof t,a=Array.isArray,u=t=>a(t)||\"function\"==typeof t?.[Symbol.iterator],d=\"[ \\t\\n\\f\\r]\",f=/<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g,v=/-->/g,_=/>/g,m=RegExp(`>|${d}(?:([^\\\\s\"'>=/]+)(${d}*=${d}*(?:[^ \\t\\n\\f\\r\"'\\`<>=]|(\"|')|))|$)`,\"g\"),p=/'/g,g=/\"/g,$=/^(?:script|style|textarea|title)$/i,y=t=>(i,...s)=>({_$litType$:t,strings:i,values:s}),x=y(1),b=y(2),w=y(3),T=Symbol.for(\"lit-noChange\"),E=Symbol.for(\"lit-nothing\"),A=new WeakMap,C=r.createTreeWalker(r,129);function P(t,i){if(!a(t)||!t.hasOwnProperty(\"raw\"))throw Error(\"invalid template strings array\");return void 0!==s?s.createHTML(i):i}const V=(t,i)=>{const s=t.length-1,o=[];let r,l=2===i?\"<svg>\":3===i?\"<math>\":\"\",c=f;for(let i=0;i<s;i++){const s=t[i];let a,u,d=-1,y=0;for(;y<s.length&&(c.lastIndex=y,u=c.exec(s),null!==u);)y=c.lastIndex,c===f?\"!--\"===u[1]?c=v:void 0!==u[1]?c=_:void 0!==u[2]?($.test(u[2])&&(r=RegExp(\"</\"+u[2],\"g\")),c=m):void 0!==u[3]&&(c=m):c===m?\">\"===u[0]?(c=r??f,d=-1):void 0===u[1]?d=-2:(d=c.lastIndex-u[2].length,a=u[1],c=void 0===u[3]?m:'\"'===u[3]?g:p):c===g||c===p?c=m:c===v||c===_?c=f:(c=m,r=void 0);const x=c===m&&t[i+1].startsWith(\"/>\")?\" \":\"\";l+=c===f?s+n:d>=0?(o.push(a),s.slice(0,d)+e+s.slice(d)+h+x):s+h+(-2===d?i:x)}return[P(t,l+(t[s]||\"<?>\")+(2===i?\"</svg>\":3===i?\"</math>\":\"\")),o]};class N{constructor({strings:t,_$litType$:s},n){let r;this.parts=[];let c=0,a=0;const u=t.length-1,d=this.parts,[f,v]=V(t,s);if(this.el=N.createElement(f,n),C.currentNode=this.el.content,2===s||3===s){const t=this.el.content.firstChild;t.replaceWith(...t.childNodes)}for(;null!==(r=C.nextNode())&&d.length<u;){if(1===r.nodeType){if(r.hasAttributes())for(const t of r.getAttributeNames())if(t.endsWith(e)){const i=v[a++],s=r.getAttribute(t).split(h),e=/([.?@])?(.*)/.exec(i);d.push({type:1,index:c,name:e[2],strings:s,ctor:\".\"===e[1]?H:\"?\"===e[1]?I:\"@\"===e[1]?L:k}),r.removeAttribute(t)}else t.startsWith(h)&&(d.push({type:6,index:c}),r.removeAttribute(t));if($.test(r.tagName)){const t=r.textContent.split(h),s=t.length-1;if(s>0){r.textContent=i?i.emptyScript:\"\";for(let i=0;i<s;i++)r.append(t[i],l()),C.nextNode(),d.push({type:2,index:++c});r.append(t[s],l())}}}else if(8===r.nodeType)if(r.data===o)d.push({type:2,index:c});else{let t=-1;for(;-1!==(t=r.data.indexOf(h,t+1));)d.push({type:7,index:c}),t+=h.length-1}c++}}static createElement(t,i){const s=r.createElement(\"template\");return s.innerHTML=t,s}}function S(t,i,s=t,e){if(i===T)return i;let h=void 0!==e?s._$Co?.[e]:s._$Cl;const o=c(i)?void 0:i._$litDirective$;return h?.constructor!==o&&(h?._$AO?.(!1),void 0===o?h=void 0:(h=new o(t),h._$AT(t,s,e)),void 0!==e?(s._$Co??=[])[e]=h:s._$Cl=h),void 0!==h&&(i=S(t,h._$AS(t,i.values),h,e)),i}class M{constructor(t,i){this._$AV=[],this._$AN=void 0,this._$AD=t,this._$AM=i}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(t){const{el:{content:i},parts:s}=this._$AD,e=(t?.creationScope??r).importNode(i,!0);C.currentNode=e;let h=C.nextNode(),o=0,n=0,l=s[0];for(;void 0!==l;){if(o===l.index){let i;2===l.type?i=new R(h,h.nextSibling,this,t):1===l.type?i=new l.ctor(h,l.name,l.strings,this,t):6===l.type&&(i=new z(h,this,t)),this._$AV.push(i),l=s[++n]}o!==l?.index&&(h=C.nextNode(),o++)}return C.currentNode=r,e}p(t){let i=0;for(const s of this._$AV)void 0!==s&&(void 0!==s.strings?(s._$AI(t,s,i),i+=s.strings.length-2):s._$AI(t[i])),i++}}class R{get _$AU(){return this._$AM?._$AU??this._$Cv}constructor(t,i,s,e){this.type=2,this._$AH=E,this._$AN=void 0,this._$AA=t,this._$AB=i,this._$AM=s,this.options=e,this._$Cv=e?.isConnected??!0}get parentNode(){let t=this._$AA.parentNode;const i=this._$AM;return void 0!==i&&11===t?.nodeType&&(t=i.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,i=this){t=S(this,t,i),c(t)?t===E||null==t||\"\"===t?(this._$AH!==E&&this._$AR(),this._$AH=E):t!==this._$AH&&t!==T&&this._(t):void 0!==t._$litType$?this.$(t):void 0!==t.nodeType?this.T(t):u(t)?this.k(t):this._(t)}O(t){return this._$AA.parentNode.insertBefore(t,this._$AB)}T(t){this._$AH!==t&&(this._$AR(),this._$AH=this.O(t))}_(t){this._$AH!==E&&c(this._$AH)?this._$AA.nextSibling.data=t:this.T(r.createTextNode(t)),this._$AH=t}$(t){const{values:i,_$litType$:s}=t,e=\"number\"==typeof s?this._$AC(t):(void 0===s.el&&(s.el=N.createElement(P(s.h,s.h[0]),this.options)),s);if(this._$AH?._$AD===e)this._$AH.p(i);else{const t=new M(e,this),s=t.u(this.options);t.p(i),this.T(s),this._$AH=t}}_$AC(t){let i=A.get(t.strings);return void 0===i&&A.set(t.strings,i=new N(t)),i}k(t){a(this._$AH)||(this._$AH=[],this._$AR());const i=this._$AH;let s,e=0;for(const h of t)e===i.length?i.push(s=new R(this.O(l()),this.O(l()),this,this.options)):s=i[e],s._$AI(h),e++;e<i.length&&(this._$AR(s&&s._$AB.nextSibling,e),i.length=e)}_$AR(t=this._$AA.nextSibling,i){for(this._$AP?.(!1,!0,i);t&&t!==this._$AB;){const i=t.nextSibling;t.remove(),t=i}}setConnected(t){void 0===this._$AM&&(this._$Cv=t,this._$AP?.(t))}}class k{get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}constructor(t,i,s,e,h){this.type=1,this._$AH=E,this._$AN=void 0,this.element=t,this.name=i,this._$AM=e,this.options=h,s.length>2||\"\"!==s[0]||\"\"!==s[1]?(this._$AH=Array(s.length-1).fill(new String),this.strings=s):this._$AH=E}_$AI(t,i=this,s,e){const h=this.strings;let o=!1;if(void 0===h)t=S(this,t,i,0),o=!c(t)||t!==this._$AH&&t!==T,o&&(this._$AH=t);else{const e=t;let n,r;for(t=h[0],n=0;n<h.length-1;n++)r=S(this,e[s+n],i,n),r===T&&(r=this._$AH[n]),o||=!c(r)||r!==this._$AH[n],r===E?t=E:t!==E&&(t+=(r??\"\")+h[n+1]),this._$AH[n]=r}o&&!e&&this.j(t)}j(t){t===E?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,t??\"\")}}class H extends k{constructor(){super(...arguments),this.type=3}j(t){this.element[this.name]=t===E?void 0:t}}class I extends k{constructor(){super(...arguments),this.type=4}j(t){this.element.toggleAttribute(this.name,!!t&&t!==E)}}class L extends k{constructor(t,i,s,e,h){super(t,i,s,e,h),this.type=5}_$AI(t,i=this){if((t=S(this,t,i,0)??E)===T)return;const s=this._$AH,e=t===E&&s!==E||t.capture!==s.capture||t.once!==s.once||t.passive!==s.passive,h=t!==E&&(s===E||e);e&&this.element.removeEventListener(this.name,this,s),h&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){\"function\"==typeof this._$AH?this._$AH.call(this.options?.host??this.element,t):this._$AH.handleEvent(t)}}class z{constructor(t,i,s){this.element=t,this.type=6,this._$AN=void 0,this._$AM=i,this.options=s}get _$AU(){return this._$AM._$AU}_$AI(t){S(this,t)}}const Z={M:e,P:h,A:o,C:1,L:V,R:M,D:u,V:S,I:R,H:k,N:I,U:L,B:H,F:z},j=t.litHtmlPolyfillSupport;j?.(N,R),(t.litHtmlVersions??=[]).push(\"3.2.1\");const B=(t,i,s)=>{const e=s?.renderBefore??i;let h=e._$litPart$;if(void 0===h){const t=s?.renderBefore??null;e._$litPart$=h=new R(i.insertBefore(l(),t),t,void 0,s??{})}return h._$AI(t),h};export{Z as _$LH,x as html,w as mathml,T as noChange,E as nothing,B as render,b as svg};\n//# sourceMappingURL=lit-html.js.map\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// IMPORTANT: these imports must be type-only\nimport type {Directive, DirectiveResult, PartInfo} from './directive.js';\nimport type {TrustedHTML, TrustedTypesWindow} from 'trusted-types/lib';\n\nconst DEV_MODE = true;\nconst ENABLE_EXTRA_SECURITY_HOOKS = true;\nconst ENABLE_SHADYDOM_NOPATCH = true;\nconst NODE_MODE = false;\n\n// Allows minifiers to rename references to globalThis\nconst global = globalThis;\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace LitUnstable {\n  /**\n   * When Lit is running in dev mode and `window.emitLitDebugLogEvents` is true,\n   * we will emit 'lit-debug' events to window, with live details about the update and render\n   * lifecycle. These can be useful for writing debug tooling and visualizations.\n   *\n   * Please be aware that running with window.emitLitDebugLogEvents has performance overhead,\n   * making certain operations that are normally very cheap (like a no-op render) much slower,\n   * because we must copy data and dispatch events.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace DebugLog {\n    export type Entry =\n      | TemplatePrep\n      | TemplateInstantiated\n      | TemplateInstantiatedAndUpdated\n      | TemplateUpdating\n      | BeginRender\n      | EndRender\n      | CommitPartEntry\n      | SetPartValue;\n    export interface TemplatePrep {\n      kind: 'template prep';\n      template: Template;\n      strings: TemplateStringsArray;\n      clonableTemplate: HTMLTemplateElement;\n      parts: TemplatePart[];\n    }\n    export interface BeginRender {\n      kind: 'begin render';\n      id: number;\n      value: unknown;\n      container: HTMLElement | DocumentFragment;\n      options: RenderOptions | undefined;\n      part: ChildPart | undefined;\n    }\n    export interface EndRender {\n      kind: 'end render';\n      id: number;\n      value: unknown;\n      container: HTMLElement | DocumentFragment;\n      options: RenderOptions | undefined;\n      part: ChildPart;\n    }\n    export interface TemplateInstantiated {\n      kind: 'template instantiated';\n      template: Template | CompiledTemplate;\n      instance: TemplateInstance;\n      options: RenderOptions | undefined;\n      fragment: Node;\n      parts: Array<Part | undefined>;\n      values: unknown[];\n    }\n    export interface TemplateInstantiatedAndUpdated {\n      kind: 'template instantiated and updated';\n      template: Template | CompiledTemplate;\n      instance: TemplateInstance;\n      options: RenderOptions | undefined;\n      fragment: Node;\n      parts: Array<Part | undefined>;\n      values: unknown[];\n    }\n    export interface TemplateUpdating {\n      kind: 'template updating';\n      template: Template | CompiledTemplate;\n      instance: TemplateInstance;\n      options: RenderOptions | undefined;\n      parts: Array<Part | undefined>;\n      values: unknown[];\n    }\n    export interface SetPartValue {\n      kind: 'set part';\n      part: Part;\n      value: unknown;\n      valueIndex: number;\n      values: unknown[];\n      templateInstance: TemplateInstance;\n    }\n\n    export type CommitPartEntry =\n      | CommitNothingToChildEntry\n      | CommitText\n      | CommitNode\n      | CommitAttribute\n      | CommitProperty\n      | CommitBooleanAttribute\n      | CommitEventListener\n      | CommitToElementBinding;\n\n    export interface CommitNothingToChildEntry {\n      kind: 'commit nothing to child';\n      start: ChildNode;\n      end: ChildNode | null;\n      parent: Disconnectable | undefined;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitText {\n      kind: 'commit text';\n      node: Text;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitNode {\n      kind: 'commit node';\n      start: Node;\n      parent: Disconnectable | undefined;\n      value: Node;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitAttribute {\n      kind: 'commit attribute';\n      element: Element;\n      name: string;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitProperty {\n      kind: 'commit property';\n      element: Element;\n      name: string;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitBooleanAttribute {\n      kind: 'commit boolean attribute';\n      element: Element;\n      name: string;\n      value: boolean;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitEventListener {\n      kind: 'commit event listener';\n      element: Element;\n      name: string;\n      value: unknown;\n      oldListener: unknown;\n      options: RenderOptions | undefined;\n      // True if we're removing the old event listener (e.g. because settings changed, or value is nothing)\n      removeListener: boolean;\n      // True if we're adding a new event listener (e.g. because first render, or settings changed)\n      addListener: boolean;\n    }\n\n    export interface CommitToElementBinding {\n      kind: 'commit to element binding';\n      element: Element;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n  }\n}\n\ninterface DebugLoggingWindow {\n  // Even in dev mode, we generally don't want to emit these events, as that's\n  // another level of cost, so only emit them when DEV_MODE is true _and_ when\n  // window.emitLitDebugEvents is true.\n  emitLitDebugLogEvents?: boolean;\n}\n\n/**\n * Useful for visualizing and logging insights into what the Lit template system is doing.\n *\n * Compiled out of prod mode builds.\n */\nconst debugLogEvent = DEV_MODE\n  ? (event: LitUnstable.DebugLog.Entry) => {\n      const shouldEmit = (global as unknown as DebugLoggingWindow)\n        .emitLitDebugLogEvents;\n      if (!shouldEmit) {\n        return;\n      }\n      global.dispatchEvent(\n        new CustomEvent<LitUnstable.DebugLog.Entry>('lit-debug', {\n          detail: event,\n        })\n      );\n    }\n  : undefined;\n// Used for connecting beginRender and endRender events when there are nested\n// renders when errors are thrown preventing an endRender event from being\n// called.\nlet debugLogRenderId = 0;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nif (DEV_MODE) {\n  global.litIssuedWarnings ??= new Set();\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += code\n      ? ` See https://lit.dev/msg/${code} for more information.`\n      : '';\n    if (!global.litIssuedWarnings!.has(warning)) {\n      console.warn(warning);\n      global.litIssuedWarnings!.add(warning);\n    }\n  };\n\n  issueWarning(\n    'dev-mode',\n    `Lit is in dev mode. Not recommended for production!`\n  );\n}\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  global.ShadyDOM?.inUse &&\n  global.ShadyDOM?.noPatch === true\n    ? (global.ShadyDOM!.wrap as <T extends Node>(node: T) => T)\n    : <T extends Node>(node: T) => node;\n\nconst trustedTypes = (global as unknown as TrustedTypesWindow).trustedTypes;\n\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\nconst policy = trustedTypes\n  ? trustedTypes.createPolicy('lit-html', {\n      createHTML: (s) => s,\n    })\n  : undefined;\n\n/**\n * Used to sanitize any value before it is written into the DOM. This can be\n * used to implement a security policy of allowed and disallowed values in\n * order to prevent XSS attacks.\n *\n * One way of using this callback would be to check attributes and properties\n * against a list of high risk fields, and require that values written to such\n * fields be instances of a class which is safe by construction. Closure's Safe\n * HTML Types is one implementation of this technique (\n * https://github.com/google/safe-html-types/blob/master/doc/safehtml-types.md).\n * The TrustedTypes polyfill in API-only mode could also be used as a basis\n * for this technique (https://github.com/WICG/trusted-types).\n *\n * @param node The HTML node (usually either a #text node or an Element) that\n *     is being written to. Note that this is just an exemplar node, the write\n *     may take place against another instance of the same class of node.\n * @param name The name of an attribute or property (for example, 'href').\n * @param type Indicates whether the write that's about to be performed will\n *     be to a property or a node.\n * @return A function that will sanitize this class of writes.\n */\nexport type SanitizerFactory = (\n  node: Node,\n  name: string,\n  type: 'property' | 'attribute'\n) => ValueSanitizer;\n\n/**\n * A function which can sanitize values that will be written to a specific kind\n * of DOM sink.\n *\n * See SanitizerFactory.\n *\n * @param value The value to sanitize. Will be the actual value passed into\n *     the lit-html template literal, so this could be of any type.\n * @return The value to write to the DOM. Usually the same as the input value,\n *     unless sanitization is needed.\n */\nexport type ValueSanitizer = (value: unknown) => unknown;\n\nconst identityFunction: ValueSanitizer = (value: unknown) => value;\nconst noopSanitizer: SanitizerFactory = (\n  _node: Node,\n  _name: string,\n  _type: 'property' | 'attribute'\n) => identityFunction;\n\n/** Sets the global sanitizer factory. */\nconst setSanitizer = (newSanitizer: SanitizerFactory) => {\n  if (!ENABLE_EXTRA_SECURITY_HOOKS) {\n    return;\n  }\n  if (sanitizerFactoryInternal !== noopSanitizer) {\n    throw new Error(\n      `Attempted to overwrite existing lit-html security policy.` +\n        ` setSanitizeDOMValueFactory should be called at most once.`\n    );\n  }\n  sanitizerFactoryInternal = newSanitizer;\n};\n\n/**\n * Only used in internal tests, not a part of the public API.\n */\nconst _testOnlyClearSanitizerFactoryDoNotCallOrElse = () => {\n  sanitizerFactoryInternal = noopSanitizer;\n};\n\nconst createSanitizer: SanitizerFactory = (node, name, type) => {\n  return sanitizerFactoryInternal(node, name, type);\n};\n\n// Added to an attribute name to mark the attribute as bound so we can find\n// it easily.\nconst boundAttributeSuffix = '$lit$';\n\n// This marker is used in many syntactic positions in HTML, so it must be\n// a valid element name and attribute name. We don't support dynamic names (yet)\n// but this at least ensures that the parse tree is closer to the template\n// intention.\nconst marker = `lit$${Math.random().toFixed(9).slice(2)}$`;\n\n// String used to tell if a comment is a marker comment\nconst markerMatch = '?' + marker;\n\n// Text used to insert a comment marker node. We use processing instruction\n// syntax because it's slightly smaller, but parses as a comment node.\nconst nodeMarker = `<${markerMatch}>`;\n\nconst d =\n  NODE_MODE && global.document === undefined\n    ? ({\n        createTreeWalker() {\n          return {};\n        },\n      } as unknown as Document)\n    : document;\n\n// Creates a dynamic marker. We never have to search for these in the DOM.\nconst createMarker = () => d.createComment('');\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\nconst isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\nconst isArray = Array.isArray;\nconst isIterable = (value: unknown): value is Iterable<unknown> =>\n  isArray(value) ||\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  typeof (value as any)?.[Symbol.iterator] === 'function';\n\nconst SPACE_CHAR = `[ \\t\\n\\f\\r]`;\nconst ATTR_VALUE_CHAR = `[^ \\t\\n\\f\\r\"'\\`<>=]`;\nconst NAME_CHAR = `[^\\\\s\"'>=/]`;\n\n// These regexes represent the five parsing states that we care about in the\n// Template's HTML scanner. They match the *end* of the state they're named\n// after.\n// Depending on the match, we transition to a new state. If there's no match,\n// we stay in the same state.\n// Note that the regexes are stateful. We utilize lastIndex and sync it\n// across the multiple regexes used. In addition to the five regexes below\n// we also dynamically create a regex to find the matching end tags for raw\n// text elements.\n\n/**\n * End of text is: `<` followed by:\n *   (comment start) or (tag) or (dynamic tag binding)\n */\nconst textEndRegex = /<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g;\nconst COMMENT_START = 1;\nconst TAG_NAME = 2;\nconst DYNAMIC_TAG_NAME = 3;\n\nconst commentEndRegex = /-->/g;\n/**\n * Comments not started with <!--, like </{, can be ended by a single `>`\n */\nconst comment2EndRegex = />/g;\n\n/**\n * The tagEnd regex matches the end of the \"inside an opening\" tag syntax\n * position. It either matches a `>`, an attribute-like sequence, or the end\n * of the string after a space (attribute-name position ending).\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\t\\n\\f\\r\" are HTML space characters:\n * https://infra.spec.whatwg.org/#ascii-whitespace\n *\n * So an attribute is:\n *  * The name: any character except a whitespace character, (\"), ('), \">\",\n *    \"=\", or \"/\". Note: this is different from the HTML spec which also excludes control characters.\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nconst tagEndRegex = new RegExp(\n  `>|${SPACE_CHAR}(?:(${NAME_CHAR}+)(${SPACE_CHAR}*=${SPACE_CHAR}*(?:${ATTR_VALUE_CHAR}|(\"|')|))|$)`,\n  'g'\n);\nconst ENTIRE_MATCH = 0;\nconst ATTRIBUTE_NAME = 1;\nconst SPACES_AND_EQUALS = 2;\nconst QUOTE_CHAR = 3;\n\nconst singleQuoteAttrEndRegex = /'/g;\nconst doubleQuoteAttrEndRegex = /\"/g;\n/**\n * Matches the raw text elements.\n *\n * Comments are not parsed within raw text elements, so we need to search their\n * text content for marker strings.\n */\nconst rawTextElement = /^(?:script|style|textarea|title)$/i;\n\n/** TemplateResult types */\nconst HTML_RESULT = 1;\nconst SVG_RESULT = 2;\nconst MATHML_RESULT = 3;\n\ntype ResultType = typeof HTML_RESULT | typeof SVG_RESULT | typeof MATHML_RESULT;\n\n// TemplatePart types\n// IMPORTANT: these must match the values in PartType\nconst ATTRIBUTE_PART = 1;\nconst CHILD_PART = 2;\nconst PROPERTY_PART = 3;\nconst BOOLEAN_ATTRIBUTE_PART = 4;\nconst EVENT_PART = 5;\nconst ELEMENT_PART = 6;\nconst COMMENT_PART = 7;\n\n/**\n * The return type of the template tag functions, {@linkcode html} and\n * {@linkcode svg} when it hasn't been compiled by @lit-labs/compiler.\n *\n * A `TemplateResult` object holds all the information about a template\n * expression required to render it: the template strings, expression values,\n * and type of template (html or svg).\n *\n * `TemplateResult` objects do not create any DOM on their own. To create or\n * update DOM you need to render the `TemplateResult`. See\n * [Rendering](https://lit.dev/docs/components/rendering) for more information.\n *\n */\nexport type UncompiledTemplateResult<T extends ResultType = ResultType> = {\n  // This property needs to remain unminified.\n  ['_$litType$']: T;\n  strings: TemplateStringsArray;\n  values: unknown[];\n};\n\n/**\n * This is a template result that may be either uncompiled or compiled.\n *\n * In the future, TemplateResult will be this type. If you want to explicitly\n * note that a template result is potentially compiled, you can reference this\n * type and it will continue to behave the same through the next major version\n * of Lit. This can be useful for code that wants to prepare for the next\n * major version of Lit.\n */\nexport type MaybeCompiledTemplateResult<T extends ResultType = ResultType> =\n  | UncompiledTemplateResult<T>\n  | CompiledTemplateResult;\n\n/**\n * The return type of the template tag functions, {@linkcode html} and\n * {@linkcode svg}.\n *\n * A `TemplateResult` object holds all the information about a template\n * expression required to render it: the template strings, expression values,\n * and type of template (html or svg).\n *\n * `TemplateResult` objects do not create any DOM on their own. To create or\n * update DOM you need to render the `TemplateResult`. See\n * [Rendering](https://lit.dev/docs/components/rendering) for more information.\n *\n * In Lit 4, this type will be an alias of\n * MaybeCompiledTemplateResult, so that code will get type errors if it assumes\n * that Lit templates are not compiled. When deliberately working with only\n * one, use either {@linkcode CompiledTemplateResult} or\n * {@linkcode UncompiledTemplateResult} explicitly.\n */\nexport type TemplateResult<T extends ResultType = ResultType> =\n  UncompiledTemplateResult<T>;\n\nexport type HTMLTemplateResult = TemplateResult<typeof HTML_RESULT>;\n\nexport type SVGTemplateResult = TemplateResult<typeof SVG_RESULT>;\n\nexport type MathMLTemplateResult = TemplateResult<typeof MATHML_RESULT>;\n\n/**\n * A TemplateResult that has been compiled by @lit-labs/compiler, skipping the\n * prepare step.\n */\nexport interface CompiledTemplateResult {\n  // This is a factory in order to make template initialization lazy\n  // and allow ShadyRenderOptions scope to be passed in.\n  // This property needs to remain unminified.\n  ['_$litType$']: CompiledTemplate;\n  values: unknown[];\n}\n\nexport interface CompiledTemplate extends Omit<Template, 'el'> {\n  // el is overridden to be optional. We initialize it on first render\n  el?: HTMLTemplateElement;\n\n  // The prepared HTML string to create a template element from.\n  // The type is a TemplateStringsArray to guarantee that the value came from\n  // source code, preventing a JSON injection attack.\n  h: TemplateStringsArray;\n}\n\n/**\n * Generates a template literal tag function that returns a TemplateResult with\n * the given result type.\n */\nconst tag =\n  <T extends ResultType>(type: T) =>\n  (strings: TemplateStringsArray, ...values: unknown[]): TemplateResult<T> => {\n    // Warn against templates octal escape sequences\n    // We do this here rather than in render so that the warning is closer to the\n    // template definition.\n    if (DEV_MODE && strings.some((s) => s === undefined)) {\n      console.warn(\n        'Some template strings are undefined.\\n' +\n          'This is probably caused by illegal octal escape sequences.'\n      );\n    }\n    if (DEV_MODE) {\n      // Import static-html.js results in a circular dependency which g3 doesn't\n      // handle. Instead we know that static values must have the field\n      // `_$litStatic$`.\n      if (\n        values.some((val) => (val as {_$litStatic$: unknown})?.['_$litStatic$'])\n      ) {\n        issueWarning(\n          '',\n          `Static values 'literal' or 'unsafeStatic' cannot be used as values to non-static templates.\\n` +\n            `Please use the static 'html' tag function. See https://lit.dev/docs/templates/expressions/#static-expressions`\n        );\n      }\n    }\n    return {\n      // This property needs to remain unminified.\n      ['_$litType$']: type,\n      strings,\n      values,\n    };\n  };\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n *\n * ```ts\n * const header = (title: string) => html`<h1>${title}</h1>`;\n * ```\n *\n * The `html` tag returns a description of the DOM to render as a value. It is\n * lazy, meaning no work is done until the template is rendered. When rendering,\n * if a template comes from the same expression as a previously rendered result,\n * it's efficiently updated instead of replaced.\n */\nexport const html = tag(HTML_RESULT);\n\n/**\n * Interprets a template literal as an SVG fragment that can efficiently render\n * to and update a container.\n *\n * ```ts\n * const rect = svg`<rect width=\"10\" height=\"10\"></rect>`;\n *\n * const myImage = html`\n *   <svg viewBox=\"0 0 10 10\" xmlns=\"http://www.w3.org/2000/svg\">\n *     ${rect}\n *   </svg>`;\n * ```\n *\n * The `svg` *tag function* should only be used for SVG fragments, or elements\n * that would be contained **inside** an `<svg>` HTML element. A common error is\n * placing an `<svg>` *element* in a template tagged with the `svg` tag\n * function. The `<svg>` element is an HTML element and should be used within a\n * template tagged with the {@linkcode html} tag function.\n *\n * In LitElement usage, it's invalid to return an SVG fragment from the\n * `render()` method, as the SVG fragment will be contained within the element's\n * shadow root and thus not be properly contained within an `<svg>` HTML\n * element.\n */\nexport const svg = tag(SVG_RESULT);\n\n/**\n * Interprets a template literal as MathML fragment that can efficiently render\n * to and update a container.\n *\n * ```ts\n * const num = mathml`<mn>1</mn>`;\n *\n * const eq = html`\n *   <math>\n *     ${num}\n *   </math>`;\n * ```\n *\n * The `mathml` *tag function* should only be used for MathML fragments, or\n * elements that would be contained **inside** a `<math>` HTML element. A common\n * error is placing a `<math>` *element* in a template tagged with the `mathml`\n * tag function. The `<math>` element is an HTML element and should be used\n * within a template tagged with the {@linkcode html} tag function.\n *\n * In LitElement usage, it's invalid to return an MathML fragment from the\n * `render()` method, as the MathML fragment will be contained within the\n * element's shadow root and thus not be properly contained within a `<math>`\n * HTML element.\n */\nexport const mathml = tag(MATHML_RESULT);\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = Symbol.for('lit-noChange');\n\n/**\n * A sentinel value that signals a ChildPart to fully clear its content.\n *\n * ```ts\n * const button = html`${\n *  user.isAdmin\n *    ? html`<button>DELETE</button>`\n *    : nothing\n * }`;\n * ```\n *\n * Prefer using `nothing` over other falsy values as it provides a consistent\n * behavior between various expression binding contexts.\n *\n * In child expressions, `undefined`, `null`, `''`, and `nothing` all behave the\n * same and render no nodes. In attribute expressions, `nothing` _removes_ the\n * attribute, while `undefined` and `null` will render an empty string. In\n * property expressions `nothing` becomes `undefined`.\n */\nexport const nothing = Symbol.for('lit-nothing');\n\n/**\n * The cache of prepared templates, keyed by the tagged TemplateStringsArray\n * and _not_ accounting for the specific template tag used. This means that\n * template tags cannot be dynamic - they must statically be one of html, svg,\n * or attr. This restriction simplifies the cache lookup, which is on the hot\n * path for rendering.\n */\nconst templateCache = new WeakMap<TemplateStringsArray, Template>();\n\n/**\n * Object specifying options for controlling lit-html rendering. Note that\n * while `render` may be called multiple times on the same `container` (and\n * `renderBefore` reference node) to efficiently update the rendered content,\n * only the options passed in during the first render are respected during\n * the lifetime of renders to that unique `container` + `renderBefore`\n * combination.\n */\nexport interface RenderOptions {\n  /**\n   * An object to use as the `this` value for event listeners. It's often\n   * useful to set this to the host component rendering a template.\n   */\n  host?: object;\n  /**\n   * A DOM node before which to render content in the container.\n   */\n  renderBefore?: ChildNode | null;\n  /**\n   * Node used for cloning the template (`importNode` will be called on this\n   * node). This controls the `ownerDocument` of the rendered DOM, along with\n   * any inherited context. Defaults to the global `document`.\n   */\n  creationScope?: {importNode(node: Node, deep?: boolean): Node};\n  /**\n   * The initial connected state for the top-level part being rendered. If no\n   * `isConnected` option is set, `AsyncDirective`s will be connected by\n   * default. Set to `false` if the initial render occurs in a disconnected tree\n   * and `AsyncDirective`s should see `isConnected === false` for their initial\n   * render. The `part.setConnected()` method must be used subsequent to initial\n   * render to change the connected state of the part.\n   */\n  isConnected?: boolean;\n}\n\nconst walker = d.createTreeWalker(\n  d,\n  129 /* NodeFilter.SHOW_{ELEMENT|COMMENT} */\n);\n\nlet sanitizerFactoryInternal: SanitizerFactory = noopSanitizer;\n\n//\n// Classes only below here, const variable declarations only above here...\n//\n// Keeping variable declarations and classes together improves minification.\n// Interfaces and type aliases can be interleaved freely.\n//\n\n// Type for classes that have a `_directive` or `_directives[]` field, used by\n// `resolveDirective`\nexport interface DirectiveParent {\n  _$parent?: DirectiveParent;\n  _$isConnected: boolean;\n  __directive?: Directive;\n  __directives?: Array<Directive | undefined>;\n}\n\nfunction trustFromTemplateString(\n  tsa: TemplateStringsArray,\n  stringFromTSA: string\n): TrustedHTML {\n  // A security check to prevent spoofing of Lit template results.\n  // In the future, we may be able to replace this with Array.isTemplateObject,\n  // though we might need to make that check inside of the html and svg\n  // functions, because precompiled templates don't come in as\n  // TemplateStringArray objects.\n  if (!isArray(tsa) || !tsa.hasOwnProperty('raw')) {\n    let message = 'invalid template strings array';\n    if (DEV_MODE) {\n      message = `\n          Internal Error: expected template strings to be an array\n          with a 'raw' field. Faking a template strings array by\n          calling html or svg like an ordinary function is effectively\n          the same as calling unsafeHtml and can lead to major security\n          issues, e.g. opening your code up to XSS attacks.\n          If you're using the html or svg tagged template functions normally\n          and still seeing this error, please file a bug at\n          https://github.com/lit/lit/issues/new?template=bug_report.md\n          and include information about your build tooling, if any.\n        `\n        .trim()\n        .replace(/\\n */g, '\\n');\n    }\n    throw new Error(message);\n  }\n  return policy !== undefined\n    ? policy.createHTML(stringFromTSA)\n    : (stringFromTSA as unknown as TrustedHTML);\n}\n\n/**\n * Returns an HTML string for the given TemplateStringsArray and result type\n * (HTML or SVG), along with the case-sensitive bound attribute names in\n * template order. The HTML contains comment markers denoting the `ChildPart`s\n * and suffixes on bound attributes denoting the `AttributeParts`.\n *\n * @param strings template strings array\n * @param type HTML or SVG\n * @return Array containing `[html, attrNames]` (array returned for terseness,\n *     to avoid object fields since this code is shared with non-minified SSR\n *     code)\n */\nconst getTemplateHtml = (\n  strings: TemplateStringsArray,\n  type: ResultType\n): [TrustedHTML, Array<string>] => {\n  // Insert makers into the template HTML to represent the position of\n  // bindings. The following code scans the template strings to determine the\n  // syntactic position of the bindings. They can be in text position, where\n  // we insert an HTML comment, attribute value position, where we insert a\n  // sentinel string and re-write the attribute name, or inside a tag where\n  // we insert the sentinel string.\n  const l = strings.length - 1;\n  // Stores the case-sensitive bound attribute names in the order of their\n  // parts. ElementParts are also reflected in this array as undefined\n  // rather than a string, to disambiguate from attribute bindings.\n  const attrNames: Array<string> = [];\n  let html =\n    type === SVG_RESULT ? '<svg>' : type === MATHML_RESULT ? '<math>' : '';\n\n  // When we're inside a raw text tag (not it's text content), the regex\n  // will still be tagRegex so we can find attributes, but will switch to\n  // this regex when the tag ends.\n  let rawTextEndRegex: RegExp | undefined;\n\n  // The current parsing state, represented as a reference to one of the\n  // regexes\n  let regex = textEndRegex;\n\n  for (let i = 0; i < l; i++) {\n    const s = strings[i];\n    // The index of the end of the last attribute name. When this is\n    // positive at end of a string, it means we're in an attribute value\n    // position and need to rewrite the attribute name.\n    // We also use a special value of -2 to indicate that we encountered\n    // the end of a string in attribute name position.\n    let attrNameEndIndex = -1;\n    let attrName: string | undefined;\n    let lastIndex = 0;\n    let match!: RegExpExecArray | null;\n\n    // The conditions in this loop handle the current parse state, and the\n    // assignments to the `regex` variable are the state transitions.\n    while (lastIndex < s.length) {\n      // Make sure we start searching from where we previously left off\n      regex.lastIndex = lastIndex;\n      match = regex.exec(s);\n      if (match === null) {\n        break;\n      }\n      lastIndex = regex.lastIndex;\n      if (regex === textEndRegex) {\n        if (match[COMMENT_START] === '!--') {\n          regex = commentEndRegex;\n        } else if (match[COMMENT_START] !== undefined) {\n          // We started a weird comment, like </{\n          regex = comment2EndRegex;\n        } else if (match[TAG_NAME] !== undefined) {\n          if (rawTextElement.test(match[TAG_NAME])) {\n            // Record if we encounter a raw-text element. We'll switch to\n            // this regex at the end of the tag.\n            rawTextEndRegex = new RegExp(`</${match[TAG_NAME]}`, 'g');\n          }\n          regex = tagEndRegex;\n        } else if (match[DYNAMIC_TAG_NAME] !== undefined) {\n          if (DEV_MODE) {\n            throw new Error(\n              'Bindings in tag names are not supported. Please use static templates instead. ' +\n                'See https://lit.dev/docs/templates/expressions/#static-expressions'\n            );\n          }\n          regex = tagEndRegex;\n        }\n      } else if (regex === tagEndRegex) {\n        if (match[ENTIRE_MATCH] === '>') {\n          // End of a tag. If we had started a raw-text element, use that\n          // regex\n          regex = rawTextEndRegex ?? textEndRegex;\n          // We may be ending an unquoted attribute value, so make sure we\n          // clear any pending attrNameEndIndex\n          attrNameEndIndex = -1;\n        } else if (match[ATTRIBUTE_NAME] === undefined) {\n          // Attribute name position\n          attrNameEndIndex = -2;\n        } else {\n          attrNameEndIndex = regex.lastIndex - match[SPACES_AND_EQUALS].length;\n          attrName = match[ATTRIBUTE_NAME];\n          regex =\n            match[QUOTE_CHAR] === undefined\n              ? tagEndRegex\n              : match[QUOTE_CHAR] === '\"'\n                ? doubleQuoteAttrEndRegex\n                : singleQuoteAttrEndRegex;\n        }\n      } else if (\n        regex === doubleQuoteAttrEndRegex ||\n        regex === singleQuoteAttrEndRegex\n      ) {\n        regex = tagEndRegex;\n      } else if (regex === commentEndRegex || regex === comment2EndRegex) {\n        regex = textEndRegex;\n      } else {\n        // Not one of the five state regexes, so it must be the dynamically\n        // created raw text regex and we're at the close of that element.\n        regex = tagEndRegex;\n        rawTextEndRegex = undefined;\n      }\n    }\n\n    if (DEV_MODE) {\n      // If we have a attrNameEndIndex, which indicates that we should\n      // rewrite the attribute name, assert that we're in a valid attribute\n      // position - either in a tag, or a quoted attribute value.\n      console.assert(\n        attrNameEndIndex === -1 ||\n          regex === tagEndRegex ||\n          regex === singleQuoteAttrEndRegex ||\n          regex === doubleQuoteAttrEndRegex,\n        'unexpected parse state B'\n      );\n    }\n\n    // We have four cases:\n    //  1. We're in text position, and not in a raw text element\n    //     (regex === textEndRegex): insert a comment marker.\n    //  2. We have a non-negative attrNameEndIndex which means we need to\n    //     rewrite the attribute name to add a bound attribute suffix.\n    //  3. We're at the non-first binding in a multi-binding attribute, use a\n    //     plain marker.\n    //  4. We're somewhere else inside the tag. If we're in attribute name\n    //     position (attrNameEndIndex === -2), add a sequential suffix to\n    //     generate a unique attribute name.\n\n    // Detect a binding next to self-closing tag end and insert a space to\n    // separate the marker from the tag end:\n    const end =\n      regex === tagEndRegex && strings[i + 1].startsWith('/>') ? ' ' : '';\n    html +=\n      regex === textEndRegex\n        ? s + nodeMarker\n        : attrNameEndIndex >= 0\n          ? (attrNames.push(attrName!),\n            s.slice(0, attrNameEndIndex) +\n              boundAttributeSuffix +\n              s.slice(attrNameEndIndex)) +\n            marker +\n            end\n          : s + marker + (attrNameEndIndex === -2 ? i : end);\n  }\n\n  const htmlResult: string | TrustedHTML =\n    html +\n    (strings[l] || '<?>') +\n    (type === SVG_RESULT ? '</svg>' : type === MATHML_RESULT ? '</math>' : '');\n\n  // Returned as an array for terseness\n  return [trustFromTemplateString(strings, htmlResult), attrNames];\n};\n\n/** @internal */\nexport type {Template};\nclass Template {\n  /** @internal */\n  el!: HTMLTemplateElement;\n\n  parts: Array<TemplatePart> = [];\n\n  constructor(\n    // This property needs to remain unminified.\n    {strings, ['_$litType$']: type}: UncompiledTemplateResult,\n    options?: RenderOptions\n  ) {\n    let node: Node | null;\n    let nodeIndex = 0;\n    let attrNameIndex = 0;\n    const partCount = strings.length - 1;\n    const parts = this.parts;\n\n    // Create template element\n    const [html, attrNames] = getTemplateHtml(strings, type);\n    this.el = Template.createElement(html, options);\n    walker.currentNode = this.el.content;\n\n    // Re-parent SVG or MathML nodes into template root\n    if (type === SVG_RESULT || type === MATHML_RESULT) {\n      const wrapper = this.el.content.firstChild!;\n      wrapper.replaceWith(...wrapper.childNodes);\n    }\n\n    // Walk the template to find binding markers and create TemplateParts\n    while ((node = walker.nextNode()) !== null && parts.length < partCount) {\n      if (node.nodeType === 1) {\n        if (DEV_MODE) {\n          const tag = (node as Element).localName;\n          // Warn if `textarea` includes an expression and throw if `template`\n          // does since these are not supported. We do this by checking\n          // innerHTML for anything that looks like a marker. This catches\n          // cases like bindings in textarea there markers turn into text nodes.\n          if (\n            /^(?:textarea|template)$/i!.test(tag) &&\n            (node as Element).innerHTML.includes(marker)\n          ) {\n            const m =\n              `Expressions are not supported inside \\`${tag}\\` ` +\n              `elements. See https://lit.dev/msg/expression-in-${tag} for more ` +\n              `information.`;\n            if (tag === 'template') {\n              throw new Error(m);\n            } else issueWarning('', m);\n          }\n        }\n        // TODO (justinfagnani): for attempted dynamic tag names, we don't\n        // increment the bindingIndex, and it'll be off by 1 in the element\n        // and off by two after it.\n        if ((node as Element).hasAttributes()) {\n          for (const name of (node as Element).getAttributeNames()) {\n            if (name.endsWith(boundAttributeSuffix)) {\n              const realName = attrNames[attrNameIndex++];\n              const value = (node as Element).getAttribute(name)!;\n              const statics = value.split(marker);\n              const m = /([.?@])?(.*)/.exec(realName)!;\n              parts.push({\n                type: ATTRIBUTE_PART,\n                index: nodeIndex,\n                name: m[2],\n                strings: statics,\n                ctor:\n                  m[1] === '.'\n                    ? PropertyPart\n                    : m[1] === '?'\n                      ? BooleanAttributePart\n                      : m[1] === '@'\n                        ? EventPart\n                        : AttributePart,\n              });\n              (node as Element).removeAttribute(name);\n            } else if (name.startsWith(marker)) {\n              parts.push({\n                type: ELEMENT_PART,\n                index: nodeIndex,\n              });\n              (node as Element).removeAttribute(name);\n            }\n          }\n        }\n        // TODO (justinfagnani): benchmark the regex against testing for each\n        // of the 3 raw text element names.\n        if (rawTextElement.test((node as Element).tagName)) {\n          // For raw text elements we need to split the text content on\n          // markers, create a Text node for each segment, and create\n          // a TemplatePart for each marker.\n          const strings = (node as Element).textContent!.split(marker);\n          const lastIndex = strings.length - 1;\n          if (lastIndex > 0) {\n            (node as Element).textContent = trustedTypes\n              ? (trustedTypes.emptyScript as unknown as '')\n              : '';\n            // Generate a new text node for each literal section\n            // These nodes are also used as the markers for node parts\n            // We can't use empty text nodes as markers because they're\n            // normalized when cloning in IE (could simplify when\n            // IE is no longer supported)\n            for (let i = 0; i < lastIndex; i++) {\n              (node as Element).append(strings[i], createMarker());\n              // Walk past the marker node we just added\n              walker.nextNode();\n              parts.push({type: CHILD_PART, index: ++nodeIndex});\n            }\n            // Note because this marker is added after the walker's current\n            // node, it will be walked to in the outer loop (and ignored), so\n            // we don't need to adjust nodeIndex here\n            (node as Element).append(strings[lastIndex], createMarker());\n          }\n        }\n      } else if (node.nodeType === 8) {\n        const data = (node as Comment).data;\n        if (data === markerMatch) {\n          parts.push({type: CHILD_PART, index: nodeIndex});\n        } else {\n          let i = -1;\n          while ((i = (node as Comment).data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            parts.push({type: COMMENT_PART, index: nodeIndex});\n            // Move to the end of the match\n            i += marker.length - 1;\n          }\n        }\n      }\n      nodeIndex++;\n    }\n\n    if (DEV_MODE) {\n      // If there was a duplicate attribute on a tag, then when the tag is\n      // parsed into an element the attribute gets de-duplicated. We can detect\n      // this mismatch if we haven't precisely consumed every attribute name\n      // when preparing the template. This works because `attrNames` is built\n      // from the template string and `attrNameIndex` comes from processing the\n      // resulting DOM.\n      if (attrNames.length !== attrNameIndex) {\n        throw new Error(\n          `Detected duplicate attribute bindings. This occurs if your template ` +\n            `has duplicate attributes on an element tag. For example ` +\n            `\"<input ?disabled=\\${true} ?disabled=\\${false}>\" contains a ` +\n            `duplicate \"disabled\" attribute. The error was detected in ` +\n            `the following template: \\n` +\n            '`' +\n            strings.join('${...}') +\n            '`'\n        );\n      }\n    }\n\n    // We could set walker.currentNode to another node here to prevent a memory\n    // leak, but every time we prepare a template, we immediately render it\n    // and re-use the walker in new TemplateInstance._clone().\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'template prep',\n        template: this,\n        clonableTemplate: this.el,\n        parts: this.parts,\n        strings,\n      });\n  }\n\n  // Overridden via `litHtmlPolyfillSupport` to provide platform support.\n  /** @nocollapse */\n  static createElement(html: TrustedHTML, _options?: RenderOptions) {\n    const el = d.createElement('template');\n    el.innerHTML = html as unknown as string;\n    return el;\n  }\n}\n\nexport interface Disconnectable {\n  _$parent?: Disconnectable;\n  _$disconnectableChildren?: Set<Disconnectable>;\n  // Rather than hold connection state on instances, Disconnectables recursively\n  // fetch the connection state from the RootPart they are connected in via\n  // getters up the Disconnectable tree via _$parent references. This pushes the\n  // cost of tracking the isConnected state to `AsyncDirectives`, and avoids\n  // needing to pass all Disconnectables (parts, template instances, and\n  // directives) their connection state each time it changes, which would be\n  // costly for trees that have no AsyncDirectives.\n  _$isConnected: boolean;\n}\n\nfunction resolveDirective(\n  part: ChildPart | AttributePart | ElementPart,\n  value: unknown,\n  parent: DirectiveParent = part,\n  attributeIndex?: number\n): unknown {\n  // Bail early if the value is explicitly noChange. Note, this means any\n  // nested directive is still attached and is not run.\n  if (value === noChange) {\n    return value;\n  }\n  let currentDirective =\n    attributeIndex !== undefined\n      ? (parent as AttributePart).__directives?.[attributeIndex]\n      : (parent as ChildPart | ElementPart | Directive).__directive;\n  const nextDirectiveConstructor = isPrimitive(value)\n    ? undefined\n    : // This property needs to remain unminified.\n      (value as DirectiveResult)['_$litDirective$'];\n  if (currentDirective?.constructor !== nextDirectiveConstructor) {\n    // This property needs to remain unminified.\n    currentDirective?.['_$notifyDirectiveConnectionChanged']?.(false);\n    if (nextDirectiveConstructor === undefined) {\n      currentDirective = undefined;\n    } else {\n      currentDirective = new nextDirectiveConstructor(part as PartInfo);\n      currentDirective._$initialize(part, parent, attributeIndex);\n    }\n    if (attributeIndex !== undefined) {\n      ((parent as AttributePart).__directives ??= [])[attributeIndex] =\n        currentDirective;\n    } else {\n      (parent as ChildPart | Directive).__directive = currentDirective;\n    }\n  }\n  if (currentDirective !== undefined) {\n    value = resolveDirective(\n      part,\n      currentDirective._$resolve(part, (value as DirectiveResult).values),\n      currentDirective,\n      attributeIndex\n    );\n  }\n  return value;\n}\n\nexport type {TemplateInstance};\n/**\n * An updateable instance of a Template. Holds references to the Parts used to\n * update the template instance.\n */\nclass TemplateInstance implements Disconnectable {\n  _$template: Template;\n  _$parts: Array<Part | undefined> = [];\n\n  /** @internal */\n  _$parent: ChildPart;\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  constructor(template: Template, parent: ChildPart) {\n    this._$template = template;\n    this._$parent = parent;\n  }\n\n  // Called by ChildPart parentNode getter\n  get parentNode() {\n    return this._$parent.parentNode;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  // This method is separate from the constructor because we need to return a\n  // DocumentFragment and we don't want to hold onto it with an instance field.\n  _clone(options: RenderOptions | undefined) {\n    const {\n      el: {content},\n      parts: parts,\n    } = this._$template;\n    const fragment = (options?.creationScope ?? d).importNode(content, true);\n    walker.currentNode = fragment;\n\n    let node = walker.nextNode()!;\n    let nodeIndex = 0;\n    let partIndex = 0;\n    let templatePart = parts[0];\n\n    while (templatePart !== undefined) {\n      if (nodeIndex === templatePart.index) {\n        let part: Part | undefined;\n        if (templatePart.type === CHILD_PART) {\n          part = new ChildPart(\n            node as HTMLElement,\n            node.nextSibling,\n            this,\n            options\n          );\n        } else if (templatePart.type === ATTRIBUTE_PART) {\n          part = new templatePart.ctor(\n            node as HTMLElement,\n            templatePart.name,\n            templatePart.strings,\n            this,\n            options\n          );\n        } else if (templatePart.type === ELEMENT_PART) {\n          part = new ElementPart(node as HTMLElement, this, options);\n        }\n        this._$parts.push(part);\n        templatePart = parts[++partIndex];\n      }\n      if (nodeIndex !== templatePart?.index) {\n        node = walker.nextNode()!;\n        nodeIndex++;\n      }\n    }\n    // We need to set the currentNode away from the cloned tree so that we\n    // don't hold onto the tree even if the tree is detached and should be\n    // freed.\n    walker.currentNode = d;\n    return fragment;\n  }\n\n  _update(values: Array<unknown>) {\n    let i = 0;\n    for (const part of this._$parts) {\n      if (part !== undefined) {\n        debugLogEvent &&\n          debugLogEvent({\n            kind: 'set part',\n            part,\n            value: values[i],\n            valueIndex: i,\n            values,\n            templateInstance: this,\n          });\n        if ((part as AttributePart).strings !== undefined) {\n          (part as AttributePart)._$setValue(values, part as AttributePart, i);\n          // The number of values the part consumes is part.strings.length - 1\n          // since values are in between template spans. We increment i by 1\n          // later in the loop, so increment it by part.strings.length - 2 here\n          i += (part as AttributePart).strings!.length - 2;\n        } else {\n          part._$setValue(values[i]);\n        }\n      }\n      i++;\n    }\n  }\n}\n\n/*\n * Parts\n */\ntype AttributeTemplatePart = {\n  readonly type: typeof ATTRIBUTE_PART;\n  readonly index: number;\n  readonly name: string;\n  readonly ctor: typeof AttributePart;\n  readonly strings: ReadonlyArray<string>;\n};\ntype ChildTemplatePart = {\n  readonly type: typeof CHILD_PART;\n  readonly index: number;\n};\ntype ElementTemplatePart = {\n  readonly type: typeof ELEMENT_PART;\n  readonly index: number;\n};\ntype CommentTemplatePart = {\n  readonly type: typeof COMMENT_PART;\n  readonly index: number;\n};\n\n/**\n * A TemplatePart represents a dynamic part in a template, before the template\n * is instantiated. When a template is instantiated Parts are created from\n * TemplateParts.\n */\ntype TemplatePart =\n  | ChildTemplatePart\n  | AttributeTemplatePart\n  | ElementTemplatePart\n  | CommentTemplatePart;\n\nexport type Part =\n  | ChildPart\n  | AttributePart\n  | PropertyPart\n  | BooleanAttributePart\n  | ElementPart\n  | EventPart;\n\nexport type {ChildPart};\nclass ChildPart implements Disconnectable {\n  readonly type = CHILD_PART;\n  readonly options: RenderOptions | undefined;\n  _$committedValue: unknown = nothing;\n  /** @internal */\n  __directive?: Directive;\n  /** @internal */\n  _$startNode: ChildNode;\n  /** @internal */\n  _$endNode: ChildNode | null;\n  private _textSanitizer: ValueSanitizer | undefined;\n  /** @internal */\n  _$parent: Disconnectable | undefined;\n  /**\n   * Connection state for RootParts only (i.e. ChildPart without _$parent\n   * returned from top-level `render`). This field is unused otherwise. The\n   * intention would be clearer if we made `RootPart` a subclass of `ChildPart`\n   * with this field (and a different _$isConnected getter), but the subclass\n   * caused a perf regression, possibly due to making call sites polymorphic.\n   * @internal\n   */\n  __isConnected: boolean;\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    // ChildParts that are not at the root should always be created with a\n    // parent; only RootChildNode's won't, so they return the local isConnected\n    // state\n    return this._$parent?._$isConnected ?? this.__isConnected;\n  }\n\n  // The following fields will be patched onto ChildParts when required by\n  // AsyncDirective\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n  /** @internal */\n  _$notifyConnectionChanged?(\n    isConnected: boolean,\n    removeFromParent?: boolean,\n    from?: number\n  ): void;\n  /** @internal */\n  _$reparentDisconnectables?(parent: Disconnectable): void;\n\n  constructor(\n    startNode: ChildNode,\n    endNode: ChildNode | null,\n    parent: TemplateInstance | ChildPart | undefined,\n    options: RenderOptions | undefined\n  ) {\n    this._$startNode = startNode;\n    this._$endNode = endNode;\n    this._$parent = parent;\n    this.options = options;\n    // Note __isConnected is only ever accessed on RootParts (i.e. when there is\n    // no _$parent); the value on a non-root-part is \"don't care\", but checking\n    // for parent would be more code\n    this.__isConnected = options?.isConnected ?? true;\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      // Explicitly initialize for consistent class shape.\n      this._textSanitizer = undefined;\n    }\n  }\n\n  /**\n   * The parent node into which the part renders its content.\n   *\n   * A ChildPart's content consists of a range of adjacent child nodes of\n   * `.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n   * `.endNode`).\n   *\n   * - If both `.startNode` and `.endNode` are non-null, then the part's content\n   * consists of all siblings between `.startNode` and `.endNode`, exclusively.\n   *\n   * - If `.startNode` is non-null but `.endNode` is null, then the part's\n   * content consists of all siblings following `.startNode`, up to and\n   * including the last child of `.parentNode`. If `.endNode` is non-null, then\n   * `.startNode` will always be non-null.\n   *\n   * - If both `.endNode` and `.startNode` are null, then the part's content\n   * consists of all child nodes of `.parentNode`.\n   */\n  get parentNode(): Node {\n    let parentNode: Node = wrap(this._$startNode).parentNode!;\n    const parent = this._$parent;\n    if (\n      parent !== undefined &&\n      parentNode?.nodeType === 11 /* Node.DOCUMENT_FRAGMENT */\n    ) {\n      // If the parentNode is a DocumentFragment, it may be because the DOM is\n      // still in the cloned fragment during initial render; if so, get the real\n      // parentNode the part will be committed into by asking the parent.\n      parentNode = (parent as ChildPart | TemplateInstance).parentNode;\n    }\n    return parentNode;\n  }\n\n  /**\n   * The part's leading marker node, if any. See `.parentNode` for more\n   * information.\n   */\n  get startNode(): Node | null {\n    return this._$startNode;\n  }\n\n  /**\n   * The part's trailing marker node, if any. See `.parentNode` for more\n   * information.\n   */\n  get endNode(): Node | null {\n    return this._$endNode;\n  }\n\n  _$setValue(value: unknown, directiveParent: DirectiveParent = this): void {\n    if (DEV_MODE && this.parentNode === null) {\n      throw new Error(\n        `This \\`ChildPart\\` has no \\`parentNode\\` and therefore cannot accept a value. This likely means the element containing the part was manipulated in an unsupported way outside of Lit's control such that the part's marker nodes were ejected from DOM. For example, setting the element's \\`innerHTML\\` or \\`textContent\\` can do this.`\n      );\n    }\n    value = resolveDirective(this, value, directiveParent);\n    if (isPrimitive(value)) {\n      // Non-rendering child values. It's important that these do not render\n      // empty text nodes to avoid issues with preventing default <slot>\n      // fallback content.\n      if (value === nothing || value == null || value === '') {\n        if (this._$committedValue !== nothing) {\n          debugLogEvent &&\n            debugLogEvent({\n              kind: 'commit nothing to child',\n              start: this._$startNode,\n              end: this._$endNode,\n              parent: this._$parent,\n              options: this.options,\n            });\n          this._$clear();\n        }\n        this._$committedValue = nothing;\n      } else if (value !== this._$committedValue && value !== noChange) {\n        this._commitText(value);\n      }\n      // This property needs to remain unminified.\n    } else if ((value as TemplateResult)['_$litType$'] !== undefined) {\n      this._commitTemplateResult(value as TemplateResult);\n    } else if ((value as Node).nodeType !== undefined) {\n      if (DEV_MODE && this.options?.host === value) {\n        this._commitText(\n          `[probable mistake: rendered a template's host in itself ` +\n            `(commonly caused by writing \\${this} in a template]`\n        );\n        console.warn(\n          `Attempted to render the template host`,\n          value,\n          `inside itself. This is almost always a mistake, and in dev mode `,\n          `we render some warning text. In production however, we'll `,\n          `render it, which will usually result in an error, and sometimes `,\n          `in the element disappearing from the DOM.`\n        );\n        return;\n      }\n      this._commitNode(value as Node);\n    } else if (isIterable(value)) {\n      this._commitIterable(value);\n    } else {\n      // Fallback, will render the string representation\n      this._commitText(value);\n    }\n  }\n\n  private _insert<T extends Node>(node: T) {\n    return wrap(wrap(this._$startNode).parentNode!).insertBefore(\n      node,\n      this._$endNode\n    );\n  }\n\n  private _commitNode(value: Node): void {\n    if (this._$committedValue !== value) {\n      this._$clear();\n      if (\n        ENABLE_EXTRA_SECURITY_HOOKS &&\n        sanitizerFactoryInternal !== noopSanitizer\n      ) {\n        const parentNodeName = this._$startNode.parentNode?.nodeName;\n        if (parentNodeName === 'STYLE' || parentNodeName === 'SCRIPT') {\n          let message = 'Forbidden';\n          if (DEV_MODE) {\n            if (parentNodeName === 'STYLE') {\n              message =\n                `Lit does not support binding inside style nodes. ` +\n                `This is a security risk, as style injection attacks can ` +\n                `exfiltrate data and spoof UIs. ` +\n                `Consider instead using css\\`...\\` literals ` +\n                `to compose styles, and do dynamic styling with ` +\n                `css custom properties, ::parts, <slot>s, ` +\n                `and by mutating the DOM rather than stylesheets.`;\n            } else {\n              message =\n                `Lit does not support binding inside script nodes. ` +\n                `This is a security risk, as it could allow arbitrary ` +\n                `code execution.`;\n            }\n          }\n          throw new Error(message);\n        }\n      }\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'commit node',\n          start: this._$startNode,\n          parent: this._$parent,\n          value: value,\n          options: this.options,\n        });\n      this._$committedValue = this._insert(value);\n    }\n  }\n\n  private _commitText(value: unknown): void {\n    // If the committed value is a primitive it means we called _commitText on\n    // the previous render, and we know that this._$startNode.nextSibling is a\n    // Text node. We can now just replace the text content (.data) of the node.\n    if (\n      this._$committedValue !== nothing &&\n      isPrimitive(this._$committedValue)\n    ) {\n      const node = wrap(this._$startNode).nextSibling as Text;\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        if (this._textSanitizer === undefined) {\n          this._textSanitizer = createSanitizer(node, 'data', 'property');\n        }\n        value = this._textSanitizer(value);\n      }\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'commit text',\n          node,\n          value,\n          options: this.options,\n        });\n      (node as Text).data = value as string;\n    } else {\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        const textNode = d.createTextNode('');\n        this._commitNode(textNode);\n        // When setting text content, for security purposes it matters a lot\n        // what the parent is. For example, <style> and <script> need to be\n        // handled with care, while <span> does not. So first we need to put a\n        // text node into the document, then we can sanitize its content.\n        if (this._textSanitizer === undefined) {\n          this._textSanitizer = createSanitizer(textNode, 'data', 'property');\n        }\n        value = this._textSanitizer(value);\n        debugLogEvent &&\n          debugLogEvent({\n            kind: 'commit text',\n            node: textNode,\n            value,\n            options: this.options,\n          });\n        textNode.data = value as string;\n      } else {\n        this._commitNode(d.createTextNode(value as string));\n        debugLogEvent &&\n          debugLogEvent({\n            kind: 'commit text',\n            node: wrap(this._$startNode).nextSibling as Text,\n            value,\n            options: this.options,\n          });\n      }\n    }\n    this._$committedValue = value;\n  }\n\n  private _commitTemplateResult(\n    result: TemplateResult | CompiledTemplateResult\n  ): void {\n    // This property needs to remain unminified.\n    const {values, ['_$litType$']: type} = result;\n    // If $litType$ is a number, result is a plain TemplateResult and we get\n    // the template from the template cache. If not, result is a\n    // CompiledTemplateResult and _$litType$ is a CompiledTemplate and we need\n    // to create the <template> element the first time we see it.\n    const template: Template | CompiledTemplate =\n      typeof type === 'number'\n        ? this._$getTemplate(result as UncompiledTemplateResult)\n        : (type.el === undefined &&\n            (type.el = Template.createElement(\n              trustFromTemplateString(type.h, type.h[0]),\n              this.options\n            )),\n          type);\n\n    if ((this._$committedValue as TemplateInstance)?._$template === template) {\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'template updating',\n          template,\n          instance: this._$committedValue as TemplateInstance,\n          parts: (this._$committedValue as TemplateInstance)._$parts,\n          options: this.options,\n          values,\n        });\n      (this._$committedValue as TemplateInstance)._update(values);\n    } else {\n      const instance = new TemplateInstance(template as Template, this);\n      const fragment = instance._clone(this.options);\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'template instantiated',\n          template,\n          instance,\n          parts: instance._$parts,\n          options: this.options,\n          fragment,\n          values,\n        });\n      instance._update(values);\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'template instantiated and updated',\n          template,\n          instance,\n          parts: instance._$parts,\n          options: this.options,\n          fragment,\n          values,\n        });\n      this._commitNode(fragment);\n      this._$committedValue = instance;\n    }\n  }\n\n  // Overridden via `litHtmlPolyfillSupport` to provide platform support.\n  /** @internal */\n  _$getTemplate(result: UncompiledTemplateResult) {\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n      templateCache.set(result.strings, (template = new Template(result)));\n    }\n    return template;\n  }\n\n  private _commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If value is an array, then the previous render was of an\n    // iterable and value will contain the ChildParts from the previous\n    // render. If value is not an array, clear this part and make a new\n    // array for ChildParts.\n    if (!isArray(this._$committedValue)) {\n      this._$committedValue = [];\n      this._$clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this._$committedValue as ChildPart[];\n    let partIndex = 0;\n    let itemPart: ChildPart | undefined;\n\n    for (const item of value) {\n      if (partIndex === itemParts.length) {\n        // If no existing part, create a new one\n        // TODO (justinfagnani): test perf impact of always creating two parts\n        // instead of sharing parts between nodes\n        // https://github.com/lit/lit/issues/1266\n        itemParts.push(\n          (itemPart = new ChildPart(\n            this._insert(createMarker()),\n            this._insert(createMarker()),\n            this,\n            this.options\n          ))\n        );\n      } else {\n        // Reuse an existing part\n        itemPart = itemParts[partIndex];\n      }\n      itemPart._$setValue(item);\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // itemParts always have end nodes\n      this._$clear(\n        itemPart && wrap(itemPart._$endNode!).nextSibling,\n        partIndex\n      );\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n    }\n  }\n\n  /**\n   * Removes the nodes contained within this Part from the DOM.\n   *\n   * @param start Start node to clear from, for clearing a subset of the part's\n   *     DOM (used when truncating iterables)\n   * @param from  When `start` is specified, the index within the iterable from\n   *     which ChildParts are being removed, used for disconnecting directives in\n   *     those Parts.\n   *\n   * @internal\n   */\n  _$clear(\n    start: ChildNode | null = wrap(this._$startNode).nextSibling,\n    from?: number\n  ) {\n    this._$notifyConnectionChanged?.(false, true, from);\n    while (start && start !== this._$endNode) {\n      const n = wrap(start!).nextSibling;\n      (wrap(start!) as Element).remove();\n      start = n;\n    }\n  }\n  /**\n   * Implementation of RootPart's `isConnected`. Note that this method\n   * should only be called on `RootPart`s (the `ChildPart` returned from a\n   * top-level `render()` call). It has no effect on non-root ChildParts.\n   * @param isConnected Whether to set\n   * @internal\n   */\n  setConnected(isConnected: boolean) {\n    if (this._$parent === undefined) {\n      this.__isConnected = isConnected;\n      this._$notifyConnectionChanged?.(isConnected);\n    } else if (DEV_MODE) {\n      throw new Error(\n        'part.setConnected() may only be called on a ' +\n          'RootPart returned from render().'\n      );\n    }\n  }\n}\n\n/**\n * A top-level `ChildPart` returned from `render` that manages the connected\n * state of `AsyncDirective`s created throughout the tree below it.\n */\nexport interface RootPart extends ChildPart {\n  /**\n   * Sets the connection state for `AsyncDirective`s contained within this root\n   * ChildPart.\n   *\n   * lit-html does not automatically monitor the connectedness of DOM rendered;\n   * as such, it is the responsibility of the caller to `render` to ensure that\n   * `part.setConnected(false)` is called before the part object is potentially\n   * discarded, to ensure that `AsyncDirective`s have a chance to dispose of\n   * any resources being held. If a `RootPart` that was previously\n   * disconnected is subsequently re-connected (and its `AsyncDirective`s should\n   * re-connect), `setConnected(true)` should be called.\n   *\n   * @param isConnected Whether directives within this tree should be connected\n   * or not\n   */\n  setConnected(isConnected: boolean): void;\n}\n\nexport type {AttributePart};\nclass AttributePart implements Disconnectable {\n  readonly type:\n    | typeof ATTRIBUTE_PART\n    | typeof PROPERTY_PART\n    | typeof BOOLEAN_ATTRIBUTE_PART\n    | typeof EVENT_PART = ATTRIBUTE_PART;\n  readonly element: HTMLElement;\n  readonly name: string;\n  readonly options: RenderOptions | undefined;\n\n  /**\n   * If this attribute part represents an interpolation, this contains the\n   * static strings of the interpolation. For single-value, complete bindings,\n   * this is undefined.\n   */\n  readonly strings?: ReadonlyArray<string>;\n  /** @internal */\n  _$committedValue: unknown | Array<unknown> = nothing;\n  /** @internal */\n  __directives?: Array<Directive | undefined>;\n  /** @internal */\n  _$parent: Disconnectable;\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  protected _sanitizer: ValueSanitizer | undefined;\n\n  get tagName() {\n    return this.element.tagName;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  constructor(\n    element: HTMLElement,\n    name: string,\n    strings: ReadonlyArray<string>,\n    parent: Disconnectable,\n    options: RenderOptions | undefined\n  ) {\n    this.element = element;\n    this.name = name;\n    this._$parent = parent;\n    this.options = options;\n    if (strings.length > 2 || strings[0] !== '' || strings[1] !== '') {\n      this._$committedValue = new Array(strings.length - 1).fill(new String());\n      this.strings = strings;\n    } else {\n      this._$committedValue = nothing;\n    }\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      this._sanitizer = undefined;\n    }\n  }\n\n  /**\n   * Sets the value of this part by resolving the value from possibly multiple\n   * values and static strings and committing it to the DOM.\n   * If this part is single-valued, `this._strings` will be undefined, and the\n   * method will be called with a single value argument. If this part is\n   * multi-value, `this._strings` will be defined, and the method is called\n   * with the value array of the part's owning TemplateInstance, and an offset\n   * into the value array from which the values should be read.\n   * This method is overloaded this way to eliminate short-lived array slices\n   * of the template instance values, and allow a fast-path for single-valued\n   * parts.\n   *\n   * @param value The part value, or an array of values for multi-valued parts\n   * @param valueIndex the index to start reading values from. `undefined` for\n   *   single-valued parts\n   * @param noCommit causes the part to not commit its value to the DOM. Used\n   *   in hydration to prime attribute parts with their first-rendered value,\n   *   but not set the attribute, and in SSR to no-op the DOM operation and\n   *   capture the value for serialization.\n   *\n   * @internal\n   */\n  _$setValue(\n    value: unknown | Array<unknown>,\n    directiveParent: DirectiveParent = this,\n    valueIndex?: number,\n    noCommit?: boolean\n  ) {\n    const strings = this.strings;\n\n    // Whether any of the values has changed, for dirty-checking\n    let change = false;\n\n    if (strings === undefined) {\n      // Single-value binding case\n      value = resolveDirective(this, value, directiveParent, 0);\n      change =\n        !isPrimitive(value) ||\n        (value !== this._$committedValue && value !== noChange);\n      if (change) {\n        this._$committedValue = value;\n      }\n    } else {\n      // Interpolation case\n      const values = value as Array<unknown>;\n      value = strings[0];\n\n      let i, v;\n      for (i = 0; i < strings.length - 1; i++) {\n        v = resolveDirective(this, values[valueIndex! + i], directiveParent, i);\n\n        if (v === noChange) {\n          // If the user-provided value is `noChange`, use the previous value\n          v = (this._$committedValue as Array<unknown>)[i];\n        }\n        change ||=\n          !isPrimitive(v) || v !== (this._$committedValue as Array<unknown>)[i];\n        if (v === nothing) {\n          value = nothing;\n        } else if (value !== nothing) {\n          value += (v ?? '') + strings[i + 1];\n        }\n        // We always record each value, even if one is `nothing`, for future\n        // change detection.\n        (this._$committedValue as Array<unknown>)[i] = v;\n      }\n    }\n    if (change && !noCommit) {\n      this._commitValue(value);\n    }\n  }\n\n  /** @internal */\n  _commitValue(value: unknown) {\n    if (value === nothing) {\n      (wrap(this.element) as Element).removeAttribute(this.name);\n    } else {\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        if (this._sanitizer === undefined) {\n          this._sanitizer = sanitizerFactoryInternal(\n            this.element,\n            this.name,\n            'attribute'\n          );\n        }\n        value = this._sanitizer(value ?? '');\n      }\n      debugLogEvent &&\n        debugLogEvent({\n          kind: 'commit attribute',\n          element: this.element,\n          name: this.name,\n          value,\n          options: this.options,\n        });\n      (wrap(this.element) as Element).setAttribute(\n        this.name,\n        (value ?? '') as string\n      );\n    }\n  }\n}\n\nexport type {PropertyPart};\nclass PropertyPart extends AttributePart {\n  override readonly type = PROPERTY_PART;\n\n  /** @internal */\n  override _commitValue(value: unknown) {\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      if (this._sanitizer === undefined) {\n        this._sanitizer = sanitizerFactoryInternal(\n          this.element,\n          this.name,\n          'property'\n        );\n      }\n      value = this._sanitizer(value);\n    }\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'commit property',\n        element: this.element,\n        name: this.name,\n        value,\n        options: this.options,\n      });\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.element as any)[this.name] = value === nothing ? undefined : value;\n  }\n}\n\nexport type {BooleanAttributePart};\nclass BooleanAttributePart extends AttributePart {\n  override readonly type = BOOLEAN_ATTRIBUTE_PART;\n\n  /** @internal */\n  override _commitValue(value: unknown) {\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'commit boolean attribute',\n        element: this.element,\n        name: this.name,\n        value: !!(value && value !== nothing),\n        options: this.options,\n      });\n    (wrap(this.element) as Element).toggleAttribute(\n      this.name,\n      !!value && value !== nothing\n    );\n  }\n}\n\ntype EventListenerWithOptions = EventListenerOrEventListenerObject &\n  Partial<AddEventListenerOptions>;\n\n/**\n * An AttributePart that manages an event listener via add/removeEventListener.\n *\n * This part works by adding itself as the event listener on an element, then\n * delegating to the value passed to it. This reduces the number of calls to\n * add/removeEventListener if the listener changes frequently, such as when an\n * inline function is used as a listener.\n *\n * Because event options are passed when adding listeners, we must take case\n * to add and remove the part as a listener when the event options change.\n */\nexport type {EventPart};\nclass EventPart extends AttributePart {\n  override readonly type = EVENT_PART;\n\n  constructor(\n    element: HTMLElement,\n    name: string,\n    strings: ReadonlyArray<string>,\n    parent: Disconnectable,\n    options: RenderOptions | undefined\n  ) {\n    super(element, name, strings, parent, options);\n\n    if (DEV_MODE && this.strings !== undefined) {\n      throw new Error(\n        `A \\`<${element.localName}>\\` has a \\`@${name}=...\\` listener with ` +\n          'invalid content. Event listeners in templates must have exactly ' +\n          'one expression and no surrounding text.'\n      );\n    }\n  }\n\n  // EventPart does not use the base _$setValue/_resolveValue implementation\n  // since the dirty checking is more complex\n  /** @internal */\n  override _$setValue(\n    newListener: unknown,\n    directiveParent: DirectiveParent = this\n  ) {\n    newListener =\n      resolveDirective(this, newListener, directiveParent, 0) ?? nothing;\n    if (newListener === noChange) {\n      return;\n    }\n    const oldListener = this._$committedValue;\n\n    // If the new value is nothing or any options change we have to remove the\n    // part as a listener.\n    const shouldRemoveListener =\n      (newListener === nothing && oldListener !== nothing) ||\n      (newListener as EventListenerWithOptions).capture !==\n        (oldListener as EventListenerWithOptions).capture ||\n      (newListener as EventListenerWithOptions).once !==\n        (oldListener as EventListenerWithOptions).once ||\n      (newListener as EventListenerWithOptions).passive !==\n        (oldListener as EventListenerWithOptions).passive;\n\n    // If the new value is not nothing and we removed the listener, we have\n    // to add the part as a listener.\n    const shouldAddListener =\n      newListener !== nothing &&\n      (oldListener === nothing || shouldRemoveListener);\n\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'commit event listener',\n        element: this.element,\n        name: this.name,\n        value: newListener,\n        options: this.options,\n        removeListener: shouldRemoveListener,\n        addListener: shouldAddListener,\n        oldListener,\n      });\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n        this.name,\n        this,\n        oldListener as EventListenerWithOptions\n      );\n    }\n    if (shouldAddListener) {\n      // Beware: IE11 and Chrome 41 don't like using the listener as the\n      // options object. Figure out how to deal w/ this in IE11 - maybe\n      // patch addEventListener?\n      this.element.addEventListener(\n        this.name,\n        this,\n        newListener as EventListenerWithOptions\n      );\n    }\n    this._$committedValue = newListener;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this._$committedValue === 'function') {\n      this._$committedValue.call(this.options?.host ?? this.element, event);\n    } else {\n      (this._$committedValue as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\nexport type {ElementPart};\nclass ElementPart implements Disconnectable {\n  readonly type = ELEMENT_PART;\n\n  /** @internal */\n  __directive?: Directive;\n\n  // This is to ensure that every Part has a _$committedValue\n  _$committedValue: undefined;\n\n  /** @internal */\n  _$parent!: Disconnectable;\n\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  options: RenderOptions | undefined;\n\n  constructor(\n    public element: Element,\n    parent: Disconnectable,\n    options: RenderOptions | undefined\n  ) {\n    this._$parent = parent;\n    this.options = options;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  _$setValue(value: unknown): void {\n    debugLogEvent &&\n      debugLogEvent({\n        kind: 'commit to element binding',\n        element: this.element,\n        value,\n        options: this.options,\n      });\n    resolveDirective(this, value);\n  }\n}\n\n/**\n * END USERS SHOULD NOT RELY ON THIS OBJECT.\n *\n * Private exports for use by other Lit packages, not intended for use by\n * external users.\n *\n * We currently do not make a mangled rollup build of the lit-ssr code. In order\n * to keep a number of (otherwise private) top-level exports mangled in the\n * client side code, we export a _$LH object containing those members (or\n * helper methods for accessing private fields of those members), and then\n * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\n * client-side code is being used in `dev` mode or `prod` mode.\n *\n * This has a unique name, to disambiguate it from private exports in\n * lit-element, which re-exports all of lit-html.\n *\n * @private\n */\nexport const _$LH = {\n  // Used in lit-ssr\n  _boundAttributeSuffix: boundAttributeSuffix,\n  _marker: marker,\n  _markerMatch: markerMatch,\n  _HTML_RESULT: HTML_RESULT,\n  _getTemplateHtml: getTemplateHtml,\n  // Used in tests and private-ssr-support\n  _TemplateInstance: TemplateInstance,\n  _isIterable: isIterable,\n  _resolveDirective: resolveDirective,\n  _ChildPart: ChildPart,\n  _AttributePart: AttributePart,\n  _BooleanAttributePart: BooleanAttributePart,\n  _EventPart: EventPart,\n  _PropertyPart: PropertyPart,\n  _ElementPart: ElementPart,\n};\n\n// Apply polyfills if available\nconst polyfillSupport = DEV_MODE\n  ? global.litHtmlPolyfillSupportDevMode\n  : global.litHtmlPolyfillSupport;\npolyfillSupport?.(Template, ChildPart);\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n(global.litHtmlVersions ??= []).push('3.2.1');\nif (DEV_MODE && global.litHtmlVersions.length > 1) {\n  issueWarning!(\n    'multiple-versions',\n    `Multiple versions of Lit loaded. ` +\n      `Loading multiple versions is not recommended.`\n  );\n}\n\n/**\n * Renders a value, usually a lit-html TemplateResult, to the container.\n *\n * This example renders the text \"Hello, Zoe!\" inside a paragraph tag, appending\n * it to the container `document.body`.\n *\n * ```js\n * import {html, render} from 'lit';\n *\n * const name = \"Zoe\";\n * render(html`<p>Hello, ${name}!</p>`, document.body);\n * ```\n *\n * @param value Any [renderable\n *   value](https://lit.dev/docs/templates/expressions/#child-expressions),\n *   typically a {@linkcode TemplateResult} created by evaluating a template tag\n *   like {@linkcode html} or {@linkcode svg}.\n * @param container A DOM container to render to. The first render will append\n *   the rendered value to the container, and subsequent renders will\n *   efficiently update the rendered value if the same result type was\n *   previously rendered there.\n * @param options See {@linkcode RenderOptions} for options documentation.\n * @see\n * {@link https://lit.dev/docs/libraries/standalone-templates/#rendering-lit-html-templates| Rendering Lit HTML Templates}\n */\nexport const render = (\n  value: unknown,\n  container: HTMLElement | DocumentFragment,\n  options?: RenderOptions\n): RootPart => {\n  if (DEV_MODE && container == null) {\n    // Give a clearer error message than\n    //     Uncaught TypeError: Cannot read properties of null (reading\n    //     '_$litPart$')\n    // which reads like an internal Lit error.\n    throw new TypeError(`The container to render into may not be ${container}`);\n  }\n  const renderId = DEV_MODE ? debugLogRenderId++ : 0;\n  const partOwnerNode = options?.renderBefore ?? container;\n  // This property needs to remain unminified.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let part: ChildPart = (partOwnerNode as any)['_$litPart$'];\n  debugLogEvent &&\n    debugLogEvent({\n      kind: 'begin render',\n      id: renderId,\n      value,\n      container,\n      options,\n      part,\n    });\n  if (part === undefined) {\n    const endNode = options?.renderBefore ?? null;\n    // This property needs to remain unminified.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (partOwnerNode as any)['_$litPart$'] = part = new ChildPart(\n      container.insertBefore(createMarker(), endNode),\n      endNode,\n      undefined,\n      options ?? {}\n    );\n  }\n  part._$setValue(value);\n  debugLogEvent &&\n    debugLogEvent({\n      kind: 'end render',\n      id: renderId,\n      value,\n      container,\n      options,\n      part,\n    });\n  return part as RootPart;\n};\n\nif (ENABLE_EXTRA_SECURITY_HOOKS) {\n  render.setSanitizer = setSanitizer;\n  render.createSanitizer = createSanitizer;\n  if (DEV_MODE) {\n    render._testOnlyClearSanitizerFactoryDoNotCallOrElse =\n      _testOnlyClearSanitizerFactoryDoNotCallOrElse;\n  }\n}\n","import{noChange as e}from\"../lit-html.js\";import{directive as s,Directive as t,PartType as r}from\"../directive.js\";import{getCommittedValue as l,setChildPartValue as o,insertPart as i,removePart as n,setCommittedValue as f}from\"../directive-helpers.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst u=(e,s,t)=>{const r=new Map;for(let l=s;l<=t;l++)r.set(e[l],l);return r},c=s(class extends t{constructor(e){if(super(e),e.type!==r.CHILD)throw Error(\"repeat() can only be used in text expressions\")}dt(e,s,t){let r;void 0===t?t=s:void 0!==s&&(r=s);const l=[],o=[];let i=0;for(const s of e)l[i]=r?r(s,i):i,o[i]=t(s,i),i++;return{values:o,keys:l}}render(e,s,t){return this.dt(e,s,t).values}update(s,[t,r,c]){const d=l(s),{values:p,keys:a}=this.dt(t,r,c);if(!Array.isArray(d))return this.ut=a,p;const h=this.ut??=[],v=[];let m,y,x=0,j=d.length-1,k=0,w=p.length-1;for(;x<=j&&k<=w;)if(null===d[x])x++;else if(null===d[j])j--;else if(h[x]===a[k])v[k]=o(d[x],p[k]),x++,k++;else if(h[j]===a[w])v[w]=o(d[j],p[w]),j--,w--;else if(h[x]===a[w])v[w]=o(d[x],p[w]),i(s,v[w+1],d[x]),x++,w--;else if(h[j]===a[k])v[k]=o(d[j],p[k]),i(s,d[x],d[j]),j--,k++;else if(void 0===m&&(m=u(a,k,w),y=u(h,x,j)),m.has(h[x]))if(m.has(h[j])){const e=y.get(a[k]),t=void 0!==e?d[e]:null;if(null===t){const e=i(s,d[x]);o(e,p[k]),v[k]=e}else v[k]=o(t,p[k]),i(s,d[x],t),d[e]=null;k++}else n(d[j]),j--;else n(d[x]),x++;for(;k<=w;){const e=i(s,v[w+1]);o(e,p[k]),v[k++]=e}for(;x<=j;){const e=d[x++];null!==e&&n(e)}return this.ut=a,f(s,v),e}});export{c as repeat};\n//# sourceMappingURL=repeat.js.map\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ChildPart, noChange} from '../lit-html.js';\nimport {directive, Directive, PartInfo, PartType} from '../directive.js';\nimport {\n  insertPart,\n  getCommittedValue,\n  removePart,\n  setCommittedValue,\n  setChildPartValue,\n} from '../directive-helpers.js';\n\nexport type KeyFn<T> = (item: T, index: number) => unknown;\nexport type ItemTemplate<T> = (item: T, index: number) => unknown;\n\n// Helper for generating a map of array item to its index over a subset\n// of an array (used to lazily generate `newKeyToIndexMap` and\n// `oldKeyToIndexMap`)\nconst generateMap = (list: unknown[], start: number, end: number) => {\n  const map = new Map<unknown, number>();\n  for (let i = start; i <= end; i++) {\n    map.set(list[i], i);\n  }\n  return map;\n};\n\nclass RepeatDirective extends Directive {\n  private _itemKeys?: unknown[];\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (partInfo.type !== PartType.CHILD) {\n      throw new Error('repeat() can only be used in text expressions');\n    }\n  }\n\n  private _getValuesAndKeys<T>(\n    items: Iterable<T>,\n    keyFnOrTemplate: KeyFn<T> | ItemTemplate<T>,\n    template?: ItemTemplate<T>\n  ) {\n    let keyFn: KeyFn<T> | undefined;\n    if (template === undefined) {\n      template = keyFnOrTemplate;\n    } else if (keyFnOrTemplate !== undefined) {\n      keyFn = keyFnOrTemplate as KeyFn<T>;\n    }\n    const keys = [];\n    const values = [];\n    let index = 0;\n    for (const item of items) {\n      keys[index] = keyFn ? keyFn(item, index) : index;\n      values[index] = template!(item, index);\n      index++;\n    }\n    return {\n      values,\n      keys,\n    };\n  }\n\n  render<T>(items: Iterable<T>, template: ItemTemplate<T>): Array<unknown>;\n  render<T>(\n    items: Iterable<T>,\n    keyFn: KeyFn<T> | ItemTemplate<T>,\n    template: ItemTemplate<T>\n  ): Array<unknown>;\n  render<T>(\n    items: Iterable<T>,\n    keyFnOrTemplate: KeyFn<T> | ItemTemplate<T>,\n    template?: ItemTemplate<T>\n  ) {\n    return this._getValuesAndKeys(items, keyFnOrTemplate, template).values;\n  }\n\n  override update<T>(\n    containerPart: ChildPart,\n    [items, keyFnOrTemplate, template]: [\n      Iterable<T>,\n      KeyFn<T> | ItemTemplate<T>,\n      ItemTemplate<T>,\n    ]\n  ) {\n    // Old part & key lists are retrieved from the last update (which may\n    // be primed by hydration)\n    const oldParts = getCommittedValue(\n      containerPart\n    ) as Array<ChildPart | null>;\n    const {values: newValues, keys: newKeys} = this._getValuesAndKeys(\n      items,\n      keyFnOrTemplate,\n      template\n    );\n\n    // We check that oldParts, the committed value, is an Array as an\n    // indicator that the previous value came from a repeat() call. If\n    // oldParts is not an Array then this is the first render and we return\n    // an array for lit-html's array handling to render, and remember the\n    // keys.\n    if (!Array.isArray(oldParts)) {\n      this._itemKeys = newKeys;\n      return newValues;\n    }\n\n    // In SSR hydration it's possible for oldParts to be an array but for us\n    // to not have item keys because the update() hasn't run yet. We set the\n    // keys to an empty array. This will cause all oldKey/newKey comparisons\n    // to fail and execution to fall to the last nested brach below which\n    // reuses the oldPart.\n    const oldKeys = (this._itemKeys ??= []);\n\n    // New part list will be built up as we go (either reused from\n    // old parts or created for new keys in this update). This is\n    // saved in the above cache at the end of the update.\n    const newParts: ChildPart[] = [];\n\n    // Maps from key to index for current and previous update; these\n    // are generated lazily only when needed as a performance\n    // optimization, since they are only required for multiple\n    // non-contiguous changes in the list, which are less common.\n    let newKeyToIndexMap!: Map<unknown, number>;\n    let oldKeyToIndexMap!: Map<unknown, number>;\n\n    // Head and tail pointers to old parts and new values\n    let oldHead = 0;\n    let oldTail = oldParts.length - 1;\n    let newHead = 0;\n    let newTail = newValues.length - 1;\n\n    // Overview of O(n) reconciliation algorithm (general approach\n    // based on ideas found in ivi, vue, snabbdom, etc.):\n    //\n    // * We start with the list of old parts and new values (and\n    //   arrays of their respective keys), head/tail pointers into\n    //   each, and we build up the new list of parts by updating\n    //   (and when needed, moving) old parts or creating new ones.\n    //   The initial scenario might look like this (for brevity of\n    //   the diagrams, the numbers in the array reflect keys\n    //   associated with the old parts or new values, although keys\n    //   and parts/values are actually stored in parallel arrays\n    //   indexed using the same head/tail pointers):\n    //\n    //      oldHead v                 v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [ ,  ,  ,  ,  ,  ,  ]\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6] <- reflects the user's new\n    //                                      item order\n    //      newHead ^                 ^ newTail\n    //\n    // * Iterate old & new lists from both sides, updating,\n    //   swapping, or removing parts at the head/tail locations\n    //   until neither head nor tail can move.\n    //\n    // * Example below: keys at head pointers match, so update old\n    //   part 0 in-place (no need to move it) and record part 0 in\n    //   the `newParts` list. The last thing we do is advance the\n    //   `oldHead` and `newHead` pointers (will be reflected in the\n    //   next diagram).\n    //\n    //      oldHead v                 v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [0,  ,  ,  ,  ,  ,  ] <- heads matched: update 0\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n    //                                      & newHead\n    //      newHead ^                 ^ newTail\n    //\n    // * Example below: head pointers don't match, but tail\n    //   pointers do, so update part 6 in place (no need to move\n    //   it), and record part 6 in the `newParts` list. Last,\n    //   advance the `oldTail` and `oldHead` pointers.\n    //\n    //         oldHead v              v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [0,  ,  ,  ,  ,  , 6] <- tails matched: update 6\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldTail\n    //                                      & newTail\n    //         newHead ^              ^ newTail\n    //\n    // * If neither head nor tail match; next check if one of the\n    //   old head/tail items was removed. We first need to generate\n    //   the reverse map of new keys to index (`newKeyToIndexMap`),\n    //   which is done once lazily as a performance optimization,\n    //   since we only hit this case if multiple non-contiguous\n    //   changes were made. Note that for contiguous removal\n    //   anywhere in the list, the head and tails would advance\n    //   from either end and pass each other before we get to this\n    //   case and removals would be handled in the final while loop\n    //   without needing to generate the map.\n    //\n    // * Example below: The key at `oldTail` was removed (no longer\n    //   in the `newKeyToIndexMap`), so remove that part from the\n    //   DOM and advance just the `oldTail` pointer.\n    //\n    //         oldHead v           v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [0,  ,  ,  ,  ,  , 6] <- 5 not in new map: remove\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    5 and advance oldTail\n    //         newHead ^           ^ newTail\n    //\n    // * Once head and tail cannot move, any mismatches are due to\n    //   either new or moved items; if a new key is in the previous\n    //   \"old key to old index\" map, move the old part to the new\n    //   location, otherwise create and insert a new part. Note\n    //   that when moving an old part we null its position in the\n    //   oldParts array if it lies between the head and tail so we\n    //   know to skip it when the pointers get there.\n    //\n    // * Example below: neither head nor tail match, and neither\n    //   were removed; so find the `newHead` key in the\n    //   `oldKeyToIndexMap`, and move that old part's DOM into the\n    //   next head position (before `oldParts[oldHead]`). Last,\n    //   null the part in the `oldPart` array since it was\n    //   somewhere in the remaining oldParts still to be scanned\n    //   (between the head and tail pointers) so that we know to\n    //   skip that old part on future iterations.\n    //\n    //         oldHead v        v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2,  ,  ,  ,  , 6] <- stuck: update & move 2\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    into place and advance\n    //                                      newHead\n    //         newHead ^           ^ newTail\n    //\n    // * Note that for moves/insertions like the one above, a part\n    //   inserted at the head pointer is inserted before the\n    //   current `oldParts[oldHead]`, and a part inserted at the\n    //   tail pointer is inserted before `newParts[newTail+1]`. The\n    //   seeming asymmetry lies in the fact that new parts are\n    //   moved into place outside in, so to the right of the head\n    //   pointer are old parts, and to the right of the tail\n    //   pointer are new parts.\n    //\n    // * We always restart back from the top of the algorithm,\n    //   allowing matching and simple updates in place to\n    //   continue...\n    //\n    // * Example below: the head pointers once again match, so\n    //   simply update part 1 and record it in the `newParts`\n    //   array.  Last, advance both head pointers.\n    //\n    //         oldHead v        v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1,  ,  ,  , 6] <- heads matched: update 1\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n    //                                      & newHead\n    //            newHead ^        ^ newTail\n    //\n    // * As mentioned above, items that were moved as a result of\n    //   being stuck (the final else clause in the code below) are\n    //   marked with null, so we always advance old pointers over\n    //   these so we're comparing the next actual old value on\n    //   either end.\n    //\n    // * Example below: `oldHead` is null (already placed in\n    //   newParts), so advance `oldHead`.\n    //\n    //            oldHead v     v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6] <- old head already used:\n    //   newParts: [0, 2, 1,  ,  ,  , 6]    advance oldHead\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n    //               newHead ^     ^ newTail\n    //\n    // * Note it's not critical to mark old parts as null when they\n    //   are moved from head to tail or tail to head, since they\n    //   will be outside the pointer range and never visited again.\n    //\n    // * Example below: Here the old tail key matches the new head\n    //   key, so the part at the `oldTail` position and move its\n    //   DOM to the new head position (before `oldParts[oldHead]`).\n    //   Last, advance `oldTail` and `newHead` pointers.\n    //\n    //               oldHead v  v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1, 4,  ,  , 6] <- old tail matches new\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]   head: update & move 4,\n    //                                     advance oldTail & newHead\n    //               newHead ^     ^ newTail\n    //\n    // * Example below: Old and new head keys match, so update the\n    //   old head part in place, and advance the `oldHead` and\n    //   `newHead` pointers.\n    //\n    //               oldHead v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1, 4, 3,   ,6] <- heads match: update 3\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance oldHead &\n    //                                      newHead\n    //                  newHead ^  ^ newTail\n    //\n    // * Once the new or old pointers move past each other then all\n    //   we have left is additions (if old list exhausted) or\n    //   removals (if new list exhausted). Those are handled in the\n    //   final while loops at the end.\n    //\n    // * Example below: `oldHead` exceeded `oldTail`, so we're done\n    //   with the main loop.  Create the remaining part and insert\n    //   it at the new head position, and the update is complete.\n    //\n    //                   (oldHead > oldTail)\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1, 4, 3, 7 ,6] <- create and insert 7\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n    //                     newHead ^ newTail\n    //\n    // * Note that the order of the if/else clauses is not\n    //   important to the algorithm, as long as the null checks\n    //   come first (to ensure we're always working on valid old\n    //   parts) and that the final else clause comes last (since\n    //   that's where the expensive moves occur). The order of\n    //   remaining clauses is just a simple guess at which cases\n    //   will be most common.\n    //\n    // * Note, we could calculate the longest\n    //   increasing subsequence (LIS) of old items in new position,\n    //   and only move those not in the LIS set. However that costs\n    //   O(nlogn) time and adds a bit more code, and only helps\n    //   make rare types of mutations require fewer moves. The\n    //   above handles removes, adds, reversal, swaps, and single\n    //   moves of contiguous items in linear time, in the minimum\n    //   number of moves. As the number of multiple moves where LIS\n    //   might help approaches a random shuffle, the LIS\n    //   optimization becomes less helpful, so it seems not worth\n    //   the code at this point. Could reconsider if a compelling\n    //   case arises.\n\n    while (oldHead <= oldTail && newHead <= newTail) {\n      if (oldParts[oldHead] === null) {\n        // `null` means old part at head has already been used\n        // below; skip\n        oldHead++;\n      } else if (oldParts[oldTail] === null) {\n        // `null` means old part at tail has already been used\n        // below; skip\n        oldTail--;\n      } else if (oldKeys[oldHead] === newKeys[newHead]) {\n        // Old head matches new head; update in place\n        newParts[newHead] = setChildPartValue(\n          oldParts[oldHead]!,\n          newValues[newHead]\n        );\n        oldHead++;\n        newHead++;\n      } else if (oldKeys[oldTail] === newKeys[newTail]) {\n        // Old tail matches new tail; update in place\n        newParts[newTail] = setChildPartValue(\n          oldParts[oldTail]!,\n          newValues[newTail]\n        );\n        oldTail--;\n        newTail--;\n      } else if (oldKeys[oldHead] === newKeys[newTail]) {\n        // Old head matches new tail; update and move to new tail\n        newParts[newTail] = setChildPartValue(\n          oldParts[oldHead]!,\n          newValues[newTail]\n        );\n        insertPart(containerPart, newParts[newTail + 1], oldParts[oldHead]!);\n        oldHead++;\n        newTail--;\n      } else if (oldKeys[oldTail] === newKeys[newHead]) {\n        // Old tail matches new head; update and move to new head\n        newParts[newHead] = setChildPartValue(\n          oldParts[oldTail]!,\n          newValues[newHead]\n        );\n        insertPart(containerPart, oldParts[oldHead]!, oldParts[oldTail]!);\n        oldTail--;\n        newHead++;\n      } else {\n        if (newKeyToIndexMap === undefined) {\n          // Lazily generate key-to-index maps, used for removals &\n          // moves below\n          newKeyToIndexMap = generateMap(newKeys, newHead, newTail);\n          oldKeyToIndexMap = generateMap(oldKeys, oldHead, oldTail);\n        }\n        if (!newKeyToIndexMap.has(oldKeys[oldHead])) {\n          // Old head is no longer in new list; remove\n          removePart(oldParts[oldHead]!);\n          oldHead++;\n        } else if (!newKeyToIndexMap.has(oldKeys[oldTail])) {\n          // Old tail is no longer in new list; remove\n          removePart(oldParts[oldTail]!);\n          oldTail--;\n        } else {\n          // Any mismatches at this point are due to additions or\n          // moves; see if we have an old part we can reuse and move\n          // into place\n          const oldIndex = oldKeyToIndexMap.get(newKeys[newHead]);\n          const oldPart = oldIndex !== undefined ? oldParts[oldIndex] : null;\n          if (oldPart === null) {\n            // No old part for this value; create a new one and\n            // insert it\n            const newPart = insertPart(containerPart, oldParts[oldHead]!);\n            setChildPartValue(newPart, newValues[newHead]);\n            newParts[newHead] = newPart;\n          } else {\n            // Reuse old part\n            newParts[newHead] = setChildPartValue(oldPart, newValues[newHead]);\n            insertPart(containerPart, oldParts[oldHead]!, oldPart);\n            // This marks the old part as having been used, so that\n            // it will be skipped in the first two checks above\n            oldParts[oldIndex as number] = null;\n          }\n          newHead++;\n        }\n      }\n    }\n    // Add parts for any remaining new values\n    while (newHead <= newTail) {\n      // For all remaining additions, we insert before last new\n      // tail, since old pointers are no longer valid\n      const newPart = insertPart(containerPart, newParts[newTail + 1]);\n      setChildPartValue(newPart, newValues[newHead]);\n      newParts[newHead++] = newPart;\n    }\n    // Remove any remaining unused old parts\n    while (oldHead <= oldTail) {\n      const oldPart = oldParts[oldHead++];\n      if (oldPart !== null) {\n        removePart(oldPart);\n      }\n    }\n\n    // Save order of new parts for next round\n    this._itemKeys = newKeys;\n    // Directly set part value, bypassing it's dirty-checking\n    setCommittedValue(containerPart, newParts);\n    return noChange;\n  }\n}\n\nexport interface RepeatDirectiveFn {\n  <T>(\n    items: Iterable<T>,\n    keyFnOrTemplate: KeyFn<T> | ItemTemplate<T>,\n    template?: ItemTemplate<T>\n  ): unknown;\n  <T>(items: Iterable<T>, template: ItemTemplate<T>): unknown;\n  <T>(\n    items: Iterable<T>,\n    keyFn: KeyFn<T> | ItemTemplate<T>,\n    template: ItemTemplate<T>\n  ): unknown;\n}\n\n/**\n * A directive that repeats a series of values (usually `TemplateResults`)\n * generated from an iterable, and updates those items efficiently when the\n * iterable changes based on user-provided `keys` associated with each item.\n *\n * Note that if a `keyFn` is provided, strict key-to-DOM mapping is maintained,\n * meaning previous DOM for a given key is moved into the new position if\n * needed, and DOM will never be reused with values for different keys (new DOM\n * will always be created for new keys). This is generally the most efficient\n * way to use `repeat` since it performs minimum unnecessary work for insertions\n * and removals.\n *\n * The `keyFn` takes two parameters, the item and its index, and returns a unique key value.\n *\n * ```js\n * html`\n *   <ol>\n *     ${repeat(this.items, (item) => item.id, (item, index) => {\n *       return html`<li>${index}: ${item.name}</li>`;\n *     })}\n *   </ol>\n * `\n * ```\n *\n * **Important**: If providing a `keyFn`, keys *must* be unique for all items in a\n * given call to `repeat`. The behavior when two or more items have the same key\n * is undefined.\n *\n * If no `keyFn` is provided, this directive will perform similar to mapping\n * items to values, and DOM will be reused against potentially different items.\n */\nexport const repeat = directive(RepeatDirective) as RepeatDirectiveFn;\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {RepeatDirective};\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst t={ATTRIBUTE:1,CHILD:2,PROPERTY:3,BOOLEAN_ATTRIBUTE:4,EVENT:5,ELEMENT:6},e=t=>(...e)=>({_$litDirective$:t,values:e});class i{constructor(t){}get _$AU(){return this._$AM._$AU}_$AT(t,e,i){this._$Ct=t,this._$AM=e,this._$Ci=i}_$AS(t,e){return this.update(t,e)}update(t,e){return this.render(...e)}}export{i as Directive,t as PartType,e as directive};\n//# sourceMappingURL=directive.js.map\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {Disconnectable, Part} from './lit-html.js';\n\nexport {\n  AttributePart,\n  BooleanAttributePart,\n  ChildPart,\n  ElementPart,\n  EventPart,\n  Part,\n  PropertyPart,\n} from './lit-html.js';\n\nexport interface DirectiveClass {\n  new (part: PartInfo): Directive;\n}\n\n/**\n * This utility type extracts the signature of a directive class's render()\n * method so we can use it for the type of the generated directive function.\n */\nexport type DirectiveParameters<C extends Directive> = Parameters<C['render']>;\n\n/**\n * A generated directive function doesn't evaluate the directive, but just\n * returns a DirectiveResult object that captures the arguments.\n */\nexport interface DirectiveResult<C extends DirectiveClass = DirectiveClass> {\n  /**\n   * This property needs to remain unminified.\n   * @internal\n   */\n  ['_$litDirective$']: C;\n  /** @internal */\n  values: DirectiveParameters<InstanceType<C>>;\n}\n\nexport const PartType = {\n  ATTRIBUTE: 1,\n  CHILD: 2,\n  PROPERTY: 3,\n  BOOLEAN_ATTRIBUTE: 4,\n  EVENT: 5,\n  ELEMENT: 6,\n} as const;\n\nexport type PartType = (typeof PartType)[keyof typeof PartType];\n\nexport interface ChildPartInfo {\n  readonly type: typeof PartType.CHILD;\n}\n\nexport interface AttributePartInfo {\n  readonly type:\n    | typeof PartType.ATTRIBUTE\n    | typeof PartType.PROPERTY\n    | typeof PartType.BOOLEAN_ATTRIBUTE\n    | typeof PartType.EVENT;\n  readonly strings?: ReadonlyArray<string>;\n  readonly name: string;\n  readonly tagName: string;\n}\n\nexport interface ElementPartInfo {\n  readonly type: typeof PartType.ELEMENT;\n}\n\n/**\n * Information about the part a directive is bound to.\n *\n * This is useful for checking that a directive is attached to a valid part,\n * such as with directive that can only be used on attribute bindings.\n */\nexport type PartInfo = ChildPartInfo | AttributePartInfo | ElementPartInfo;\n\n/**\n * Creates a user-facing directive function from a Directive class. This\n * function has the same parameters as the directive's render() method.\n */\nexport const directive =\n  <C extends DirectiveClass>(c: C) =>\n  (...values: DirectiveParameters<InstanceType<C>>): DirectiveResult<C> => ({\n    // This property needs to remain unminified.\n    ['_$litDirective$']: c,\n    values,\n  });\n\n/**\n * Base class for creating custom directives. Users should extend this class,\n * implement `render` and/or `update`, and then pass their subclass to\n * `directive`.\n */\nexport abstract class Directive implements Disconnectable {\n  //@internal\n  __part!: Part;\n  //@internal\n  __attributeIndex: number | undefined;\n  //@internal\n  __directive?: Directive;\n\n  //@internal\n  _$parent!: Disconnectable;\n\n  // These will only exist on the AsyncDirective subclass\n  //@internal\n  _$disconnectableChildren?: Set<Disconnectable>;\n  // This property needs to remain unminified.\n  //@internal\n  ['_$notifyDirectiveConnectionChanged']?(isConnected: boolean): void;\n\n  constructor(_partInfo: PartInfo) {}\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  /** @internal */\n  _$initialize(\n    part: Part,\n    parent: Disconnectable,\n    attributeIndex: number | undefined\n  ) {\n    this.__part = part;\n    this._$parent = parent;\n    this.__attributeIndex = attributeIndex;\n  }\n  /** @internal */\n  _$resolve(part: Part, props: Array<unknown>): unknown {\n    return this.update(part, props);\n  }\n\n  abstract render(...props: Array<unknown>): unknown;\n\n  update(_part: Part, props: Array<unknown>): unknown {\n    return this.render(...props);\n  }\n}\n","import{_$LH as o}from\"./lit-html.js\";\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */const{I:t}=o,i=o=>null===o||\"object\"!=typeof o&&\"function\"!=typeof o,n={HTML:1,SVG:2,MATHML:3},e=(o,t)=>void 0===t?void 0!==o?._$litType$:o?._$litType$===t,l=o=>null!=o?._$litType$?.h,c=o=>void 0!==o?._$litDirective$,d=o=>o?._$litDirective$,f=o=>void 0===o.strings,s=()=>document.createComment(\"\"),r=(o,i,n)=>{const e=o._$AA.parentNode,l=void 0===i?o._$AB:i._$AA;if(void 0===n){const i=e.insertBefore(s(),l),c=e.insertBefore(s(),l);n=new t(i,c,o,o.options)}else{const t=n._$AB.nextSibling,i=n._$AM,c=i!==o;if(c){let t;n._$AQ?.(o),n._$AM=o,void 0!==n._$AP&&(t=o._$AU)!==i._$AU&&n._$AP(t)}if(t!==l||c){let o=n._$AA;for(;o!==t;){const t=o.nextSibling;e.insertBefore(o,l),o=t}}}return n},v=(o,t,i=o)=>(o._$AI(t,i),o),u={},m=(o,t=u)=>o._$AH=t,p=o=>o._$AH,M=o=>{o._$AP?.(!1,!0);let t=o._$AA;const i=o._$AB.nextSibling;for(;t!==i;){const o=t.nextSibling;t.remove(),t=o}},h=o=>{o._$AR()};export{n as TemplateResultType,h as clearPart,p as getCommittedValue,d as getDirectiveClass,r as insertPart,l as isCompiledTemplateResult,c as isDirectiveResult,i as isPrimitive,f as isSingleExpression,e as isTemplateResult,M as removePart,v as setChildPartValue,m as setCommittedValue};\n//# sourceMappingURL=directive-helpers.js.map\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {\n  _$LH,\n  Part,\n  DirectiveParent,\n  CompiledTemplateResult,\n  MaybeCompiledTemplateResult,\n  UncompiledTemplateResult,\n} from './lit-html.js';\nimport {\n  DirectiveResult,\n  DirectiveClass,\n  PartInfo,\n  AttributePartInfo,\n} from './directive.js';\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\n\nconst {_ChildPart: ChildPart} = _$LH;\n\ntype ChildPart = InstanceType<typeof ChildPart>;\n\nconst ENABLE_SHADYDOM_NOPATCH = true;\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  window.ShadyDOM?.inUse &&\n  window.ShadyDOM?.noPatch === true\n    ? window.ShadyDOM!.wrap\n    : (node: Node) => node;\n\n/**\n * Tests if a value is a primitive value.\n *\n * See https://tc39.github.io/ecma262/#sec-typeof-operator\n */\nexport const isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\n\nexport const TemplateResultType = {\n  HTML: 1,\n  SVG: 2,\n  MATHML: 3,\n} as const;\n\nexport type TemplateResultType =\n  (typeof TemplateResultType)[keyof typeof TemplateResultType];\n\ntype IsTemplateResult = {\n  (val: unknown): val is MaybeCompiledTemplateResult;\n  <T extends TemplateResultType>(\n    val: unknown,\n    type: T\n  ): val is UncompiledTemplateResult<T>;\n};\n\n/**\n * Tests if a value is a TemplateResult or a CompiledTemplateResult.\n */\nexport const isTemplateResult: IsTemplateResult = (\n  value: unknown,\n  type?: TemplateResultType\n): value is UncompiledTemplateResult =>\n  type === undefined\n    ? // This property needs to remain unminified.\n      (value as UncompiledTemplateResult)?.['_$litType$'] !== undefined\n    : (value as UncompiledTemplateResult)?.['_$litType$'] === type;\n\n/**\n * Tests if a value is a CompiledTemplateResult.\n */\nexport const isCompiledTemplateResult = (\n  value: unknown\n): value is CompiledTemplateResult => {\n  return (value as CompiledTemplateResult)?.['_$litType$']?.h != null;\n};\n\n/**\n * Tests if a value is a DirectiveResult.\n */\nexport const isDirectiveResult = (value: unknown): value is DirectiveResult =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'] !== undefined;\n\n/**\n * Retrieves the Directive class for a DirectiveResult\n */\nexport const getDirectiveClass = (value: unknown): DirectiveClass | undefined =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'];\n\n/**\n * Tests whether a part has only a single-expression with no strings to\n * interpolate between.\n *\n * Only AttributePart and PropertyPart can have multiple expressions.\n * Multi-expression parts have a `strings` property and single-expression\n * parts do not.\n */\nexport const isSingleExpression = (part: PartInfo) =>\n  (part as AttributePartInfo).strings === undefined;\n\nconst createMarker = () => document.createComment('');\n\n/**\n * Inserts a ChildPart into the given container ChildPart's DOM, either at the\n * end of the container ChildPart, or before the optional `refPart`.\n *\n * This does not add the part to the containerPart's committed value. That must\n * be done by callers.\n *\n * @param containerPart Part within which to add the new ChildPart\n * @param refPart Part before which to add the new ChildPart; when omitted the\n *     part added to the end of the `containerPart`\n * @param part Part to insert, or undefined to create a new part\n */\nexport const insertPart = (\n  containerPart: ChildPart,\n  refPart?: ChildPart,\n  part?: ChildPart\n): ChildPart => {\n  const container = wrap(containerPart._$startNode).parentNode!;\n\n  const refNode =\n    refPart === undefined ? containerPart._$endNode : refPart._$startNode;\n\n  if (part === undefined) {\n    const startNode = wrap(container).insertBefore(createMarker(), refNode);\n    const endNode = wrap(container).insertBefore(createMarker(), refNode);\n    part = new ChildPart(\n      startNode,\n      endNode,\n      containerPart,\n      containerPart.options\n    );\n  } else {\n    const endNode = wrap(part._$endNode!).nextSibling;\n    const oldParent = part._$parent;\n    const parentChanged = oldParent !== containerPart;\n    if (parentChanged) {\n      part._$reparentDisconnectables?.(containerPart);\n      // Note that although `_$reparentDisconnectables` updates the part's\n      // `_$parent` reference after unlinking from its current parent, that\n      // method only exists if Disconnectables are present, so we need to\n      // unconditionally set it here\n      part._$parent = containerPart;\n      // Since the _$isConnected getter is somewhat costly, only\n      // read it once we know the subtree has directives that need\n      // to be notified\n      let newConnectionState;\n      if (\n        part._$notifyConnectionChanged !== undefined &&\n        (newConnectionState = containerPart._$isConnected) !==\n          oldParent!._$isConnected\n      ) {\n        part._$notifyConnectionChanged(newConnectionState);\n      }\n    }\n    if (endNode !== refNode || parentChanged) {\n      let start: Node | null = part._$startNode;\n      while (start !== endNode) {\n        const n: Node | null = wrap(start!).nextSibling;\n        wrap(container).insertBefore(start!, refNode);\n        start = n;\n      }\n    }\n  }\n\n  return part;\n};\n\n/**\n * Sets the value of a Part.\n *\n * Note that this should only be used to set/update the value of user-created\n * parts (i.e. those created using `insertPart`); it should not be used\n * by directives to set the value of the directive's container part. Directives\n * should return a value from `update`/`render` to update their part state.\n *\n * For directives that require setting their part value asynchronously, they\n * should extend `AsyncDirective` and call `this.setValue()`.\n *\n * @param part Part to set\n * @param value Value to set\n * @param index For `AttributePart`s, the index to set\n * @param directiveParent Used internally; should not be set by user\n */\nexport const setChildPartValue = <T extends ChildPart>(\n  part: T,\n  value: unknown,\n  directiveParent: DirectiveParent = part\n): T => {\n  part._$setValue(value, directiveParent);\n  return part;\n};\n\n// A sentinel value that can never appear as a part value except when set by\n// live(). Used to force a dirty-check to fail and cause a re-render.\nconst RESET_VALUE = {};\n\n/**\n * Sets the committed value of a ChildPart directly without triggering the\n * commit stage of the part.\n *\n * This is useful in cases where a directive needs to update the part such\n * that the next update detects a value change or not. When value is omitted,\n * the next update will be guaranteed to be detected as a change.\n *\n * @param part\n * @param value\n */\nexport const setCommittedValue = (part: Part, value: unknown = RESET_VALUE) =>\n  (part._$committedValue = value);\n\n/**\n * Returns the committed value of a ChildPart.\n *\n * The committed value is used for change detection and efficient updates of\n * the part. It can differ from the value set by the template or directive in\n * cases where the template value is transformed before being committed.\n *\n * - `TemplateResult`s are committed as a `TemplateInstance`\n * - Iterables are committed as `Array<ChildPart>`\n * - All other types are committed as the template value or value returned or\n *   set by a directive.\n *\n * @param part\n */\nexport const getCommittedValue = (part: ChildPart) => part._$committedValue;\n\n/**\n * Removes a ChildPart from the DOM, including any of its content.\n *\n * @param part The Part to remove\n */\nexport const removePart = (part: ChildPart) => {\n  part._$notifyConnectionChanged?.(false, true);\n  let start: ChildNode | null = part._$startNode;\n  const end: ChildNode | null = wrap(part._$endNode!).nextSibling;\n  while (start !== end) {\n    const n: ChildNode | null = wrap(start!).nextSibling;\n    (wrap(start!) as ChildNode).remove();\n    start = n;\n  }\n};\n\nexport const clearPart = (part: ChildPart) => {\n  part._$clear();\n};\n","import { pointDemos } from './point';\nimport { angleDemos } from './angle';\nimport { intersectionDemos } from './intersection';\nimport { vectorDemos } from './vector';\nimport { physicsDemos } from './physics';\nimport { bodyDemos } from './body';\n\nexport const demos = {\n    point: pointDemos,\n    angle: angleDemos,\n    intersection: intersectionDemos,\n    vector: vectorDemos,\n    body: bodyDemos,\n    physics: physicsDemos\n};\n\nexport type DemoFunction = (canvas: HTMLCanvasElement) => void;\n","import * as point from '../../src/point';\nimport { DemoFunction } from './index';\nimport { clearCanvas, drawPoint, drawLine, drawText, drawResults, drawCircle, drag, click, move, drawRect, key, animate } from '../utils';\nimport { Point } from '../../src';\n\nexport const pointDemos: Record<keyof typeof point, DemoFunction> = {\n    distance: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        let p1 = { x: 100, y: 100 };\n        let p2 = { x: 300, y: 300 };\n        \n        function draw() {\n            clearCanvas(ctx);\n            drawPoint(ctx, p1, 'blue');\n            drawPoint(ctx, p2, 'red');\n            drawLine(ctx, { start: p1, end: p2 }, 'gray');\n            \n            drawResults(ctx, [\n                ['Distance', point.distance(p1, p2)],\n                'Click to set point 1'\n            ]);\n        }\n        \n        click({ canvas, draw }, pos => p1 = pos);\n        move({ canvas, draw }, pos => p2 = pos);\n        draw(); // initial draw still needed\n    },\n    \n    distanceSquared: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        let p1 = { x: 100, y: 100 };\n        let p2 = { x: 300, y: 300 };\n        \n        function draw() {\n            clearCanvas(ctx);\n            drawPoint(ctx, p1, 'blue');\n            drawPoint(ctx, p2, 'red');\n            drawLine(ctx, { start: p1, end: p2 }, 'gray');\n            \n            drawResults(ctx, [\n                ['Distance', point.distance(p1, p2)],\n                ['Distance²', point.distanceSquared(p1, p2)],\n                'Click to set point 1'\n            ]);\n        }\n        \n        click({ canvas, draw }, pos => p1 = pos);\n        move({ canvas, draw }, pos => p2 = pos);\n        draw();\n    },\n\n    midpoint: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        let p1 = { x: 100, y: 100 };\n        let p2 = { x: 300, y: 300 };\n        \n        function draw() {\n            clearCanvas(ctx);\n            drawPoint(ctx, p1, 'blue');\n            drawPoint(ctx, p2, 'red');\n            drawLine(ctx, { start: p1, end: p2 }, 'gray');\n            \n            const mid = point.midpoint(p1, p2);\n            drawPoint(ctx, mid, 'green');\n            \n            drawResults(ctx, [\n                ['Midpoint', mid],\n                'Click to set point 1'\n            ]);\n        }\n        \n        click({ canvas, draw }, pos => p1 = pos);\n        move({ canvas, draw }, pos => p2 = pos);\n        draw();\n    },\n\n    closest: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        let points: Point[] = [];\n        let mousePos = { x: 0, y: 0 };\n\n        function generatePoints() {\n            points = Array.from({ length: 10 }, () => ({\n                x: Math.random() * canvas.width,\n                y: Math.random() * canvas.height\n            }));\n        }\n\n        function draw() {\n            clearCanvas(ctx);\n            const closest = point.closest(mousePos, points);\n            \n            points.forEach(p => {\n                drawPoint(ctx, p, p === closest ? 'red' : 'blue');\n            });\n\n            drawResults(ctx, [\n                ['Mouse', mousePos],\n                ['Closest', closest],\n                'Click to generate new points'\n            ]);\n        }\n\n        click({ canvas, draw }, () => generatePoints());\n        move({ canvas, draw }, pos => mousePos = pos);\n        \n        generatePoints();\n        draw();\n    },\n\n    isPointInCircle: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        let circle = { x: 200, y: 200, radius: 50 };\n        let mousePos = { x: 0, y: 0 };\n\n        function draw() {\n            clearCanvas(ctx);\n            const isInside = point.isPointInCircle(mousePos, circle);\n            drawCircle(ctx, circle, isInside ? 'green' : 'red');\n            drawPoint(ctx, circle, 'blue');\n            drawPoint(ctx, mousePos, isInside ? 'green' : 'red');\n            \n            drawResults(ctx, [\n                ['Inside', isInside],\n                ['Circle', circle],\n                'Click and drag to resize circle'\n            ]);\n        }\n\n        move({ canvas, draw }, pos => mousePos = pos);\n        drag({ canvas, draw }, {\n            onStart: pos => circle = { ...circle, ...pos },\n            onDrag: pos => circle.radius = point.distance(circle, pos)\n        });\n        draw();\n    },\n\n    isPointInRectangle: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        let rect = { x: 200, y: 200, width: 100, height: 100 };\n        let mousePos = { x: 0, y: 0 };\n        \n        function draw() {\n            clearCanvas(ctx);\n            const isInside = point.isPointInRectangle(mousePos, rect);\n            drawRect(ctx, rect, isInside ? 'green' : 'red');\n            drawPoint(ctx, mousePos, isInside ? 'green' : 'red');\n            \n            drawResults(ctx, [\n                ['Inside', isInside],\n                ['Rectangle', rect],\n                'Click and drag to draw rectangle'\n            ]);\n        }\n\n        move({ canvas, draw }, pos => mousePos = pos);\n        drag({ canvas, draw }, {\n            onStart: pos => rect = { ...rect, x: pos.x, y: pos.y, width: 0, height: 0 },\n            onDrag: pos => {\n                rect.width = pos.x - rect.x;\n                rect.height = pos.y - rect.y;\n            }\n        });\n        draw();\n    },\n\n    isPointInLine: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        let line = { start: { x: 100, y: 100 }, end: { x: 300, y: 300 } };\n        let mousePos = { x: 0, y: 0 };\n        let lineWidth = 10;\n\n        function draw() {\n            clearCanvas(ctx);\n            const isInside = point.isPointInLine(mousePos, line, lineWidth);\n            const color = isInside ? 'green' : 'red';\n            drawCircle(ctx, { ...line.start, radius: lineWidth / 2 }, color, true);\n            drawCircle(ctx, { ...line.end, radius: lineWidth / 2 }, color, true);\n            drawLine(ctx, line, color, lineWidth);\n            \n            drawResults(ctx, [\n                ['Inside', isInside],\n                ['Line', line],\n                ['Line Width', lineWidth],\n                'Click and drag to draw line',\n                'Press + or - to adjust width'\n            ]);\n        }\n\n        move({ canvas, draw }, pos => mousePos = pos);\n        drag({ canvas, draw }, {\n            onStart: pos => line.start = line.end = pos,\n            onDrag: pos => line.end = pos\n        });\n        key({ canvas, draw }, {\n            '+': () => lineWidth++,\n            '-': () => lineWidth--\n        });\n        \n        draw();\n    },\n\n    moveTowards: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        let current = { x: canvas.width/2, y: canvas.height/2 };\n        let target = { x: canvas.width/2 + 100, y: canvas.height/2 };\n        let maxDistance = 5;\n\n        function draw() {\n            clearCanvas(ctx);\n            drawPoint(ctx, current, 'blue');\n            drawPoint(ctx, target, 'red');\n            drawLine(ctx, { start: current, end: target }, 'gray');\n            \n            drawResults(ctx, [\n                ['Current', current],\n                ['Target', target],\n                ['Distance', point.distance(current, target)],\n                ['Speed', maxDistance],\n                'Move mouse to set target',\n                'Use +/- to adjust speed'\n            ]);\n        }\n\n        move({ canvas, draw }, pos => target = pos);\n        key({ canvas, draw }, {\n            '+': () => maxDistance *= 1.2,\n            '-': () => maxDistance /= 1.2\n        });\n\n        animate(\n            draw,\n            () => current = point.moveTowards(current, target, maxDistance)\n        );\n    },\n\n    interpolate: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        let p1 = { x: 100, y: 100 };\n        let p2 = { x: 300, y: 300 };\n        let t = 0.5;\n\n        function draw() {\n            clearCanvas(ctx);\n            drawPoint(ctx, p1, 'blue');\n            drawPoint(ctx, p2, 'red');\n            drawLine(ctx, { start: p1, end: p2 }, 'gray');\n\n            const interpolated = point.interpolate(p1, p2, t);\n            drawPoint(ctx, interpolated, 'green');\n\n            drawResults(ctx, [\n                ['Point 1', p1],\n                ['Point 2', p2],\n                ['t (Interpolation)', t.toFixed(2)],\n                ['Interpolated', interpolated],\n                'Click to set Point 1',\n                'Move mouse to set Point 2',\n                'Use +/- to adjust t'\n            ]);\n        }\n\n        click({ canvas, draw }, pos => p1 = pos);\n        move({ canvas, draw }, pos => p2 = pos);\n        key({ canvas, draw }, {\n            '+': () => t = Math.min(1, t + 0.05),\n            '-': () => t = Math.max(0, t - 0.05)\n        });\n\n        draw();\n    },\n};\n","import { Circle, Line, Point, Rectangle } from './types';\n\n/**\n * Calculates Euclidean distance between two points\n * @example\n * const p1 = {x: 0, y: 0};\n * const p2 = {x: 3, y: 4};\n * distance(p1, p2) // returns 5\n */\nexport const distance = (p1: Point, p2: Point): number => {\n  const dx = p2.x - p1.x;\n  const dy = p2.y - p1.y;\n  return Math.sqrt(dx * dx + dy * dy);\n};\n\n/**\n * Calculates squared distance between points (faster than distance)\n * @example\n * const p1 = {x: 0, y: 0};\n * const p2 = {x: 3, y: 4};\n * distanceSquared(p1, p2) // returns 25\n */\nexport const distanceSquared = (p1: Point, p2: Point): number => {\n  const dx = p2.x - p1.x;\n  const dy = p2.y - p1.y;\n  return dx * dx + dy * dy;\n};\n\n/**\n * Finds point halfway between two points\n * @example\n * const p1 = {x: 0, y: 0};\n * const p2 = {x: 2, y: 4};\n * midpoint(p1, p2) // returns {x: 1, y: 2}\n */\nexport const midpoint = (p1: Point, p2: Point): Point => ({\n  x: (p1.x + p2.x) / 2,\n  y: (p1.y + p2.y) / 2,\n});\n\n/**\n * Finds the closest point from a list of points\n * @example\n * const target = { x: 0, y: 0 };\n * const points = [{ x: 1, y: 1 }, { x: 2, y: 2 }];\n * closest(target, points) // returns { x: 1, y: 1 }\n */\nexport const closest = (target: Point, points: Point[]): Point => {\n    if (!points.length) throw new Error('Points array is empty');\n    return points.reduce((closest, point) => \n        distanceSquared(target, point) < distanceSquared(target, closest) \n            ? point \n            : closest\n    );\n};\n\n/**\n * Checks if a point is inside a circle\n * @example\n * const circle = { x: 0, y: 0, radius: 5 };\n * isPointInCircle({x:3, y:4}, circle) // returns true\n * isPointInCircle({x:4, y:4}, circle) // returns false\n */\nexport const isPointInCircle = (point: Point, circle: Circle): boolean => {\n  const distSquared = distanceSquared(point, { x: circle.x, y: circle.y });\n  return distSquared < circle.radius * circle.radius;\n};\n\n/**\n * Checks if a point is inside a rectangle\n * @example\n * const rect = { x: 0, y: 0, width: 10, height: 10 };\n * isPointInRectangle({x:5, y:5}, rect) // returns true\n * isPointInRectangle({x:11, y:5}, rect) // returns false\n */\nexport const isPointInRectangle = (point: Point, rect: Rectangle): boolean => (\n  point.x >= rect.x &&\n  point.x <= rect.x + rect.width &&\n  point.y >= rect.y &&\n  point.y <= rect.y + rect.height\n);\n\n/**\n * Checks if a point is within a certain distance of a line segment\n * @param width The thickness of the line\n * @example\n * const line = { \n *   start: {x:0, y:0}, \n *   end: {x:10, y:0} \n * };\n * isPointInLine({x:5, y:1}, line, 2) // returns true\n * isPointInLine({x:5, y:2}, line, 2) // returns false\n */\nexport const isPointInLine = (point: Point, line: Line, width: number = 1): boolean => {\n  const dx = line.end.x - line.start.x;\n  const dy = line.end.y - line.start.y;\n  const lineLength = Math.sqrt(dx * dx + dy * dy);\n  \n  if (lineLength === 0) {\n    return distance(point, line.start) <= width / 2;\n  }\n\n  const t = ((point.x - line.start.x) * dx + (point.y - line.start.y) * dy) / (lineLength * lineLength);\n\n  if (t < 0) return distance(point, line.start) <= width / 2;\n  if (t > 1) return distance(point, line.end) <= width / 2;\n\n  const projX = line.start.x + t * dx;\n  const projY = line.start.y + t * dy;\n  const distToLine = distance(point, { x: projX, y: projY });\n\n  return distToLine <= width / 2;\n};\n\n/**\n * Moves a point towards a target by a maximum distance\n * @example\n * const current = {x:0, y:0};\n * const target = {x:10, y:0};\n * moveTowards(current, target, 2) // returns {x:2, y:0}\n * moveTowards(current, target, 20) // returns {x:10, y:0}\n */\nexport const moveTowards = (current: Point, target: Point, maxDistance: number): Point => {\n  if (maxDistance <= 0) return current;\n  \n  const dx = target.x - current.x;\n  const dy = target.y - current.y;\n  const dist = Math.sqrt(dx * dx + dy * dy);\n  \n  if (dist <= maxDistance || dist === 0) return target;\n  \n  return {\n    x: current.x + (dx / dist) * maxDistance,\n    y: current.y + (dy / dist) * maxDistance\n  };\n};\n\n/**\n * Interpolates between two points based on a factor t (0-1).\n * @example\n * const p1 = {x:0, y:0};\n * const p2 = {x:10, y:10};\n * interpolate(p1, p2, 0.5) // returns {x:5, y:5}\n */\nexport const interpolate = (p1: Point, p2: Point, t: number): Point => ({\n  x: p1.x + (p2.x - p1.x) * Math.max(0, Math.min(1, t)),\n  y: p1.y + (p2.y - p1.y) * Math.max(0, Math.min(1, t))\n});\n\n","import { Point, Rectangle, Circle, Vector2d, Line } from '../src';\n\nexport function getMousePos(canvas: HTMLCanvasElement, evt: MouseEvent): Point {\n    const rect = canvas.getBoundingClientRect();\n    return {\n        x: evt.clientX - rect.left,\n        y: evt.clientY - rect.top\n    };\n}\n\nexport function clearCanvas(ctx: CanvasRenderingContext2D) {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n}\n\nexport function drawPoint(ctx: CanvasRenderingContext2D, p: Point, color = 'blue', size = 5) {\n    ctx.fillStyle = color;\n    ctx.beginPath();\n    ctx.arc(p.x, p.y, size, 0, Math.PI * 2);\n    ctx.fill();\n}\n\nexport function drawCircle(ctx: CanvasRenderingContext2D, circle: Circle, color = 'blue', fill = false) {\n    ctx.beginPath();\n    ctx.arc(circle.x, circle.y, circle.radius, 0, Math.PI * 2);\n    if (fill) {\n        ctx.fillStyle = color;\n        ctx.fill();\n    } else {\n        ctx.strokeStyle = color;\n        ctx.stroke();\n    }\n}\n\nexport function drawLine(ctx: CanvasRenderingContext2D, line: Line, color = 'gray', width = 1) {\n    ctx.strokeStyle = color;\n    ctx.lineWidth = width;\n    ctx.beginPath();\n    ctx.moveTo(line.start.x, line.start.y);\n    ctx.lineTo(line.end.x, line.end.y);\n    ctx.stroke();\n}\n\nexport function drawRect(ctx: CanvasRenderingContext2D, rect: Rectangle, color = 'blue', fill = false) {\n    if (fill) {\n        ctx.fillStyle = color;\n        ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n    } else {\n        ctx.strokeStyle = color;\n        ctx.strokeRect(rect.x, rect.y, rect.width, rect.height);\n    }\n}\n\nexport function drawArrow(ctx: CanvasRenderingContext2D, from: Point, to: Point, color = 'blue') {\n    const headSize = 10;\n    const angle = Math.atan2(to.y - from.y, to.x - from.x);\n    \n    drawLine(ctx, { start: from, end: to }, color);\n    \n    ctx.fillStyle = color;\n    ctx.beginPath();\n    ctx.moveTo(to.x, to.y);\n    ctx.lineTo(\n        to.x - headSize * Math.cos(angle - Math.PI / 6),\n        to.y - headSize * Math.sin(angle - Math.PI / 6)\n    );\n    ctx.lineTo(\n        to.x - headSize * Math.cos(angle + Math.PI / 6),\n        to.y - headSize * Math.sin(angle + Math.PI / 6)\n    );\n    ctx.fill();\n}\n\nexport function drawText(ctx: CanvasRenderingContext2D, text: string, x: number, y: number, color = 'black', font = '14px monospace') {\n    ctx.fillStyle = color;\n    ctx.font = font;\n    ctx.fillText(text, x, y);\n}\n\nexport function drawArc(ctx: CanvasRenderingContext2D, center: Point, radius: number, startAngle: number, endAngle: number, color = 'black') {\n    ctx.beginPath();\n    ctx.arc(center.x, center.y, radius, startAngle, endAngle);\n    ctx.strokeStyle = color;\n    ctx.stroke();\n}\n\nexport type ResultValue = number | string | boolean | Point | Circle | Rectangle | Vector2d | Line | [string, ResultValue][];\n\nexport type ResultEntry = string | [label: string, value: ResultValue, opts?: { color?: string; precision?: number }];\n\nfunction formatValue(value: ResultValue, precision = 2): string {\n    const num = (n: number) => n.toFixed(precision);\n    \n    if (typeof value === 'number') {\n        return num(value);\n    }\n    if (typeof value === 'string') {\n        return value;\n    }\n    if (typeof value === 'boolean') {\n        return value ? '✅ Yes' : '❌ No';\n    }\n    if (Array.isArray(value)) {\n        return `{${ value.map(([k, v]) => `${ k }=${ formatValue(v, precision) }`).join(', ') }}`;\n    }\n    if ('radius' in value) {\n        return `(${num(value.x)}, ${num(value.y)}, r=${num(value.radius)})`;\n    }\n    if ('width' in value) {\n        return `(${num(value.x)}, ${num(value.y)}) [${num(value.width)}×${num(value.height)}]`;\n    }\n    if ('start' in value) {\n        const start = `${num(value.start.x)}, ${num(value.start.y)}`;\n        const end = `${num(value.end.x)}, ${num(value.end.y)}`;\n        return `(${start}) → (${end})`;\n    }\n    return `(${num(value.x)}, ${num(value.y)})`;\n}\n\nexport function drawResults(\n    ctx: CanvasRenderingContext2D, \n    results: ResultEntry[], \n    {\n        x = 10, \n        y = 20, \n        spacing = 20,\n        precision = 2,\n        color = 'black'\n    }: { \n        x?: number; \n        y?: number; \n        spacing?: number; \n        precision?: number; \n        color?: string \n    } = {}\n) {\n    results.forEach((entry, i) => {\n        const text = Array.isArray(entry)\n            ? `${entry[0]}: ${formatValue(entry[1], entry[2]?.precision ?? precision)}`\n            : entry;\n        drawText(ctx, text, x, y + i * spacing, (Array.isArray(entry) && entry[2]?.color) || color);\n    });\n}\n\ntype HandlerContext = {\n    canvas: HTMLCanvasElement;\n    draw?: () => void;\n    center?: Point; // Optional center point for offsetting mouse positions\n};\n\ntype DragHandler = {\n    onStart?: (pos: Point) => void;\n    onDrag?: (pos: Point) => void;\n    onEnd?: (pos: Point) => void;\n};\n\n/**\n * Calculates the mouse position offset by a given center point.\n * @param canvas The canvas element.\n * @param evt The mouse event.\n * @param center The point to offset the mouse position by.\n * @returns The offset mouse position.\n */\nexport function getOffsetMousePos(canvas: HTMLCanvasElement, evt: MouseEvent, center: Point = { x: 0, y: 0 }): Point {\n    const pos = getMousePos(canvas, evt);\n    return {\n        x: pos.x - center.x,\n        y: pos.y - center.y,\n    };\n}\n\n/**\n * Adds drag event listeners to the canvas and optionally offsets the mouse position by a center point.\n * @param context The handler context containing the canvas, optional draw function, and optional center.\n * @param handlers The drag event handlers.\n */\nexport function drag({ canvas, draw, center = { x: 0, y: 0 } }: HandlerContext, handlers: DragHandler) {\n    let isDragging = false;\n\n    canvas.addEventListener('mousedown', (e) => {\n        isDragging = true;\n        handlers.onStart?.(getOffsetMousePos(canvas, e, center)) ?? handlers.onDrag?.(getOffsetMousePos(canvas, e, center));\n        draw?.();\n    });\n\n    canvas.addEventListener('mousemove', (e) => {\n        if (isDragging) {\n            handlers.onDrag?.(getOffsetMousePos(canvas, e, center));\n            draw?.();\n        }\n    });\n\n    canvas.addEventListener('mouseup', (e) => {\n        if (isDragging) {\n            handlers.onEnd?.(getOffsetMousePos(canvas, e, center));\n            isDragging = false;\n            draw?.();\n        }\n    });\n\n    canvas.addEventListener('mouseleave', (e) => {\n        if (isDragging) {\n            handlers.onEnd?.(getOffsetMousePos(canvas, e, center));\n            isDragging = false;\n            draw?.();\n        }\n    });\n}\n\n/**\n * Adds a click event listener to the canvas and optionally offsets the mouse position by a center point.\n * @param context The handler context containing the canvas, optional draw function, and optional center.\n * @param handler The click event handler.\n */\nexport function click({ canvas, draw, center = { x: 0, y: 0 } }: HandlerContext, handler: (pos: Point) => void) {\n    canvas.addEventListener('click', (e) => {\n        handler(getOffsetMousePos(canvas, e, center));\n        draw?.();\n    });\n}\n\n/**\n * Adds a mousemove event listener to the canvas and optionally offsets the mouse position by a center point.\n * @param context The handler context containing the canvas, optional draw function, and optional center.\n * @param handler The mousemove event handler.\n */\nexport function move({ canvas, draw, center = { x: 0, y: 0 } }: HandlerContext, handler: (pos: Point) => void) {\n    canvas.addEventListener('mousemove', (e) => {\n        handler(getOffsetMousePos(canvas, e, center));\n        draw?.();\n    });\n}\n\nexport function key({ canvas, draw }: HandlerContext, mappings: Record<string, () => void>) {\n    // Normalize keys to handle case-insensitivity and special key pairs\n    const normalizeKey = (key: string) =>\n        ({ '+': '=', '-': '_' }[key.toLowerCase()] ?? key.toLowerCase());\n\n    // Transform mappings into normalized handlers\n    const handlers = Object.entries(mappings).reduce((acc, [keys, callback]) => {\n        keys.split('').forEach(key => acc[normalizeKey(key.trim())] = callback );\n        return acc;\n    }, {} as Record<string, () => void>);\n\n    const handler = (e: KeyboardEvent) => {\n        const callback = handlers[normalizeKey(e.key)];\n        if (callback) {\n            callback();\n            draw?.();\n        }\n    };\n\n    canvas.tabIndex = 0;\n    canvas.focus();\n    canvas.addEventListener('keydown', handler);\n    return () => canvas.removeEventListener('keydown', handler);\n}\n\nlet currentAnimation: number | null = null;\n\nexport function animate(draw: () => void, udpate?: () => void) {\n    function loop() {\n        udpate?.();\n        draw();\n        currentAnimation = requestAnimationFrame(loop);\n    }\n\n    loop();\n}\n\nexport function simulate(update: (deltaTime: number) => void, draw: () => void) {\n    let lastTime = performance.now();\n    \n    animate(draw, () => {\n        const time = performance.now();\n        const deltaTime = Math.min((time - lastTime) / 1000, 0.1); // Cap at 100ms\n        lastTime = time;\n\n        update(deltaTime);\n    });\n}\n\nexport function reset() {\n    if (currentAnimation !== null) {\n        cancelAnimationFrame(currentAnimation);\n        currentAnimation = null;\n    }\n    keys.stop();\n}\n\n/**\n * Executes a drawing function with the canvas context translated by a given offset.\n * @param ctx The canvas rendering context.\n * @param center The point to offset the context by.\n * @param drawFn The drawing function to execute.\n */\nexport function drawWithOffset(ctx: CanvasRenderingContext2D, center: Point, drawFn: (ctx: CanvasRenderingContext2D) => void) {\n    ctx.save();\n    ctx.translate(center.x, center.y);\n    drawFn(ctx);\n    ctx.restore();\n}\n\n/**\n * Draws axes centered around (0,0).\n * @param ctx The canvas rendering context.\n */\nexport function drawAxes(ctx: CanvasRenderingContext2D) {\n    const width = ctx.canvas.width;\n    const height = ctx.canvas.height;\n\n    ctx.strokeStyle = 'lightgray';\n    ctx.lineWidth = 1;\n\n    // Draw horizontal axis\n    ctx.beginPath();\n    ctx.moveTo(-width / 2, 0);\n    ctx.lineTo(width / 2, 0);\n    ctx.stroke();\n\n    // Draw vertical axis\n    ctx.beginPath();\n    ctx.moveTo(0, -height / 2);\n    ctx.lineTo(0, height / 2);\n    ctx.stroke();\n}\n\nexport const keys = (() => {\n    const pressedKeys = new Set<string>();\n    let listener: ((e: KeyboardEvent) => void) | null = null;\n\n    return {\n        listen() {\n            if (listener) return; // Avoid multiple listeners\n            listener = (e: KeyboardEvent) => {\n                if (e.type === 'keydown') pressedKeys.add(e.code);\n                if (e.type === 'keyup') pressedKeys.delete(e.code);\n            };\n            window.addEventListener('keydown', listener);\n            window.addEventListener('keyup', listener);\n        },\n        isDown(keyCode: string) {\n            return pressedKeys.has(keyCode);\n        },\n        stop() {\n            if (listener) {\n                window.removeEventListener('keydown', listener);\n                window.removeEventListener('keyup', listener);\n                listener = null;\n                pressedKeys.clear();\n            }\n        }\n    };\n})();","import * as angle from '../../src/angle';\nimport * as vector from '../../src/vector';\nimport { DemoFunction } from './index';\nimport { clearCanvas, drawPoint, drawLine, drawResults, drawArrow, drag, move, key, click, animate, drawArc } from '../utils';\nimport { Point } from '../../src';\nimport * as point from '../../src/point';\n\nexport const angleDemos: Record<keyof typeof angle, DemoFunction> = {\n    degreesToRadians: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        let degrees = 45;\n        const center = { x: canvas.width / 2, y: canvas.height / 2 };\n        const radius = 100;\n\n        function draw() {\n            clearCanvas(ctx);\n\n            // Draw center dot\n            drawPoint(ctx, center, 'black', 5);\n\n            // Draw angle visualization\n            const radians = angle.degreesToRadians(degrees);\n            drawArc(ctx, center, radius, 0, radians, 'blue');\n\n            // Draw lines at the end of the arc\n            const normalEnd = vector.add(center, { x: radius, y: 0 });\n            const angleEnd = vector.add(center, vector.fromAngleRadians(radians, radius));\n            drawLine(ctx, { start: center, end: normalEnd }, 'blue');\n            drawLine(ctx, { start: center, end: angleEnd }, 'blue');\n\n            drawResults(ctx, [\n                ['Degrees', degrees],\n                ['Radians', radians],\n                'Use +/- to adjust angle'\n            ]);\n        }\n\n        key({ canvas, draw }, {\n            '+': () => degrees++,\n            '-': () => degrees--\n        });\n\n        draw();\n    },\n\n    radiansToDegrees: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        let radians = Math.PI / 4;\n        const center = { x: canvas.width / 2, y: canvas.height / 2 };\n        const radius = 100;\n\n        function draw() {\n            clearCanvas(ctx);\n\n            // Draw center dot\n            drawPoint(ctx, center, 'black', 5);\n\n            // Draw angle visualization\n            const degrees = angle.radiansToDegrees(radians);\n            drawArc(ctx, center, radius, 0, radians, 'red');\n\n            // Draw lines at the end of the arc\n            const normalEnd = vector.add(center, { x: radius, y: 0 });\n            const angleEnd = vector.add(center, vector.fromAngleRadians(radians, radius));\n            drawLine(ctx, { start: center, end: normalEnd }, 'red');\n            drawLine(ctx, { start: center, end: angleEnd }, 'red');\n\n            drawResults(ctx, [\n                ['Radians', radians],\n                ['Degrees', degrees],\n                'Use +/- to adjust angle'\n            ]);\n        }\n\n        key({ canvas, draw }, {\n            '+': () => radians + Math.PI / 180,\n            '-': () => radians -= Math.PI / 180\n        });\n\n        draw();\n    },\n\n    radiansBetweenLines: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        let line1 = { start: { x: 400, y: 300 }, end: { x: 500, y: 300 } };\n        let line2 = { start: { x: 400, y: 300 }, end: { x: 500, y: 400 } };\n\n        function draw() {\n            clearCanvas(ctx);\n            drawLine(ctx, line1, 'blue');\n            drawLine(ctx, line2, 'red');\n            drawPoint(ctx, line1.start, 'black');\n\n            drawResults(ctx, [\n                ['Angle (rad)', angle.radiansBetweenLines(line1, line2)],\n                'Drag endpoints to adjust lines'\n            ]);\n        }\n\n        drag({ canvas, draw }, {\n            onStart: pos => {\n                const endpoint = point.closest(pos, [line1.end, line2.end]);\n                if (endpoint === line1.end) line1.end = pos;\n                else line2.end = pos;\n            },\n            onDrag: pos => {\n                const endpoint = point.closest(pos, [line1.end, line2.end]);\n                if (endpoint === line1.end) line1.end = pos;\n                else line2.end = pos;\n            }\n        });\n\n        draw();\n    },\n\n    degreesBetweenLines: (canvas) => {\n        // Same as radiansBetweenLines but showing degrees\n        const ctx = canvas.getContext('2d')!;\n        let line1 = { start: { x: 400, y: 300 }, end: { x: 500, y: 300 } };\n        let line2 = { start: { x: 400, y: 300 }, end: { x: 500, y: 400 } };\n\n        function draw() {\n            clearCanvas(ctx);\n            drawLine(ctx, line1, 'blue');\n            drawLine(ctx, line2, 'red');\n            drawPoint(ctx, line1.start, 'black');\n\n            drawResults(ctx, [\n                ['Angle (deg)', angle.degreesBetweenLines(line1, line2)],\n                'Drag endpoints to adjust lines'\n            ]);\n        }\n\n        drag({ canvas, draw }, {\n            onStart: pos => {\n                const endpoint = point.closest(pos, [line1.end, line2.end]);\n                if (endpoint === line1.end) line1.end = pos;\n                else line2.end = pos;\n            },\n            onDrag: pos => {\n                const endpoint = point.closest(pos, [line1.end, line2.end]);\n                if (endpoint === line1.end) line1.end = pos;\n                else line2.end = pos;\n            }\n        });\n\n        draw();\n    },\n\n    radiansBetweenPoints: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        let center = { x: 400, y: 300 };\n        let target = { x: 500, y: 300 };\n\n        function draw() {\n            clearCanvas(ctx);\n            drawPoint(ctx, center, 'blue');\n            drawPoint(ctx, target, 'red');\n            drawArrow(ctx, center, target);\n\n            drawResults(ctx, [\n                ['Angle (rad)', angle.radiansBetweenPoints(center, target)],\n                'Click to set center, move mouse for target'\n            ]);\n        }\n\n        move({ canvas, draw }, pos => target = pos);\n        drag({ canvas, draw }, {\n            onStart: pos => center = pos,\n            onDrag: pos => center = pos\n        });\n\n        draw();\n    },\n\n    degreesBetweenPoints: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        let center = { x: 400, y: 300 };\n        let target = { x: 500, y: 300 };\n\n        function draw() {\n            clearCanvas(ctx);\n            drawPoint(ctx, center, 'blue');\n            drawPoint(ctx, target, 'red');\n            drawArrow(ctx, center, target);\n\n            drawResults(ctx, [\n                ['Angle (deg)', angle.degreesBetweenPoints(center, target)],\n                'Click to set center, move mouse for target'\n            ]);\n        }\n\n        move({ canvas, draw }, pos => target = pos);\n        drag({ canvas, draw }, {\n            onStart: pos => center = pos,\n            onDrag: pos => center = pos\n        });\n\n        draw();\n    },\n\n    degreesBetweenAngles: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        let angle1 = 45;\n        let angle2 = 90;\n        const center = { x: canvas.width/2, y: canvas.height/2 };\n        const radius = 100;\n\n        function draw() {\n            clearCanvas(ctx);\n            \n            // Draw angle arrows\n            const end1 = vector.add(center, vector.fromAngleDegrees(angle1, radius));\n            const end2 = vector.add(center, vector.fromAngleDegrees(angle2, radius));\n            drawArrow(ctx, center, end1, 'blue');\n            drawArrow(ctx, center, end2, 'red');\n\n            drawResults(ctx, [\n                ['Angle 1 (deg)', angle1],\n                ['Angle 2 (deg)', angle2],\n                ['Degrees Between', angle.degreesBetweenAngles(angle1, angle2)],\n                'Use 1/2 to adjust angles'\n            ]);\n        }\n\n        key({ canvas, draw }, {\n            '1': () => angle1 = (angle1 + 15) % 360,\n            '2': () => angle2 = (angle2 + 15) % 360\n        });\n\n        draw();\n    },\n\n    radiansBetweenAngles: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        let angle1 = Math.PI / 4;\n        let angle2 = Math.PI / 2;\n        const center = { x: canvas.width/2, y: canvas.height/2 };\n        const radius = 100;\n\n        function draw() {\n            clearCanvas(ctx);\n            \n            // Draw angle arrows\n            const end1 = vector.add(center, vector.fromAngleRadians(angle1, radius));\n            const end2 = vector.add(center, vector.fromAngleRadians(angle2, radius));\n            drawArrow(ctx, center, end1, 'blue');\n            drawArrow(ctx, center, end2, 'red');\n\n            drawResults(ctx, [\n                ['Angle 1 (rad)', angle1],\n                ['Angle 2 (rad)', angle2],\n                ['Radians Between', angle.radiansBetweenAngles(angle1, angle2)],\n                'Use 1/2 to adjust angles'\n            ]);\n        }\n\n        key({ canvas, draw }, {\n            '1': () => angle1 = (angle1 + Math.PI/6) % (Math.PI * 2),\n            '2': () => angle2 = (angle2 + Math.PI/6) % (Math.PI * 2)\n        });\n\n        draw();\n    },\n\n    rotateAroundByRadians: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        let center = { x: 400, y: 300 };\n        let point = { x: 500, y: 300 };\n        const step = Math.PI / 180;\n\n        function draw() {\n            clearCanvas(ctx);\n            drawPoint(ctx, center, 'blue');\n            drawPoint(ctx, point, 'red');\n            drawArrow(ctx, center, point);\n\n            drawResults(ctx, [\n                ['Center', center],\n                ['Point', point],\n                ['Angle (rad)', angle.radiansBetweenPoints(center, point)],\n                'Click to set center, move mouse for point'\n            ]);\n        }\n\n        move({ canvas, draw }, pos => point = pos);\n        click({ canvas, draw }, pos => center = pos);\n        animate(\n            draw,\n            () => point = angle.rotateAroundByRadians(center, point, step)\n        );\n    },\n\n    rotateAroundByDegrees: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        let center = { x: 400, y: 300 };\n        let point = { x: 500, y: 300 };\n        const step = 1;  // 1 degree per frame\n\n        function draw() {\n            clearCanvas(ctx);\n            drawPoint(ctx, center, 'blue');\n            drawPoint(ctx, point, 'red');\n            drawArrow(ctx, center, point);\n\n            drawResults(ctx, [\n                ['Center', center],\n                ['Point', point],\n                ['Angle (deg)', angle.degreesBetweenPoints(center, point)],\n                'Click to set center, move mouse for point'\n            ]);\n        }\n\n        move({ canvas, draw }, pos => point = pos);\n        click({ canvas, draw }, pos => center = pos);\n        animate(draw, () => point = angle.rotateAroundByDegrees(center, point, step));\n    },\n\n    rotateAngleTowardsRadians: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        let currentAngle = 0;\n        let center = { x: 400, y: 300 };\n        let target = { x: 500, y: 300 };\n        let step = Math.PI / 180 / 3;\n\n        function draw() {\n            clearCanvas(ctx);\n            drawPoint(ctx, center, 'blue');\n            drawPoint(ctx, target, 'red');\n            \n            const arrowEnd = vector.add(center, vector.fromAngleRadians(currentAngle, 100));\n            drawArrow(ctx, center, arrowEnd);\n\n            drawResults(ctx, [\n                ['Current Angle', currentAngle],\n                ['Target Angle', angle.radiansBetweenPoints(center, target)],\n                ['Speed', step],\n                'Move mouse to change target',\n                'Press +/- to adjust speed'\n            ]);\n        }\n\n        move({ canvas, draw }, pos => target = pos);\n        key({ canvas, draw }, {\n            '+': () => step *= 1.5,\n            '-': () => step /= 1.5\n        });\n        animate(draw, () => currentAngle = angle.rotateAngleTowardsRadians(currentAngle, angle.radiansBetweenPoints(center, target), step));\n    },\n\n    rotateAngleTowardsDegrees: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        let currentAngle = 0;\n        let center = { x: 400, y: 300 };\n        let target = { x: 500, y: 300 };\n        let step = .33;\n\n        function draw() {\n            clearCanvas(ctx);\n            drawPoint(ctx, center, 'blue');\n            drawPoint(ctx, target, 'red');\n            \n            const arrowEnd = vector.add(center, vector.fromAngleDegrees(currentAngle, 100));\n            drawArrow(ctx, center, arrowEnd);\n\n            drawResults(ctx, [\n                ['Current Angle', currentAngle],\n                ['Target Angle', angle.degreesBetweenPoints(center, target)],\n                ['Speed', step],\n                'Move mouse to change target',\n                'Press +/- to adjust speed'\n            ]);\n        }\n\n        move({ canvas, draw }, pos => target = pos);\n        key({ canvas, draw }, {\n            '+': () => step *= 1.5,\n            '-': () => step /= 1.5\n        });\n        animate(draw, () => currentAngle = angle.rotateAngleTowardsDegrees(currentAngle, angle.degreesBetweenPoints(center, target), step));\n    }\n};\n","import { Line, Point } from './types';\nimport { distance } from './point';\n\n/**\n * Converts degrees to radians\n * @example\n * degreesToRadians(180) // returns Math.PI\n */\nexport const degreesToRadians = (degrees: number): number => {\n  return (degrees * Math.PI) / 180;\n}\n\n/**\n * Converts radians to degrees\n * @example\n * radiansToDegrees(Math.PI) // returns 180\n */\nexport const radiansToDegrees = (radians: number): number => {\n  return (radians * 180) / Math.PI;\n}\n\n/**\n * Calculates angle between two lines in radians\n * @example\n * const horizontal = { start: {x:0,y:0}, end: {x:1,y:0} };\n * const vertical = { start: {x:0,y:0}, end: {x:0,y:0}, end: {x:0,y:1} };\n * radiansBetweenLines(horizontal, vertical) // returns Math.PI/2 (90 degrees)\n */\nexport const radiansBetweenLines = (line1: Line, line2: Line): number => {\n  const dx1 = line1.end.x - line1.start.x;\n  const dy1 = line1.end.y - line1.start.y;\n  const dx2 = line2.end.x - line2.start.x;\n  const dy2 = line2.end.y - line2.start.y;\n\n  const dotProduct = dx1 * dx2 + dy1 * dy2;\n  const magnitude1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);\n  const magnitude2 = Math.sqrt(dx2 * dx2 + dy2 * dy2);\n\n  const cosTheta = dotProduct / (magnitude1 * magnitude2);\n  return Math.acos(cosTheta);\n}\n\n/**\n * Calculates angle between two lines in degrees\n * @example\n * const horizontal = { start: {x:0,y:0}, end: {x:1,y:0} };\n * const diagonal = { start: {x:0,y:0}, end: {x:1,y:1} };\n * degreesBetweenLines(horizontal, diagonal) // returns 45\n */\nexport const degreesBetweenLines = (line1: Line, line2: Line): number => {\n  return radiansToDegrees(radiansBetweenLines(line1, line2));\n}\n\n/**\n * Gets angle in radians from p1 to p2 (0 = right, π/2 = down)\n * @example\n * const center = {x:0, y:0};\n * const point = {x:0, y:1};\n * radiansBetweenPoints(center, point) // returns Math.PI/2 (pointing down)\n */\nexport const radiansBetweenPoints = (p1: Point, p2: Point): number => {\n  const dx = p2.x - p1.x;\n  const dy = p2.y - p1.y;\n  return Math.atan2(dy, dx);\n}\n\n/**\n * Gets angle in degrees from p1 to p2 (0 = right, 90 = down)\n * @example\n * const center = {x:0, y:0};\n * const point = {x:-1, y:0};\n * degreesBetweenPoints(center, point) // returns 180 (pointing left)\n */\nexport const degreesBetweenPoints = (p1: Point, p2: Point): number => {\n  return radiansToDegrees(radiansBetweenPoints(p1, p2));\n}\n\n/**\n * Calculates smallest angle between two angles in degrees\n * @example\n * degreesBetweenAngles(350, 10) // returns 20 (not 340)\n * degreesBetweenAngles(0, 180) // returns 180\n */\nexport const degreesBetweenAngles = (degrees1: number, degrees2: number): number => {\n  const radians1 = degreesToRadians(degrees1);\n  const radians2 = degreesToRadians(degrees2);\n  const diff = radians2 - radians1;\n  return radiansToDegrees(Math.atan2(Math.sin(diff), Math.cos(diff)));\n}\n\n/**\n * Calculates smallest angle between two angles in radians\n * @example\n * radiansBetweenAngles(2*Math.PI-0.1, 0.1) // returns 0.2 (not 2*Math.PI-0.2)\n */\nexport const radiansBetweenAngles = (radians1: number, radians2: number): number => {\n  const diff = radians2 - radians1;\n  return Math.atan2(Math.sin(diff), Math.cos(diff));\n}\n\n/**\n * Rotates a point around a center point by an angle in radians\n * @example\n * const point = {x:2, y:0};\n * const center = {x:0, y:0};\n * rotateAroundByRadians(center, point, Math.PI/2) // returns {x:0, y:2}\n */\nexport const rotateAroundByRadians = (center: Point, point: Point, angleRadians: number): Point => {\n  const angleToTarget = radiansBetweenPoints(center, point);\n  const distanceToTarget = distance(center, point);\n\n  return {\n    x: center.x + Math.cos(angleToTarget + angleRadians) * distanceToTarget,\n    y: center.y + Math.sin(angleToTarget + angleRadians) * distanceToTarget,\n  };\n}\n\n/**\n * Rotates a point around a center point by an angle in degrees\n * @example\n * const point = {x:1, y:0};\n * const center = {x:0, y:0};\n * rotateAroundByDegrees(point, center, 90) // returns {x:0, y:1}\n */\nexport const rotateAroundByDegrees = (center: Point, point: Point, angleDegrees: number): Point => {\n  return rotateAroundByRadians(center, point, degreesToRadians(angleDegrees));\n}\n\n/**\n * Adjusts an angle towards the angle between two points by a specified amount,\n * choosing the shortest rotation path.\n * \n * @param currentAngleRadians - The current angle in radians\n * @param targetAngleRadians - The target angle in radians\n * @param rotateAmountRadians - Maximum amount to rotate by in radians\n * @returns The new angle in radians\n */\nexport const rotateAngleTowardsRadians = (\n  currentAngleRadians: number,\n  targetAngleRadians: number,\n  rotateAmountRadians: number\n): number => {\n  // Normalize angles to [0, 2π]\n  const current = ((currentAngleRadians % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);\n  const normalizedTarget = ((targetAngleRadians % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);\n\n  // Calculate shortest angular distance\n  let diff = normalizedTarget - current;\n  if (diff > Math.PI) diff -= 2 * Math.PI;\n  if (diff < -Math.PI) diff += 2 * Math.PI;\n\n  // Clamp rotation to the specified amount\n  const rotation = Math.abs(diff) <= rotateAmountRadians \n    ? diff \n    : Math.sign(diff) * rotateAmountRadians;\n\n  return current + rotation;\n};\n\n/**\n * Adjusts an angle towards the angle between two points by a specified amount,\n * choosing the shortest rotation path.\n * \n * @param currentAngleDegrees - The current angle in degrees\n * @param targetAngleDegrees - The target angle in degrees\n * @param rotateAmountDegrees - Maximum amount to rotate by in degrees\n * @returns The new angle in degrees\n */\nexport const rotateAngleTowardsDegrees = (\n  currentAngleDegrees: number,\n  targetAngleDegrees: number,\n  rotateAmountDegrees: number\n): number => {\n  return radiansToDegrees(\n    rotateAngleTowardsRadians(\n      degreesToRadians(currentAngleDegrees),\n      degreesToRadians(targetAngleDegrees),\n      degreesToRadians(rotateAmountDegrees)\n    )\n  );\n};","import { Vector2d } from \"./types\";\n\n/**\n * Creates a zero vector (0,0)\n * @example\n * zero() // returns {x: 0, y: 0}\n */\nexport const zero = (): Vector2d => ({ x: 0, y: 0 });\n\n/**\n * Adds two vectors\n * @example\n * add({x:1,y:2}, {x:3,y:4}) // returns {x:4,y:6}\n */\nexport const add = (v1: Vector2d, v2: Vector2d): Vector2d => ({ \n  x: v1.x + v2.x, \n  y: v1.y + v2.y \n});\n\n/**\n * Subtracts second vector from first\n * @example\n * subtract({x:3,y:4}, {x:1,y:1}) // returns {x:2,y:3}\n */\nexport const subtract = (v1: Vector2d, v2: Vector2d): Vector2d => ({ \n  x: v1.x - v2.x, \n  y: v1.y - v2.y \n});\n\n/**\n * Multiplies vector by scalar value\n * @example\n * scale({x:2,y:3}, 2) // returns {x:4,y:6}\n */\nexport const scale = (v: Vector2d, scalar: number): Vector2d => ({ \n  x: v.x * scalar, \n  y: v.y * scalar \n});\n\n/**\n * Calculates length of vector\n * @example\n * length({x:3,y:4}) // returns 5\n */\nexport const length = (v: Vector2d): number => \n  Math.sqrt(v.x * v.x + v.y * v.y);\n\n/**\n * Calculates the normal vector (perpendicular) between two vectors.\n * @param v1 First vector\n * @param v2 Second vector\n * @returns A normalized vector perpendicular to the edge from v1 to v2\n * @example\n * const v1 = { x: 0, y: 0 };\n * const v2 = { x: 1, y: 0 };\n * normal(v1, v2) // returns { x: 0, y: -1 }\n */\nexport const normal = (v1: Vector2d, v2: Vector2d): Vector2d => {\n    const edge = subtract(v2, v1);\n    return normalize({ x: -edge.y, y: edge.x }); // Perpendicular to the edge\n};\n\n/**\n * Returns unit vector (length 1) in same direction\n * @example\n * normalize({x:3,y:4}) // returns {x:0.6,y:0.8}\n */\nexport const normalize = (v: Vector2d): Vector2d => {\n  const len = length(v);\n  return len === 0 ? zero() : scale(v, 1 / len);\n};\n\n/**\n * Clamps vector length between a minimum and maximum value while preserving direction.\n * @param v The vector to clamp.\n * @param minLength The minimum length of the vector.\n * @param maxLength The maximum length of the vector.\n * @example\n * clampLength({x:3,y:4}, 2, 5) // returns {x:3,y:4} (unchanged)\n * clampLength({x:3,y:4}, 6, 10) // returns {x:4.5,y:6} (scaled up to min length)\n * clampLength({x:3,y:4}, 1, 3) // returns {x:1.8,y:2.4} (scaled down to max length)\n */\nexport const clamp = (v: Vector2d, minLength: number, maxLength: number): Vector2d => {\n    const len = length(v);\n    const clampedLength = Math.max(minLength, Math.min(maxLength, len));\n    return scale(normalize(v), clampedLength);\n};\n\n/**\n * Linear interpolation between two vectors.\n * @param start Starting vector\n * @param end Ending vector\n * @param t Interpolation value (0-1). 0 = start, 1 = end, 0.5 = halfway between\n */\nexport const interpolate = (start: Vector2d, end: Vector2d, t: number): Vector2d => ({\n  x: start.x + (end.x - start.x) * t,\n  y: start.y + (end.y - start.y) * t\n});\n\n/**\n * Inverse linear interpolation - returns how far along the interpolation a point is\n * @returns Value between 0-1 representing position between start and end\n */\nexport const interpolateInverse = (start: Vector2d, end: Vector2d, point: Vector2d): number => {\n  const dx = end.x - start.x;\n  const dy = end.y - start.y;\n  const dp = subtract(point, start);\n  return Math.max(0, Math.min(1, (dp.x * dx + dp.y * dy) / (dx * dx + dy * dy)));\n};\n\n/**\n * Reflects a vector off a surface using formula R = V - 2(V·N)N\n * @param vector The incoming vector V (like velocity)\n * @param normal The normalized surface normal N\n * @example\n * const velocity = {x:1, y:1};\n * const wallNormal = {x:1, y:0};\n * reflect(velocity, wallNormal) // returns {x:-1, y:1}\n */\nexport const reflect = (vector: Vector2d, normal: Vector2d): Vector2d => {\n    // Using reflection formula R = V - 2(V·N)N\n    const dotProduct = 2 * dot(vector, normal); // 2(V·N)\n    return {\n        x: vector.x - dotProduct * normal.x,\n        y: vector.y - dotProduct * normal.y\n    };\n};\n\n/**\n * Creates a vector from an angle and length\n * @param angleRadians Angle in radians (0 = right, π/2 = down)\n * @param length Length of resulting vector\n * @example\n * fromAngleRadians(Math.PI/2, 5) // returns {x:0, y:5} (pointing down with length 5)\n */\nexport const fromAngleRadians = (angleRadians: number, length: number): Vector2d => ({\n    x: Math.cos(angleRadians) * length,\n    y: Math.sin(angleRadians) * length\n});\n\n/**\n * Creates a vector from an angle in degrees and length\n * @param angleDegrees Angle in degrees (0 = right, 90 = down)\n * @param length Length of resulting vector\n * @example\n * fromAngleDegrees(90, 5) // returns {x:0, y:5} (pointing down with length 5)\n */\nexport const fromAngleDegrees = (angleDegrees: number, length: number): Vector2d => \n    fromAngleRadians(angleDegrees * Math.PI / 180, length);\n\n/**\n * Rotates a vector by an angle in radians\n * @param v Vector to rotate\n * @param angleRadians Angle in radians to rotate by (positive = clockwise)\n * @example\n * const v = {x:1, y:0};\n * rotateByRadians(v, Math.PI/2) // returns {x:0, y:1}\n */\nexport const rotateByRadians = (v: Vector2d, angleRadians: number): Vector2d => {\n    const cos = Math.cos(angleRadians);\n    const sin = Math.sin(angleRadians);\n    return {\n        x: v.x * cos - v.y * sin,\n        y: v.x * sin + v.y * cos\n    };\n};\n\n/**\n * Rotates a vector by an angle in degrees\n * @param v Vector to rotate\n * @param angleDegrees Angle in degrees to rotate by (positive = clockwise)\n * @example\n * const v = {x:1, y:0};\n * rotateByDegrees(v, 90) // returns {x:0, y:1}\n */\nexport const rotateByDegrees = (v: Vector2d, angleDegrees: number): Vector2d =>\n    rotateByRadians(v, angleDegrees * Math.PI / 180);\n\n/**\n * Calculates the dot product of two vectors\n * @example\n * const v1 = { x: 1, y: 0 };\n * const v2 = { x: 0, y: 1 };\n * dot(v1, v2) // returns 0\n */\nexport const dot = (v1: Vector2d, v2: Vector2d): number => \n  v1.x * v2.x + v1.y * v2.y;\n\n/**\n * Resizes a vector to a specified length while preserving its direction.\n * @param v The vector to resize.\n * @param newLength The desired length of the vector.\n * @example\n * resize({x:3, y:4}, 10) // returns {x:6, y:8}\n */\nexport const resize = (v: Vector2d, newLength: number): Vector2d => {\n    return scale(normalize(v), newLength);\n};\n\n","import { getLineIntersection } from \"./../../src/intersection\";\nimport * as intersection from '../../src/intersection';\nimport { DemoFunction } from './index';\nimport { clearCanvas, drawLine, drawPoint, drawCircle, drawResults, drag, click, move, key, ResultEntry, drawRect } from '../utils';\nimport { Circle, Point, point, vector } from '../../src';\n\nexport const intersectionDemos: Record<keyof typeof intersection, DemoFunction> = {\n\n    getLineIntersection: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        let line1 = { start: { x: 100, y: 100 }, end: { x: 300, y: 300 } };\n        let line2 = { start: { x: 100, y: 300 }, end: { x: 300, y: 100 } };\n        let draggedPoint: Point | null = null;\n\n        function draw() {\n            clearCanvas(ctx);\n            drawLine(ctx, line1, 'blue');\n            drawLine(ctx, line2, 'red');\n            const p = intersection.getLineIntersection(line1, line2);\n            if (p) drawPoint(ctx, p, 'green');\n\n            drawResults(ctx, [\n                ['Intersection', p || 'None'],\n                'Drag endpoints to adjust the lines'\n            ]);\n        }\n\n        drag({ canvas, draw }, {\n            onStart: pos => {\n                draggedPoint = point.closest(pos, [line1.start, line1.end, line2.start, line2.end]);\n            },\n            onDrag: pos => {\n                if (draggedPoint) {\n                    draggedPoint.x = pos.x;\n                    draggedPoint.y = pos.y;\n                }\n            },\n            onEnd: () => {\n                draggedPoint = null;\n            }\n        });\n\n        draw();\n    },\n\n    getLineCircleIntersections: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        let lineSegment = { start: { x: 100, y: 100 }, end: { x: 300, y: 300 } };\n        let circle = { x: 200, y: 200, radius: 50 };\n        let draggedPoint: Point | null = null;\n\n        function draw() {\n            clearCanvas(ctx);\n            drawLine(ctx, lineSegment, 'blue');\n            drawCircle(ctx, circle, 'red');\n            const intersections = intersection.getLineCircleIntersections(lineSegment, circle);\n            intersections.forEach(p => drawPoint(ctx, p, 'green'));\n\n            drawResults(ctx, [\n                ...intersections?.map<ResultEntry>(p => ['Intersection', p]) ?? [],\n                'Drag endpoints or circle to adjust'\n            ]);\n        }\n\n        drag({ canvas, draw }, {\n            onStart: pos => {\n                const points = [lineSegment.start, lineSegment.end, circle];\n                draggedPoint = point.closest(pos, points);\n            },\n            onDrag: pos => {\n                if (draggedPoint) {\n                    draggedPoint.x = pos.x;\n                    draggedPoint.y = pos.y;\n                }\n            },\n            onEnd: () => {\n                draggedPoint = null;\n            }\n        });\n\n        draw();\n    },\n\n    getLineRectIntersections: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        let lineSegment = { start: { x: 100, y: 100 }, end: { x: 300, y: 300 } };\n        let rect = { x: 150, y: 150, width: 100, height: 100 };\n        let draggedPoint: Point | null = null;\n\n        function draw() {\n            clearCanvas(ctx);\n            drawLine(ctx, lineSegment, 'blue');\n            drawRect(ctx, rect, 'red');\n            const intersections = intersection.getLineRectIntersections(lineSegment, rect);\n            intersections.forEach(p => drawPoint(ctx, p, 'green'));\n\n            drawResults(ctx, [\n                ...intersections?.map<ResultEntry>(p => ['Intersection', p]) ?? [],\n                'Drag endpoints or rectangle to adjust'\n            ]);\n        }\n\n        drag({ canvas, draw }, {\n            onStart: pos => {\n                const points = [lineSegment.start, lineSegment.end, rect];\n                draggedPoint = point.closest(pos, points);\n            },\n            onDrag: pos => {\n                if (draggedPoint) {\n                    draggedPoint.x = pos.x;\n                    draggedPoint.y = pos.y;\n                }\n            },\n            onEnd: () => {\n                draggedPoint = null;\n            }\n        });\n\n        draw();\n    },\n\n    getCircleOverlap: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        let circle1 = { x: 200, y: 200, radius: 100 };\n        let circle2 = { x: 300, y: 200, radius: 50 };\n        let draggedCircle: Point | null = null;\n\n        function draw() {\n            clearCanvas(ctx);\n            drawCircle(ctx, circle1, 'blue');\n            drawCircle(ctx, circle2, 'red');\n            const overlap = intersection.getCircleOverlap(circle1, circle2);\n\n            if (overlap > 0) {\n                // Use getLineCircleIntersections to find overlap center\n                const line = { start: circle1, end: circle2 };\n                const intersections = intersection.getLineCircleIntersections(line, {\n                    x: circle1.x,\n                    y: circle1.y,\n                    radius: circle1.radius - overlap / 2,\n                });\n\n                if (intersections.length > 0) {\n                    const overlapCenter = intersections[0];\n                    drawCircle(ctx, { x: overlapCenter.x, y: overlapCenter.y, radius: overlap / 2 }, 'green', true);\n                }\n            }\n\n            drawResults(ctx, [\n                ['Overlap Depth', overlap],\n                'Drag circles to adjust'\n            ]);\n        }\n\n        drag({ canvas, draw }, {\n            onStart: pos => {\n                const points = [circle1, circle2];\n                draggedCircle = point.closest(pos, points);\n            },\n            onDrag: pos => {\n                if (draggedCircle) {\n                    draggedCircle.x = pos.x;\n                    draggedCircle.y = pos.y;\n                }\n            },\n            onEnd: () => {\n                draggedCircle = null;\n            }\n        });\n\n        draw();\n    },\n\n    getRectanglesIntersection: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        let rect1 = { x: 100, y: 100, width: 150, height: 100 };\n        let rect2 = { x: 200, y: 150, width: 250, height: 150 };\n        let draggedRect: Point | null = null;\n\n        function draw() {\n            clearCanvas(ctx);\n            drawRect(ctx, rect1, 'blue');\n            drawRect(ctx, rect2, 'red');\n            const intersectionRect = intersection.getRectanglesIntersection(rect1, rect2);\n            if (intersectionRect) drawRect(ctx, intersectionRect, 'green', true);\n\n            drawResults(ctx, [\n                ['Intersection', intersectionRect || 'None'],\n                'Drag rectangles to adjust'\n            ]);\n        }\n\n        drag({ canvas, draw }, {\n            onStart: pos => {\n                const points = [rect1, rect2];\n                draggedRect = point.closest(pos, points);\n            },\n            onDrag: pos => {\n                if (draggedRect) {\n                    draggedRect.x = pos.x;\n                    draggedRect.y = pos.y;\n                }\n            },\n            onEnd: () => {\n                draggedRect = null;\n            }\n        });\n\n        draw();\n    },\n};\n","import { Line, Circle, Rectangle, Point } from './types';\nimport { distance, midpoint } from './point';\nimport { rotateByRadians, scale, subtract, add, normalize } from './vector';\n\n\n/**\n * Finds the intersection point of two lines (if any).\n * @returns The intersection point or null if the lines do not intersect.\n */\nexport const getLineIntersection = (line1: Line, line2: Line): Point | null => {\n  const { start: p1, end: p2 } = line1;\n  const { start: p3, end: p4 } = line2;\n\n  const denom = (p1.x - p2.x) * (p3.y - p4.y) - (p1.y - p2.y) * (p3.x - p4.x);\n  if (denom === 0) return null; // Parallel lines\n\n  const t = ((p1.x - p3.x) * (p3.y - p4.y) - (p1.y - p3.y) * (p3.x - p4.x)) / denom;\n  const u = ((p1.x - p3.x) * (p1.y - p2.y) - (p1.y - p3.y) * (p1.x - p2.x)) / denom;\n\n  if (t >= 0 && t <= 1 && u >= 0 && u <= 1) {\n    return {\n      x: p1.x + t * (p2.x - p1.x),\n      y: p1.y + t * (p2.y - p1.y),\n    };\n  }\n\n  return null; // No intersection\n};\n\n/**\n * Finds the intersection points of a line and a circle (if any).\n * @returns An array of intersection points (0, 1, or 2 points).\n */\nexport const getLineCircleIntersections = (line: Line, circle: Circle): Point[] => {\n  const { start, end } = line;\n  const { x: cx, y: cy, radius } = circle;\n\n  const dx = end.x - start.x;\n  const dy = end.y - start.y;\n\n  const a = dx * dx + dy * dy;\n  const b = 2 * (dx * (start.x - cx) + dy * (start.y - cy));\n  const c = (start.x - cx) ** 2 + (start.y - cy) ** 2 - radius ** 2;\n\n  const discriminant = b * b - 4 * a * c;\n  if (discriminant < 0) return []; // No intersection\n\n  const t1 = (-b - Math.sqrt(discriminant)) / (2 * a);\n  const t2 = (-b + Math.sqrt(discriminant)) / (2 * a);\n\n  const points: Point[] = [];\n  if (t1 >= 0 && t1 <= 1) {\n    points.push({ x: start.x + t1 * dx, y: start.y + t1 * dy });\n  }\n  if (t2 >= 0 && t2 <= 1) {\n    points.push({ x: start.x + t2 * dx, y: start.y + t2 * dy });\n  }\n\n  return points;\n};\n\n/**\n * Finds the intersection points of a line and a rectangle (if any).\n * @returns An array of intersection points (0, 1, or 2 points).\n */\nexport const getLineRectIntersections = (line: Line, rect: Rectangle): Point[] => {\n  const { x, y, width, height } = rect;\n\n  const rectLines: Line[] = [\n    { start: { x, y }, end: { x: x + width, y } }, // Top\n    { start: { x: x + width, y }, end: { x: x + width, y: y + height } }, // Right\n    { start: { x: x + width, y: y + height }, end: { x, y: y + height } }, // Bottom\n    { start: { x, y: y + height }, end: { x, y } }, // Left\n  ];\n\n  const intersections: Point[] = [];\n  rectLines.forEach(rectLine => {\n    const intersection = getLineIntersection(line, rectLine);\n    if (intersection) intersections.push(intersection);\n  });\n\n  return intersections;\n};\n\n/**\n * Checks if two circles overlap.\n * @returns The depth of overlap or 0 if no overlap.\n */\nexport const getCircleOverlap = (circle1: Circle, circle2: Circle): number => {\n  const d = distance(circle1, circle2);\n  const overlap = circle1.radius + circle2.radius - d;\n  return overlap > 0 ? overlap : 0; // Return overlap depth or 0 if no overlap\n};\n\n/**\n * Returns the intersection rectangle of two rectangles or null if there is no overlap.\n * @returns The intersection rectangle or null if there is no overlap.\n */\nexport const getRectanglesIntersection = (rect1: Rectangle, rect2: Rectangle): Rectangle | null => {\n  const x = Math.max(rect1.x, rect2.x);\n  const y = Math.max(rect1.y, rect2.y);\n  const width = Math.min(rect1.x + rect1.width, rect2.x + rect2.width) - x;\n  const height = Math.min(rect1.y + rect1.height, rect2.y + rect2.height) - y;\n\n  if (width > 0 && height > 0) {\n    return { x, y, width, height };\n  }\n\n  return null; // No intersection\n};","export * from './types';\nexport * as point from './point';\nexport * as intersection from './intersection';\nexport * as angle from './angle';\nexport * as vector from './vector';\nexport * as physics from './physics';\nexport * from './PhysicalBody';","export type Point = {\n  x: number;\n  y: number;\n}\n\nexport type Line = {\n  start: Point;\n  end: Point;\n}\n\nexport type Circle = {\n  x: number;\n  y: number;\n  radius: number;\n}\n\nexport type Rectangle = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\nexport type Vector2d = Point;","import { distance, distanceSquared } from \"./point\";\nimport { Point, Vector2d } from \"./types\";\nimport { add, dot, fromAngleRadians, normalize, scale, subtract } from \"./vector\";\n\n/**\n * Modifies velocity/acceleration/position vector by applying a force\n * @param vector Vector to modify\n * @param force Force to apply\n * @param scaler Object mass (affects force impact) or time scale\n */\nexport const applyForce = (vector: Vector2d, force: Vector2d, scaler: number = 1): void => {\n    vector.x += force.x * scaler;\n    vector.y += force.y * scaler;\n};\n\n/**\n * Modifies velocity/acceleration vector by applying friction (direct velocity reduction)\n * @param vector Vector to modify (like velocity)\n * @param damping Amount of friction (0 = no friction, 1 = full stop)\n */\nexport const applyDamping = (vector: Vector2d, damping: number): void => {\n    vector.x *= (1 - damping);\n    vector.y *= (1 - damping);\n};\n\n/**\n * Modifies angular velocity by applying torque\n */\nexport const applyTorque = (angularVelocity: number, torque: number, scaler: number = 1): number => {\n    return angularVelocity + torque * scaler;\n};\n\n/**\n * Modifies velocity vector by applying force in direction of angle\n */\nexport const applyAngleForce = (vector: Vector2d, angle: number, force: number, scaler: number = 1): void => {\n    applyForce(\n      vector, \n      fromAngleRadians(angle, force), \n      scaler\n    );\n};\n\ninterface CollisionObject {\n  position: Vector2d;\n  velocity: Vector2d;\n  mass: number;\n  radius: number;\n}\n\n/**\n * Calculates collision response between two objects using impulse-based collision.\n * @param obj1 First object\n * @param obj2 Second object\n * @param restitution Bounciness factor (1 = perfect elastic, 0 = no bounce)\n * @param resolveOverlapMode Mode to resolve overlap ('separate', 'repel', 'none')\n */\nexport const collide = (\n  obj1: CollisionObject,\n  obj2: CollisionObject,\n  restitution = 0.9,\n  resolveOverlapMode: 'separate' | 'repel' | 'none' = 'separate'\n): void => {\n  const normal = normalize(subtract(obj2.position, obj1.position));\n  const relativeVelocity = subtract(obj2.velocity, obj1.velocity);\n\n  // Check if objects are moving toward each other\n  const velocityAlongNormal = dot(relativeVelocity, normal);\n  if (velocityAlongNormal <= 0) {\n\n    // Calculate impulse\n    const impulseMagnitude = -(1 + restitution) * velocityAlongNormal;\n    const impulse = impulseMagnitude / (1 / obj1.mass + 1 / obj2.mass);\n\n    // Apply impulse\n    const impulseVector = scale(normal, impulse);\n    obj1.velocity = subtract(obj1.velocity, scale(impulseVector, 1 / obj1.mass));\n    obj2.velocity = add(obj2.velocity, scale(impulseVector, 1 / obj2.mass));\n  }\n\n  // Handle overlap resolution based on mode\n  if (resolveOverlapMode === 'separate') {\n    separate(obj1, obj2);\n  } else if (resolveOverlapMode === 'repel') {\n    repel(obj1, obj2);\n  }\n};\n\n/**\n * Resolves overlap between two objects by adjusting their positions.\n * @param obj1 First object\n * @param obj2 Second object\n */\nexport const separate = (\n  obj1: CollisionObject,\n  obj2: CollisionObject\n): void => {\n  const normal = subtract(obj2.position, obj1.position);\n  const dist = distance(obj1.position, obj2.position);\n\n  // Check if there is overlap\n  const overlap = obj1.radius + obj2.radius - dist;\n  if (overlap <= 0) {\n    return; // No overlap\n  }\n\n  // Handle case where positions are identical\n  const direction = dist === 0 ? { x: 1, y: 0 } : scale(normal, 1 / dist);\n\n  // Calculate the correction vector\n  const totalMass = obj1.mass + obj2.mass;\n  const correction = scale(direction, overlap);\n\n  // Distribute the correction based on the masses\n  const obj1Correction = scale(correction, obj2.mass / totalMass);\n  const obj2Correction = scale(correction, obj1.mass / totalMass);\n\n  // Adjust the positions of the objects\n  obj1.position = subtract(obj1.position, obj1Correction);\n  obj2.position = add(obj2.position, obj2Correction);\n};\n\n/**\n * Calculates repulsion force between two objects based on their overlap\n * @param obj1 First object\n * @param obj2 Second object\n * @param strength Repulsion strength multiplier (default: 1)\n * \n * @example\n * // Soft body collision\n * repel(\n *   ball1,\n *   ball2,\n *   1000 // strong repulsion\n * );\n */\nexport const repel = (\n  obj1: CollisionObject,\n  obj2: CollisionObject,\n  strength: number = 1\n): void => {\n  const normal = subtract(obj2.position, obj1.position);\n  const dist = distance(obj1.position, obj2.position);\n  const overlap = obj1.radius + obj2.radius - dist;\n\n  // Only apply repulsion if overlapping\n  if (overlap <= 0 || dist === 0) {\n    return;\n  }\n\n  // Normalize the direction vector\n  const direction = scale(normal, 1 / dist);\n\n  // Calculate repulsion force based on overlap and scale by strength\n  const repulsionForce = overlap * strength;\n\n  // Calculate repulsion force proportional to mass difference\n  const totalMass = obj1.mass + obj2.mass;\n  const obj1Strength = (obj2.mass / totalMass) * repulsionForce;\n  const obj2Strength = (obj1.mass / totalMass) * repulsionForce;\n\n  // Apply repulsion forces to velocities\n  obj1.velocity = subtract(obj1.velocity, scale(direction, obj1Strength));\n  obj2.velocity = add(obj2.velocity, scale(direction, obj2Strength));\n};\n\ninterface FluidParticle {\n  position: Vector2d;\n  velocity: Vector2d;\n  density: number;\n  pressure: number;\n  mass: number;\n}\n\n/**\n * Simple fluid simulation using Smooth Particle Hydrodynamics (SPH)\n * @param particles Array of fluid particles\n * @param smoothingRadius Radius of influence for each particle\n * @param stiffness Pressure constant (k)\n * @param restDensity Target density of fluid\n * @param viscosity Viscosity coefficient\n * @returns Array of forces to apply to each particle\n * \n * @example\n * // Water simulation\n * const forces = resolveFluid(\n *   particles,\n *   30,    // interaction radius\n *   50,    // pressure stiffness\n *   1,     // rest density\n *   0.1    // viscosity\n * );\n * particles.forEach((p, i) => \n *   p.applyForce(forces[i])\n * );\n */\nexport const fluid = (\n  particles: FluidParticle[],\n  {\n    smoothingRadius = 30,\n    stiffness = 50,\n    restDensity = 1,\n    viscosity = 0.1\n  }: {\n    smoothingRadius?: number;\n    stiffness?: number;\n    restDensity?: number;\n    viscosity?: number;\n  } = {}\n): Vector2d[] => {\n  const forces = particles.map(() => ({ x: 0, y: 0 }));\n  const gridSize = smoothingRadius; // Size of each grid cell\n  const grid: Record<string, FluidParticle[]> = {};\n\n  // Helper to compute grid key\n  const getGridKey = (x: number, y: number) => `${Math.floor(x / gridSize)},${Math.floor(y / gridSize)}`;\n\n  // Populate the grid\n  particles.forEach(p => {\n    const key = getGridKey(p.position.x, p.position.y);\n    if (!grid[key]) grid[key] = [];\n    grid[key].push(p);\n  });\n\n  // Calculate densities\n  particles.forEach(p => {\n    p.density = 0;\n    const key = getGridKey(p.position.x, p.position.y);\n\n    // Check neighboring cells\n    const [gx, gy] = key.split(',').map(Number);\n    for (let dx = -1; dx <= 1; dx++) {\n      for (let dy = -1; dy <= 1; dy++) {\n        const neighborKey = `${gx + dx},${gy + dy}`;\n        const neighbors = grid[neighborKey] || [];\n        neighbors.forEach(neighbor => {\n          const dist = Math.sqrt(distanceSquared(p.position, neighbor.position));\n          if (dist < smoothingRadius) {\n            p.density += neighbor.mass * (1 - dist / smoothingRadius);\n          }\n        });\n      }\n    }\n\n    // Calculate pressure from density\n    p.pressure = stiffness * (p.density - restDensity);\n  });\n\n  // Calculate forces\n  particles.forEach((p, i) => {\n    const key = getGridKey(p.position.x, p.position.y);\n\n    // Check neighboring cells\n    const [gx, gy] = key.split(',').map(Number);\n    for (let dx = -1; dx <= 1; dx++) {\n      for (let dy = -1; dy <= 1; dy++) {\n        const neighborKey = `${gx + dx},${gy + dy}`;\n        const neighbors = grid[neighborKey] || [];\n        neighbors.forEach(neighbor => {\n          if (p === neighbor) return;\n\n          const dist = distance(p.position, neighbor.position);\n          if (dist < smoothingRadius) {\n            // Direction from p to neighbor\n            const dir = normalize(subtract(neighbor.position, p.position));\n\n            // Pressure force (repels particles in compressed regions)\n            const pressureForce = scale(dir,\n              -(p.pressure + neighbor.pressure) *\n              (1 - dist / smoothingRadius) /\n              (2 * p.density * neighbor.density)\n            );\n\n            // Viscosity force (averages out velocities)\n            const relativeVel = subtract(neighbor.velocity, p.velocity);\n            const viscosityForce = scale(relativeVel,\n              viscosity * (1 - dist / smoothingRadius) /\n              (p.density * neighbor.density)\n            );\n\n            forces[i] = add(forces[i], scale(add(pressureForce, viscosityForce), p.mass * neighbor.mass));\n          }\n        });\n      }\n    }\n  });\n\n  return forces;\n};\n\ninterface Boid {\n  position: Vector2d;\n  velocity: Vector2d;\n  mass?: number;\n}\n\ninterface BoidRules {\n  separationRadius?: number;   // Radius to avoid other boids\n  alignmentRadius?: number;    // Radius to match velocity\n  cohesionRadius?: number;     // Radius to move toward center\n  separationWeight?: number;   // How strongly to avoid others\n  alignmentWeight?: number;    // How strongly to match velocity\n  cohesionWeight?: number;     // How strongly to move to center\n  maxSpeed?: number;           // Maximum velocity magnitude\n}\n\n/**\n * Calculates flocking behavior forces for a group of boids\n * @param boids Array of boids with position and velocity\n * @param rules Configuration for flocking behavior\n * @returns Array of forces to apply to each boid\n * \n * @example\n * // Bird flock simulation\n * const forces = resolveBoids(birds, {\n *   separationRadius: 25,  // personal space\n *   alignmentRadius: 50,   // match velocity range\n *   cohesionRadius: 50,    // group radius\n *   separationWeight: 2,   // strong avoidance\n *   alignmentWeight: 1.2,  // medium matching\n *   cohesionWeight: 1,     // normal grouping\n *   maxSpeed: 10           // speed limit\n * });\n * birds.forEach((bird, i) => \n *   bird.applyForce(forces[i])\n * );\n */\nexport const boids = (boids: Boid[], rules: BoidRules = {}): Vector2d[] => {\n  const {\n    separationRadius = 25,\n    alignmentRadius = 50,\n    cohesionRadius = 50,\n    separationWeight = 1,\n    alignmentWeight = 1,\n    cohesionWeight = 1,\n    maxSpeed = 10\n  } = rules;\n\n  return boids.map((boid, i) => {\n    let separation = { x: 0, y: 0 };\n    let alignment = { x: 0, y: 0 };\n    let cohesion = { x: 0, y: 0 };\n    let neighborCount = 0;\n\n    // Calculate forces from all neighbors\n    boids.forEach((other, j) => {\n      if (i === j) return;\n      \n      const dist = distance(boid.position, other.position);\n      \n      // Separation - avoid crowding\n      if (dist < separationRadius) {\n        const away = normalize(subtract(boid.position, other.position));\n        separation = add(separation, scale(away, 1 / Math.max(dist, 0.1)));\n      }\n      \n      // Alignment and Cohesion\n      if (dist < alignmentRadius) {\n        alignment = add(alignment, other.velocity);\n        cohesion = add(cohesion, other.position);\n        neighborCount++;\n      }\n    });\n\n    // Average and scale forces\n    let force = { x: 0, y: 0 };\n    \n    if (neighborCount > 0) {\n      // Normalize separation\n      if (separation.x !== 0 || separation.y !== 0) {\n        separation = normalize(separation);\n      }\n      \n      // Average alignment and cohesion\n      alignment = scale(alignment, 1 / neighborCount);\n      cohesion = scale(cohesion, 1 / neighborCount);\n      \n      // Move toward center of neighbors\n      cohesion = subtract(cohesion, boid.position);\n      \n      // Normalize forces\n      if (alignment.x !== 0 || alignment.y !== 0) alignment = normalize(alignment);\n      if (cohesion.x !== 0 || cohesion.y !== 0) cohesion = normalize(cohesion);\n      \n      // Combine forces with weights\n      force = add(\n        add(\n          scale(separation, separationWeight),\n          scale(alignment, alignmentWeight)\n        ),\n        scale(cohesion, cohesionWeight)\n      );\n    }\n\n    // Clamp to max speed\n    if (maxSpeed > 0) {\n      const speed = Math.sqrt(force.x * force.x + force.y * force.y);\n      if (speed > maxSpeed) {\n        force = scale(force, maxSpeed / speed);\n      }\n    }\n\n    return force;\n  });\n};\n\n\n","import { Circle, Point, Vector2d } from './types';\nimport * as vector from './vector';\nimport * as physics from './physics';\nimport { distance } from './point';\nimport { radiansBetweenPoints, rotateAngleTowardsRadians } from './angle';\n\n/**\n * PhysicalBody class for simulating physical objects in 2D space.\n * \n * It can be used for both top-down and side-view games.\n * \n * This class is a referance implementation for a 2D physics simulation.\n */\nexport class PhysicalBody {\n  /** Default downward gravity for 2D side-view games */\n  static DOWNWARD_GRAVITY: Vector2d = { x: 0, y: 980 };\n\n  /** General Properties (useful in all scenarios) */\n  position: Point = { x: 0, y: 0 }; // Current position in world space\n  velocity: Vector2d = vector.zero();      // Current movement speed & direction\n  acceleration: Vector2d = vector.zero();  // Current change in velocity\n  mass: number = 1;            // Mass affects force response & collisions\n  radius: number = 0;          // Collision radius\n  elasticity: number = 0.8;    // Bounce factor (0 = stop, 1 = perfect bounce)\n  collisionOverlapResolution: 'separate' | 'repel' | 'none' = 'separate'; // Overlap resolution mode\n  minSpeed: number = 0; // Velocity below this will be set to zero\n  maxSpeed?: number; // Velocity above this will be clamped to this value\n\n  /** Top-Down Properties (for top-down games like tanks, racing) */\n  angle: number = 0;           // Rotation angle in radians\n  angularVelocity: number = 0; // Speed of rotation\n  angularDrag: number = 0;     // Rotation damping\n  friction: number = 0;  // Ground friction (0 = slide forever, 1 = instant stop)\n\n  /** Side-View Properties (for platformers, physics games) */\n  gravity: Vector2d = vector.zero();  // Gravity force vector\n  drag: number = 0;   // Air drag (0 = none, 1 = instant stop)\n\n  constructor(props: Partial<PhysicalBody> = {}) {\n    Object.assign(this, props);\n  }\n\n  update(deltaTime: number) {\n    // Apply gravity directly as acceleration (no mass needed)\n    physics.applyForce(this.acceleration, this.gravity);\n    \n    // Apply ground friction for top-down movement\n    if (this.friction > 0) {\n      physics.applyDamping(this.velocity, this.friction);\n    }\n\n    // Apply air resistance for side-view movement\n    if (this.drag > 0) {\n      physics.applyDamping(this.velocity, this.drag);\n    }\n\n    // Update velocity with acceleration\n    physics.applyForce(this.velocity, this.acceleration, deltaTime);\n\n    // Clamp velocity to minSpeed and maxSpeed if set\n    const speed = vector.length(this.velocity);\n    if (this.maxSpeed !== undefined && speed > this.maxSpeed) {\n      this.velocity = vector.scale(vector.normalize(this.velocity), this.maxSpeed);\n    }\n    if (speed < this.minSpeed) {\n      this.velocity = vector.zero(); // Zero the velocity if below minSpeed\n    }\n\n    // Update position with velocity\n    physics.applyForce(this.position, this.velocity, deltaTime);\n    \n    // Update angle with angular velocity\n    this.angle += this.angularVelocity * deltaTime;\n    \n    // Apply angular drag\n    if (this.angularDrag > 0) {\n      this.angularVelocity = physics.applyTorque(this.angularVelocity, this.angularVelocity, 1 / this.mass);\n    }\n\n    // Reset forces\n    this.acceleration = vector.zero();\n    this.angularVelocity = 0;\n  }\n\n  /**\n   * Applies a continuous force that affects acceleration over time\n   * Example: Gravity, engine thrust, wind\n   * @param force The force vector to apply\n   */\n  applyForce(force: Vector2d) {\n    physics.applyForce(this.acceleration, force, 1 / this.mass);\n  }\n\n  /**\n   * Applies an instant change in velocity\n   * Example: Collision impact, jump, explosion knockback\n   * @param impulse The impulse vector (mass * velocity change)\n   */\n  applyImpulse(impulse: Vector2d) {\n    physics.applyForce(this.velocity, impulse, 1 / this.mass);\n  }\n\n  /**\n   * Applies a continuous rotational force\n   * Example: Steering torque, wind rotation\n   */\n  applyTorque(torque: number) {\n    this.angularVelocity = physics.applyTorque(this.angularVelocity, torque, 1 / this.mass);\n  }\n\n  /**\n   * Applies a continuous forward force in the direction of angle\n   * Example: Rocket engine, car acceleration\n   */\n  thrust(force: number, angle: number = this.angle) {\n    physics.applyAngleForce(this.acceleration, angle, force, this.mass);\n  }\n\n  /**\n   * Points the body towards a target point\n   */\n  pointAt(target: Point) {\n    this.angle = radiansBetweenPoints(this.position, target);\n  }\n\n  /**\n   * Gradually rotates the body towards a target point at a specified rotation speed.\n   * @param target The target point to rotate towards.\n   * @param rotationSpeed The maximum rotation speed in radians per second.\n   * @param deltaTime The time step for the rotation.\n   */\n  pointTowards(target: Point, rotationSpeed: number) {\n    const targetAngle = radiansBetweenPoints(this.position, target);\n    this.angle = rotateAngleTowardsRadians(this.angle, targetAngle, rotationSpeed);\n  }\n\n  collideWithBody(other: PhysicalBody): boolean {\n    if (this === other) return false; // Ignore self-collision\n\n    // Check if bodies are overlapping\n    const dist = distance(other.position, this.position);\n    if (dist > this.radius + other.radius) return false;\n\n    // Calculate bounciness from combined restitution (multiply elasticities)\n    const restitution = this.elasticity * other.elasticity;\n\n    // Resolve collision using physics library\n    physics.collide(this, other, restitution, this.collisionOverlapResolution);\n\n    return true;\n  }\n\n  collideWithSurface(point: Point, normal: Vector2d) {\n    // Normalize the normal vector\n    const n = vector.normalize(normal);\n    \n    // Calculate penetration (negative means penetrating)\n    const d = vector.dot(vector.subtract(this.position, point), n);\n    if (d >= this.radius) return;\n    \n    // Move out of surface by remaining distance\n    this.position = vector.add(\n      this.position,\n      vector.scale(n, this.radius - d)\n    );\n    \n    // Apply reflection with elasticity\n    this.velocity = vector.scale(\n      vector.reflect(this.velocity, n),\n      this.elasticity\n    );\n  }\n\n  // Getters and Setters for x position\n  get x() { return this.position.x; }\n  set x(value: number) { this.position.x = value; }\n\n  // Getters and Setters for y position\n  get y() { return this.position.y; }\n  set y(value: number) { this.position.y = value; }\n\n  get speed(): number {\n    return vector.length(this.velocity);\n  }\n\n  set speed(value: number) {\n    if (Math.abs(value) < this.minSpeed) {\n      this.velocity = vector.zero(); // Zero the velocity if below minSpeed\n    } else {\n      this.velocity = vector.resize(this.velocity, value);\n    }\n  }\n}\n","import * as vector from '../../src/vector';\nimport * as point from '../../src/point';\nimport * as angle from '../../src/angle';\nimport { DemoFunction } from './index';\nimport { clearCanvas, drawPoint, drawLine, drawResults, drawArrow, drag, move, key, drawCircle, animate, drawAxes, drawWithOffset } from '../utils';\n\nexport const vectorDemos: Record<keyof typeof vector, DemoFunction> = {\n    zero: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        const center = { x: canvas.width / 2, y: canvas.height / 2 };\n        const origin = { x: 0, y: 0 };\n        const v = vector.zero();\n\n        function draw() {\n            clearCanvas(ctx);\n            drawWithOffset(ctx, center, (ctx) => {\n                drawAxes(ctx);\n                drawArrow(ctx, origin, v, 'blue');\n            });\n\n            drawResults(ctx, [\n                ['Vector', v],\n                'Zero vector has no direction or length'\n            ]);\n        }\n\n        draw();\n    },\n\n    add: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        const center = { x: canvas.width / 2, y: canvas.height / 2 };\n        const origin = { x: 0, y: 0 };\n        let v1 = { x: 100, y: 0 };\n        let v2 = { x: 0, y: 100 };\n\n        function draw() {\n            clearCanvas(ctx);\n            drawWithOffset(ctx, center, (ctx) => {\n                drawAxes(ctx);\n                drawArrow(ctx, origin, v1, 'blue');\n                drawArrow(ctx, v1, vector.add(v1, v2), 'red');\n                drawArrow(ctx, origin, vector.add(v1, v2), 'green');\n            });\n\n            drawResults(ctx, [\n                ['Vector 1', v1],\n                ['Vector 2', v2],\n                ['Sum', vector.add(v1, v2)],\n                'Drag blue/red arrows to adjust vectors'\n            ]);\n        }\n\n        drag({ canvas, draw, center }, {\n            onDrag: (pos) => {\n                const end1 = vector.add(origin, v1);\n                const end2 = vector.add(end1, v2);\n                const closest = point.closest(pos, [end1, end2]);\n                if (closest === end1) v1 = vector.subtract(pos, origin);\n                else v2 = vector.subtract(pos, end1);\n            }\n        });\n\n        draw();\n    },\n\n    subtract: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        const center = { x: canvas.width / 2, y: canvas.height / 2 };\n        const origin = { x: 0, y: 0 };\n        let v1 = { x: 100, y: 0 };\n        let v2 = { x: 0, y: 100 };\n\n        function draw() {\n            clearCanvas(ctx);\n            drawWithOffset(ctx, center, (ctx) => {\n                drawAxes(ctx);\n                drawArrow(ctx, origin, v1, 'blue');\n                drawArrow(ctx, origin, v2, 'red');\n                drawArrow(ctx, origin, vector.subtract(v1, v2), 'green');\n            });\n\n            drawResults(ctx, [\n                ['Vector 1', v1],\n                ['Vector 2', v2],\n                ['Difference', vector.subtract(v1, v2)],\n                'Drag blue/red arrows to adjust vectors'\n            ]);\n        }\n\n        drag({ canvas, draw, center }, {\n            onDrag: (pos) => {\n                const end1 = vector.add(origin, v1);\n                const end2 = vector.add(origin, v2);\n                const closest = point.closest(pos, [end1, end2]);\n                if (closest === end1) v1 = vector.subtract(pos, origin);\n                else v2 = vector.subtract(pos, origin);\n            }\n        });\n\n        draw();\n    },\n\n    scale: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        const center = { x: canvas.width / 2, y: canvas.height / 2 };\n        const origin = { x: 0, y: 0 };\n        let v = { x: 100, y: 0 };\n        let scale = 0.75;\n\n        function draw() {\n            clearCanvas(ctx);\n            drawWithOffset(ctx, center, (ctx) => {\n                drawAxes(ctx);\n                drawArrow(ctx, origin, v, 'blue');\n                drawArrow(ctx, origin, vector.scale(v, scale), 'green');\n            });\n\n            drawResults(ctx, [\n                ['Vector', v],\n                ['Scale', scale],\n                ['Result', vector.scale(v, scale)],\n                'Drag blue arrow to adjust vector',\n                'Use +/- to adjust scale'\n            ]);\n        }\n\n        drag({ canvas, draw, center }, {\n            onDrag: (pos) => (v = pos)\n        });\n\n        key({ canvas, draw }, {\n            '+': () => (scale *= 1.1),\n            '-': () => (scale /= 1.1)\n        });\n\n        draw();\n    },\n\n    length: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        const center = { x: canvas.width / 2, y: canvas.height / 2 };\n        const origin = { x: 0, y: 0 };\n        let v = { x: 100, y: 0 };\n\n        function draw() {\n            clearCanvas(ctx);\n            drawWithOffset(ctx, center, (ctx) => {\n                drawAxes(ctx);\n                drawArrow(ctx, origin, v, 'blue');\n            });\n\n            drawResults(ctx, [\n                ['Vector', v],\n                ['Length', vector.length(v)],\n                'Drag arrow to adjust vector'\n            ]);\n        }\n\n        drag({ canvas, draw }, {\n            onDrag: (pos) => (v = vector.subtract(pos, center))\n        });\n\n        draw();\n    },\n\n    normal: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        const center = { x: canvas.width / 2, y: canvas.height / 2 };\n        const origin = { x: 0, y: 0 };\n        let p1 = { x: center.x - 100, y: center.y };\n        let p2 = { x: center.x + 100, y: center.y };\n\n        function draw() {\n            clearCanvas(ctx);\n\n            // Draw points and line\n            drawPoint(ctx, p1, 'blue');\n            drawPoint(ctx, p2, 'red');\n            drawLine(ctx, { start: p1, end: p2 }, 'gray');\n\n            // Calculate and draw normal\n            const normalVector = vector.normal(p1, p2);\n            const normalStart = vector.interpolate(p1, p2, 0.5); // Midpoint\n            const normalEnd = vector.add(normalStart, vector.scale(normalVector, 50));\n            drawArrow(ctx, normalStart, normalEnd, 'green');\n\n            drawResults(ctx, [\n                ['Point 1', p1],\n                ['Point 2', p2],\n                ['Normal', normalVector],\n                'Drag blue/red points to adjust'\n            ]);\n        }\n\n        drag({ canvas, draw }, {\n            onDrag: (pos) => {\n                const closest = point.closest(pos, [p1, p2]);\n                if (closest === p1) p1 = pos;\n                else p2 = pos;\n            }\n        });\n\n        draw();\n    },\n\n    normalize: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        const center = { x: canvas.width / 2, y: canvas.height / 2 };\n        const origin = { x: 0, y: 0 };\n        let v = { x: 100, y: 0 };\n\n        function draw() {\n            clearCanvas(ctx);\n            drawWithOffset(ctx, center, (ctx) => {\n                drawAxes(ctx);\n                drawArrow(ctx, origin, v, 'blue');\n                drawArrow(ctx, origin, vector.normalize(v), 'green');\n            });\n\n            drawResults(ctx, [\n                ['Vector', v],\n                ['Length', vector.length(v)],\n                ['Normalized', vector.normalize(v)],\n                'Drag arrow to adjust vector'\n            ]);\n        }\n\n        drag({ canvas, draw, center }, {\n            onDrag: (pos) => v = pos\n        });\n\n        draw();\n    },\n\n    clamp: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        const center = { x: canvas.width / 2, y: canvas.height / 2 };\n        const origin = { x: 0, y: 0 };\n        let v = { x: 100, y: 0 };\n        let minLength = 50;\n        let maxLength = 100;\n\n        function draw() {\n            clearCanvas(ctx);\n            drawWithOffset(ctx, center, (ctx) => {\n                drawAxes(ctx);\n                drawArrow(ctx, origin, v, 'blue');\n                drawArrow(ctx, origin, vector.clamp(v, minLength, maxLength), 'green');\n                drawCircle(ctx, { x: 0, y: 0, radius: maxLength }, 'gray'); // Max length boundary\n                drawCircle(ctx, { x: 0, y: 0, radius: minLength }, 'lightgray'); // Min length boundary\n            });\n\n            drawResults(ctx, [\n                ['Vector', v],\n                ['Length', vector.length(v)],\n                ['Min Length', minLength],\n                ['Max Length', maxLength],\n                'Drag arrow to adjust vector',\n                'Use +/- to adjust max length',\n                'Use [/] to adjust min length'\n            ]);\n        }\n\n        drag({ canvas, draw, center }, {\n            onDrag: (pos) => v = pos\n        });\n\n        key({ canvas, draw }, {\n            '+': () => (maxLength += 10),\n            '-': () => (maxLength = Math.max(minLength + 10, maxLength - 10)),\n            '[': () => (minLength = Math.max(0, minLength - 10)),\n            ']': () => (minLength = Math.min(maxLength - 10, minLength + 10))\n        });\n\n        draw();\n    },\n\n    interpolate: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        const center = { x: canvas.width / 2, y: canvas.height / 2 };\n        const origin = { x: 0, y: 0 };\n        let v1 = { x: -100, y: 0 };\n        let v2 = { x: 100, y: 0 };\n        let t = 0.5;\n\n        function draw() {\n            clearCanvas(ctx);\n            drawWithOffset(ctx, center, (ctx) => {\n                drawAxes(ctx);\n                const result = vector.interpolate(v1, v2, t);\n                drawArrow(ctx, origin, v1, 'blue');\n                drawArrow(ctx, origin, v2, 'red');\n                drawArrow(ctx, origin, result, 'green');\n            });\n\n            drawResults(ctx, [\n                ['Vector 1', v1],\n                ['Vector 2', v2],\n                ['t', t],\n                ['Result', vector.interpolate(v1, v2, t)],\n                'Drag blue/red arrows to adjust vectors',\n                'Use +/- to adjust t'\n            ]);\n        }\n\n        drag({ canvas, draw, center }, {\n            onDrag: (pos) => {\n                const closest = point.closest(pos, [v1, v2]);\n                closest.x = pos.x;\n                closest.y = pos.y;\n            }\n        });\n\n        key({ canvas, draw }, {\n            '+': () => (t = Math.min(1, t + 0.1)),\n            '-': () => (t = Math.max(0, t - 0.1))\n        });\n\n        draw();\n    },\n\n    interpolateInverse: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        const center = { x: canvas.width / 2, y: canvas.height / 2 };\n        const origin = { x: 0, y: 0 };\n        let v1 = { x: -100, y: 0 };\n        let v2 = { x: 100, y: 0 };\n        let p = { x: 0, y: 0 };\n\n        function draw() {\n            clearCanvas(ctx);\n            drawWithOffset(ctx, center, (ctx) => {\n                drawAxes(ctx);\n                const t = vector.interpolateInverse(v1, v2, p);\n                const projected = vector.interpolate(v1, v2, t);\n                drawArrow(ctx, origin, v1, 'blue');\n                drawArrow(ctx, origin, v2, 'red');\n                drawPoint(ctx, p, 'green');\n                drawPoint(ctx, projected, 'black');\n                drawLine(ctx, { start: p, end: projected }, 'gray');\n            });\n\n            drawResults(ctx, [\n                ['Start', v1],\n                ['End', v2],\n                ['Point', p],\n                ['t', vector.interpolateInverse(v1, v2, p)],\n                'Drag blue/red arrows for vectors',\n                'Move mouse to test positions'\n            ]);\n        }\n\n        move({ canvas, draw, center }, (pos) => {\n            p = pos;\n        });\n\n        drag({ canvas, draw, center }, {\n            onDrag: (pos) => {\n                const closest = point.closest(pos, [v1, v2]);\n                closest.x = pos.x;\n                closest.y = pos.y;\n            }\n        });\n\n        draw();\n    },\n\n    reflect: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        const center = { x: canvas.width / 2, y: canvas.height / 2 };\n        const origin = { x: 0, y: 0 };\n        let velocity = { x: 100, y: 100 };\n        let normal = vector.fromAngleRadians(0, 1);\n        const rotateAmount = Math.PI / 12;\n        let restitution = 1;\n\n        function draw() {\n            clearCanvas(ctx);\n            drawWithOffset(ctx, center, (ctx) => {\n                drawAxes(ctx);\n                const normalVec = vector.scale(vector.normalize(normal), 100);\n                drawArrow(ctx, origin, normalVec, 'blue');\n                drawPoint(ctx, velocity, 'red');\n                drawArrow(ctx, velocity, origin, 'red');\n                const reflected = vector.scale(\n                    vector.reflect(velocity, vector.normalize(normal)),\n                    restitution\n                );\n                drawArrow(ctx, origin, reflected, 'green');\n            });\n\n            drawResults(ctx, [\n                ['Normal', normal],\n                ['Velocity', velocity],\n                ['Restitution', restitution],\n                ['Reflected', vector.scale(vector.reflect(velocity, vector.normalize(normal)), restitution)],\n                'Drag red arrow to adjust incoming velocity',\n                'Drag blue arrow to adjust surface normal',\n                'Use +/- to adjust restitution'\n            ]);\n        }\n\n        drag({ canvas, draw, center }, {\n            onDrag: (pos) => {\n                const closest = point.closest(pos, [velocity, normal]);\n                if (closest === velocity) {\n                    velocity = pos;\n                } else {\n                    normal = vector.subtract(pos, origin);\n                }\n            }\n        });\n\n        key({ canvas, draw }, {\n            '+': () => (restitution = Math.min(2, restitution + 0.1)),\n            '-': () => (restitution = Math.max(0, restitution - 0.1)),\n        });\n\n        draw();\n    },\n\n    fromAngleRadians: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        const center = { x: canvas.width / 2, y: canvas.height / 2 };\n        const origin = { x: 0, y: 0 };\n        let angle = 0;\n        let length = 100;\n\n        function draw() {\n            clearCanvas(ctx);\n            drawWithOffset(ctx, center, (ctx) => {\n                drawAxes(ctx);\n                const v = vector.fromAngleRadians(angle, length);\n                drawArrow(ctx, origin, v, 'blue');\n            });\n\n            drawResults(ctx, [\n                ['Angle (rad)', angle],\n                ['Length', length],\n                ['Vector', vector.fromAngleRadians(angle, length)],\n                'Use +/- to adjust angle',\n                'Use [/] to adjust length'\n            ]);\n        }\n\n        key({ canvas, draw }, {\n            '+': () => (angle += Math.PI / 12),\n            '-': () => (angle -= Math.PI / 12),\n            '[': () => (length = Math.max(10, length - 10)),\n            ']': () => (length += 10)\n        });\n\n        draw();\n    },\n\n    fromAngleDegrees: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        const center = { x: canvas.width / 2, y: canvas.height / 2 };\n        const origin = { x: 0, y: 0 };\n        let angle = 0;\n        let length = 100;\n\n        function draw() {\n            clearCanvas(ctx);\n            drawWithOffset(ctx, center, (ctx) => {\n                drawAxes(ctx);\n                const v = vector.fromAngleDegrees(angle, length);\n                drawArrow(ctx, origin, v, 'blue');\n            });\n\n            drawResults(ctx, [\n                ['Angle (deg)', angle],\n                ['Length', length],\n                ['Vector', vector.fromAngleDegrees(angle, length)],\n                'Use +/- to adjust angle',\n                'Use [/] to adjust length'\n            ]);\n        }\n\n        key({ canvas, draw }, {\n            '+': () => (angle += 15),\n            '-': () => (angle -= 15),\n            '[': () => (length = Math.max(10, length - 10)),\n            ']': () => (length += 10)\n        });\n\n        draw();\n    },\n\n    rotateByRadians: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        const center = { x: canvas.width / 2, y: canvas.height / 2 };\n        const origin = { x: 0, y: 0 };\n        let v = { x: 100, y: 0 };\n        let angle = Math.PI / 4;\n\n        function draw() {\n            clearCanvas(ctx);\n            drawWithOffset(ctx, center, (ctx) => {\n                drawAxes(ctx);\n                drawArrow(ctx, origin, v, 'blue');\n                drawArrow(ctx, origin, vector.rotateByRadians(v, angle), 'green');\n            });\n\n            drawResults(ctx, [\n                ['Vector', v],\n                ['Angle (rad)', angle],\n                ['Rotated', vector.rotateByRadians(v, angle)],\n                'Drag blue arrow to adjust vector',\n                'Use +/- to adjust angle'\n            ]);\n        }\n\n        drag({ canvas, draw, center }, {\n            onDrag: (pos) => (v = pos)\n        });\n\n        key({ canvas, draw }, {\n            '+': () => (angle += Math.PI / 12),\n            '-': () => (angle -= Math.PI / 12)\n        });\n\n        draw();\n    },\n\n    rotateByDegrees: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        const center = { x: canvas.width / 2, y: canvas.height / 2 };\n        const origin = { x: 0, y: 0 };\n        let v = { x: 100, y: 0 };\n        let angle = 15;\n\n        function draw() {\n            clearCanvas(ctx);\n            drawWithOffset(ctx, center, (ctx) => {\n                drawAxes(ctx);\n                drawArrow(ctx, origin, v, 'blue');\n                drawArrow(ctx, origin, vector.rotateByDegrees(v, angle), 'green');\n            });\n\n            drawResults(ctx, [\n                ['Vector', v],\n                ['Angle (deg)', angle],\n                ['Rotated', vector.rotateByDegrees(v, angle)],\n                'Drag blue arrow to adjust vector',\n                'Use +/- to adjust angle'\n            ]);\n        }\n\n        drag({ canvas, draw, center }, {\n            onDrag: (pos) => (v = pos)\n        });\n\n        key({ canvas, draw }, {\n            '+': () => (angle += 15),\n            '-': () => (angle -= 15)\n        });\n\n        draw();\n    },\n\n    dot: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        const center = { x: canvas.width / 2, y: canvas.height / 2 };\n        const origin = { x: 0, y: 0 };\n        let v1 = { x: 100, y: 0 };\n        let v2 = { x: 0, y: 100 };\n\n        function draw() {\n            clearCanvas(ctx);\n            drawWithOffset(ctx, center, (ctx) => {\n                drawAxes(ctx);\n                drawArrow(ctx, origin, v1, 'blue');\n                drawArrow(ctx, origin, v2, 'red');\n                const dotProduct = vector.dot(v1, v2);\n                const projectionScale = dotProduct / (vector.length(v1) * vector.length(v2));\n                const projection = vector.scale(v2, projectionScale);\n                drawArrow(ctx, origin, projection, 'green');\n            });\n\n            drawResults(ctx, [\n                ['Vector 1', v1],\n                ['Vector 2', v2],\n                ['Dot Product', vector.dot(v1, v2)],\n                ['Projection of v1 onto v2', vector.scale(v2, vector.dot(v1, v2) / (vector.length(v2) ** 2))],\n                'Drag blue/red arrows to adjust vectors'\n            ]);\n        }\n\n        drag({ canvas, draw, center }, {\n            onDrag: (pos) => {\n                const closest = point.closest(pos, [v1, v2]);\n                closest.x = pos.x;\n                closest.y = pos.y;\n            }\n        });\n\n        draw();\n    },\n\n    resize: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        const center = { x: canvas.width / 2, y: canvas.height / 2 };\n        const origin = { x: 0, y: 0 };\n        let v = { x: 100, y: 50 };\n        let newLength = 150;\n\n        function draw() {\n            clearCanvas(ctx);\n            drawWithOffset(ctx, center, (ctx) => {\n                drawAxes(ctx);\n                drawArrow(ctx, origin, v, 'blue');\n                drawArrow(ctx, origin, vector.resize(v, newLength), 'green');\n            });\n\n            drawResults(ctx, [\n                ['Vector', v],\n                ['Original Length', vector.length(v)],\n                ['New Length', newLength],\n                ['Resized Vector', vector.resize(v, newLength)],\n                'Drag arrow to adjust vector',\n                'Use +/- to adjust new length'\n            ]);\n        }\n\n        drag({ canvas, draw, center }, {\n            onDrag: (pos) => (v = pos)\n        });\n\n        key({ canvas, draw }, {\n            '+': () => (newLength += 10),\n            '-': () => (newLength = Math.max(10, newLength - 10))\n        });\n\n        draw();\n    },\n};\n","import { scale, add, clamp } from \"./../../src/vector\";\nimport * as physics from '../../src/physics';\nimport { DemoFunction } from './index';\nimport { clearCanvas, drawCircle, drawLine, drawResults, drag, animate, click, key, drawWithOffset, drawArrow, ResultEntry, move } from '../utils';\nimport { Line, Point } from '../../src';\nimport { fromAngleRadians, subtract, normalize } from '../../src/vector';\nimport { radiansBetweenPoints } from '../../src/angle';\nimport { distance, closest } from '../../src/point';\n\nexport const physicsDemos: Record<keyof typeof physics, DemoFunction> = {\n    applyForce: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        let position = { x: canvas.width / 2, y: canvas.height / 2 };\n        let velocity = { x: 0, y: 0 };\n        let force = { x: 0.05, y: -0.03 };\n\n        function draw() {\n            clearCanvas(ctx);\n            drawCircle(ctx, { ...position, radius: 10 }, 'blue');\n            drawResults(ctx, [\n                ['Position', position],\n                ['Velocity', velocity],\n                ['Force', force],\n                'Click to reset position',\n                'Use +/- to change force magnitude'\n            ]);\n        }\n\n        animate(() => {\n            physics.applyForce(velocity, force, 1);\n            position.x += velocity.x;\n            position.y += velocity.y;\n        }, draw);\n\n        click({ canvas, draw }, (pos) => {\n            position = { ...pos };\n            velocity = { x: 0, y: 0 };\n        });\n\n        key({ canvas, draw }, {\n            '+': () => {\n                force.x *= 1.1;\n                force.y *= 1.1;\n            },\n            '-': () => {\n                force.x *= 0.9;\n                force.y *= 0.9;\n            }\n        });\n    },\n\n    applyDamping: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        let position = { x: canvas.width / 2, y: canvas.height / 2 };\n        let velocity = { x: 5, y: -3 };\n        let damping = 0.05;\n\n        function draw() {\n            clearCanvas(ctx);\n            drawCircle(ctx, { ...position, radius: 10 }, 'blue');\n            drawResults(ctx, [\n                ['Position', position],\n                ['Velocity', velocity],\n                ['Damping', damping],\n                'Click to reset position',\n                'Use +/- to change damping amount'\n            ]);\n        }\n\n        animate(() => {\n            physics.applyDamping(velocity, damping);\n            position.x += velocity.x;\n            position.y += velocity.y;\n        }, draw);\n\n        click({ canvas, draw }, (pos) => {\n            position = { ...pos };\n            velocity = { x: 5, y: -3 };\n        });\n\n        key({ canvas, draw }, {\n            '+': () => {\n                damping = Math.min(damping + 0.01, 1); // Cap damping at 1\n            },\n            '-': () => {\n                damping = Math.max(damping - 0.01, 0); // Ensure damping is non-negative\n            }\n        });\n    },\n\n    applyTorque: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        let angle = 0;\n        let angularVelocity = 0;\n        let torque = 0.1;\n\n        function draw() {\n            clearCanvas(ctx);\n            const center = { x: canvas.width / 2, y: canvas.height / 2 };\n            const end = fromAngleRadians(angle, 50);\n\n            drawWithOffset(ctx, center, (ctx) => {\n                drawLine(ctx, { start: { x: 0, y: 0 }, end }, 'blue', 2);\n            });\n\n            drawResults(ctx, [\n                ['Angle', angle],\n                ['Angular Velocity', angularVelocity],\n                ['Torque', torque],\n                'Click to reset angle',\n                'Use +/- to change torque amount'\n            ]);\n        }\n\n        animate(() => {\n            angularVelocity = physics.applyTorque(angularVelocity, torque, 0.01);\n            angle += angularVelocity;\n        }, draw);\n\n        click({ canvas, draw }, () => {\n            angle = 0;\n            angularVelocity = 0;\n        });\n\n        key({ canvas, draw }, {\n            '+': () => {\n                torque = Math.min(torque + 0.01, 1); // Cap torque at 1\n            },\n            '-': () => {\n                torque = Math.max(torque - 0.01, 0); // Ensure torque is non-negative\n            }\n        });\n    },\n\n    applyAngleForce: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        let position = { x: canvas.width / 2, y: canvas.height / 2 };\n        let velocity = { x: 0, y: 0 };\n        let forceMagnitude = 0.1;\n\n        function draw() {\n            clearCanvas(ctx);\n            drawCircle(ctx, { ...position, radius: 10 }, 'blue');\n            drawResults(ctx, [\n                ['Position', position],\n                ['Velocity', velocity],\n                ['Force Magnitude', forceMagnitude],\n                'Press to apply force away from mouse',\n                'Use +/- to change force magnitude'\n            ]);\n        }\n\n        let isMouseDown = false;\n        let mousePos = { x: 0, y: 0 };\n        animate(() => {\n            if (isMouseDown) {\n                const angle = radiansBetweenPoints(mousePos, position);\n                physics.applyAngleForce(velocity, angle, forceMagnitude, 1);\n            }\n            position.x += velocity.x;\n            position.y += velocity.y;\n\n            // Reset position if it leaves the canvas bounds\n            if (\n                position.x < 0 || position.x > canvas.width ||\n                position.y < 0 || position.y > canvas.height\n            ) {\n                position = { x: canvas.width / 2, y: canvas.height / 2 };\n                velocity = { x: 0, y: 0 };\n            }\n        }, draw);\n\n        drag({ canvas, draw }, {\n            onStart: (pos) => {\n                isMouseDown = true;\n                mousePos = pos;\n            },\n            onDrag: (pos) => mousePos = pos,\n            onEnd: (pos) => {\n                mousePos = pos;\n                isMouseDown = false; \n            }\n        });\n\n        key({ canvas, draw }, {\n            '+': () => forceMagnitude += .01,\n            '-': () => forceMagnitude -= .01\n        });\n    },\n\n    collide: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        let obj1 = { position: { x: 200, y: 200 }, velocity: { x: 0, y: 0 }, mass: 1, radius: 20 };\n        let obj2 = { position: { x: 400, y: 200 }, velocity: { x: 0, y: 0 }, mass: 1, radius: 20 };\n        let isSimulationRunning = false;\n\n        let draggedPosition: Point | null = null;\n\n        const init1: Line = { start: { x: 200, y: 300 }, end: { x: 250, y: 320 } };\n        const init2: Line = { start: { x: 400, y: 300 }, end: { x: 330, y: 310 } };\n\n        start();\n\n        function draw() {\n            clearCanvas(ctx);\n\n            // Update object radii based on mass\n            obj1.radius = obj1.mass * 20;\n            obj2.radius = obj2.mass * 20;\n\n            // Draw initial circles and velocity arrows\n            drawCircle(ctx, { x: init1.start.x, y: init1.start.y, radius: obj1.radius }, 'gray', false);\n            drawArrow(ctx, init1.start, init1.end, 'gray');\n\n            drawCircle(ctx, { x: init2.start.x, y: init2.start.y, radius: obj2.radius }, 'gray', false);\n            drawArrow(ctx, init2.start, init2.end, 'gray');\n\n            if (isSimulationRunning) {\n                // Draw solid circles during simulation\n                drawCircle(ctx, { ...obj1.position, radius: obj1.radius }, 'blue', true);\n                drawCircle(ctx, { ...obj2.position, radius: obj2.radius }, 'red', true);\n            } \n            drawResults(ctx, [\n                'Drag initial positions and velocities',\n                [\"Object 1\", Object.entries(obj1)],\n                [\"Object 2\", Object.entries(obj2)],\n                ['Restitution', restitution],\n                'Press +/- to adjust mass of first object',\n                'Press [/] to adjust mass of second object',\n                'Press 1/2 to adjust restitution',\n                'Press R to replay simulation',\n            ]);\n        }\n\n        function start() {\n            obj1 = { \n                ...obj1,\n                position: { ...init1.start }, \n                velocity: scale(subtract(init1.end, init1.start), .1)\n            };\n            obj2 = { \n                ...obj2,\n                position: { ...init2.start }, \n                velocity: scale(subtract(init2.end, init2.start), .1)\n            };\n            isSimulationRunning = true;\n        }\n\n        drag({ canvas, draw }, {\n            onStart: (pos) => {\n                draggedPosition = closest(pos, [init1.start, init1.end, init2.start, init2.end]);\n            },\n            onDrag: (pos) => {\n                if (draggedPosition) {\n                    draggedPosition.x = pos.x;\n                    draggedPosition.y = pos.y;\n                }\n            },\n            onEnd: () => {\n                draggedPosition = null;\n                start();\n            }\n        });\n\n        key({ canvas, draw }, {\n            'r': start,\n            '+': () => obj1.mass += 0.1,\n            '-': () => obj1.mass -= 0.1,\n            '[': () => obj2.mass -= 0.1,\n            ']': () => obj2.mass += 0.1,\n            '1': () => restitution = Math.max(restitution - 0.1, 0), // Decrease restitution\n            '2': () => restitution = Math.min(restitution + 0.1, 1), // Increase restitution\n        });\n\n        let restitution = 0.9; // Default restitution\n\n        animate(() => {\n            if (isSimulationRunning) {\n                obj1.position.x += obj1.velocity.x;\n                obj1.position.y += obj1.velocity.y;\n                obj2.position.x += obj2.velocity.x;\n                obj2.position.y += obj2.velocity.y;\n                if (distance(obj1.position, obj2.position) < obj1.radius + obj2.radius) {\n                    physics.collide(obj1, obj2, restitution);\n                }\n            }\n        }, draw);\n    },\n\n    separate: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        const objects = Array.from({ length: 5 }, () => createRandomObject());\n\n        function createRandomObject(position: Point = {\n            x: canvas.width / 2 + Math.random() * 50 - 25, // Clustered around the center\n            y: canvas.height / 2 + Math.random() * 50 - 25\n        }): { position: Point; velocity: Point; mass: number; radius: number } {\n            const radius = Math.random() * 20 + 10; // Random radius between 10 and 30\n            return {\n                position,\n                velocity: { x: 0, y: 0 },\n                mass: radius / 10, // Mass proportional to radius\n                radius,\n            };\n        }\n\n        function draw() {\n            clearCanvas(ctx);\n            objects.forEach(obj => {\n                drawCircle(ctx, { ...obj.position, radius: obj.radius }, 'blue');\n            });\n            drawResults(ctx, [\n                'Click to add a new random size object'\n            ]);\n        }\n\n        animate(() => {\n            for (let i = 0; i < objects.length; i++) {\n                for (let j = i + 1; j < objects.length; j++) {\n                    physics.separate(objects[i], objects[j]);\n                }\n            }\n        }, draw);\n\n        click({ canvas, draw }, (pos) => {\n            const noise = () => Math.random() * 2 - 1; // Random noise between -1 and 1\n            const noisyPos = { x: pos.x + noise(), y: pos.y + noise() };\n            objects.push(createRandomObject(noisyPos));\n        });\n    },\n\n    repel: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        const objects = Array.from({ length: 5 }, () => createRandomObject());\n\n        let repelStrength = 0.001;\n        let friction = 0.99;\n\n        function createRandomObject(position: Point = {\n            x: canvas.width / 2 + Math.random() * 50 - 25, // Clustered around the center\n            y: canvas.height / 2 + Math.random() * 50 - 25\n        }): { position: Point; velocity: Point; mass: number; radius: number } {\n            const radius = Math.random() * 20 + 10; // Random radius between 10 and 30\n            return {\n                position,\n                velocity: { x: 0, y: 0 },\n                mass: radius / 10, // Mass proportional to radius\n                radius,\n            };\n        }\n\n        function draw() {\n            clearCanvas(ctx);\n            objects.forEach(obj => {\n                drawCircle(ctx, { ...obj.position, radius: obj.radius }, 'red');\n            });\n            drawResults(ctx, [\n                'Click to add a new random size object',\n                [`Repel Strength`, repelStrength, { precision: 4 }],\n                [`Friction`, friction],\n                'Use +/- to change repel strength',\n                'Use [/] to change friction',\n            ]);\n        }\n\n        animate(() => {\n            for (let i = 0; i < objects.length; i++) {\n                for (let j = i + 1; j < objects.length; j++) {\n                    physics.repel(objects[i], objects[j], repelStrength);\n                }\n            }\n            // Update positions based on velocities\n            objects.forEach(obj => {\n                obj.position.x += obj.velocity.x;\n                obj.position.y += obj.velocity.y;\n\n                // Apply drag to slow down the velocity\n                obj.velocity.x *= friction;\n                obj.velocity.y *= friction;\n            });\n        }, draw);\n\n        key({ canvas, draw }, {\n            '+': () => repelStrength += .001,\n            '-': () => repelStrength -= .001,\n            '[': () => friction -= .01,\n            ']': () => friction += .01\n        });\n\n        click({ canvas, draw }, (pos) => {\n            const noise = () => Math.random() * 2 - 1; // Random noise between -1 and 1\n            const noisyPos = { x: pos.x + noise(), y: pos.y + noise() };\n            objects.push(createRandomObject(noisyPos));\n        });\n    },\n\n    fluid: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        const particles = Array.from({ length: 1500 }, () => ({\n            position: { \n                x: canvas.width / 2 + Math.random() * 150 - 25, // Clustered near the center\n                y: canvas.height / 2 + Math.random() * 150 - 25 \n            },\n            velocity: { x: 0, y: 0 },\n            density: 0,\n            pressure: 0,\n            mass: 1\n        }));\n\n        const settings = {\n            smoothingRadius: 15,\n            stiffness: 5,\n            restDensity: 1,\n            viscosity: 0.5\n        }\n\n        const gravity = { x: 0, y: 0.1 }; // Gravity force\n        let lastMousePos: Point | null = null;\n\n        function draw() {\n            clearCanvas(ctx);\n            particles.forEach(p => drawCircle(ctx, { ...p.position, radius: 5 }, 'blue')); // Reduced radius to 2\n            drawResults(ctx, [\n                'Fluid simulation',\n                ['Particles', particles.length, { precision: 0 }],\n                ['Fluid', Object.entries(settings)],\n                'Click and drag to apply forces',\n            ]);\n        }\n\n        animate(() => {\n            const forces = physics.fluid(particles, settings);\n            particles.forEach((p, i) => {\n                // Apply fluid forces\n                p.velocity.x += forces[i].x;\n                p.velocity.y += forces[i].y;\n\n                // Apply gravity\n                p.velocity.x += gravity.x;\n                p.velocity.y += gravity.y;\n\n                // Update position\n                p.position.x += p.velocity.x;\n                p.position.y += p.velocity.y;\n\n                // Keep particles within canvas bounds\n                if (p.position.x < 0 || p.position.x > canvas.width) {\n                    p.velocity.x *= -0.5; // Reverse and dampen velocity\n                    p.position.x = Math.max(0, Math.min(canvas.width, p.position.x));\n                }\n                if (p.position.y < 0 || p.position.y > canvas.height) {\n                    p.velocity.y *= -0.5; // Reverse and dampen velocity\n                    p.position.y = Math.max(0, Math.min(canvas.height, p.position.y));\n                }\n            });\n        }, draw);\n\n        drag({ canvas, draw }, {\n            onStart: (pos) => {\n                lastMousePos = pos;\n            },\n            onDrag: (pos) => {\n                if (lastMousePos) {\n                    const dragForce = 2.5; // Strength of the drag force\n                    const dragVector = subtract(pos, lastMousePos);\n                    particles.forEach(p => {\n                        const dist = distance(p.position, pos);\n                        if (dist < 50) { // Apply force to nearby particles\n                            const force = scale(dragVector, dragForce / (dist + 1)); // Inverse distance weighting\n                            p.velocity.x += force.x;\n                            p.velocity.y += force.y;\n                        }\n                    });\n                }\n                lastMousePos = pos;\n            },\n            onEnd: () => {\n                lastMousePos = null;\n            }\n        });\n    },\n\n    boids: (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        const boids = Array.from({ length: 30 }, () => ({\n            position: { x: Math.random() * canvas.width, y: Math.random() * canvas.height },\n            velocity: { x: Math.random() * 2 - 1, y: Math.random() * 2 - 1 }\n        }));\n\n        const settings = {\n            separationRadius: 25,\n            alignmentRadius: 50,\n            cohesionRadius: 50,\n            separationWeight: 1.5,\n            alignmentWeight: 2,\n            cohesionWeight: 0.1,\n            maxSpeed: 0.12\n        };\n        const wallAvoidanceRadius = 50; // Distance to start avoiding walls\n        const wallAvoidanceWeight = 2;  // Strength of wall avoidance\n\n        const mouseAvoidanceRadius = 100; // Distance to start avoiding the mouse\n        const mouseAvoidanceWeight = 5;   // Strength of mouse avoidance\n        let mousePos: Point | null = null;\n\n        const wanderingAngles = Array.from({ length: boids.length }, () => Math.random() * Math.PI * 2);\n\n        function draw() {\n            clearCanvas(ctx);\n            boids.forEach(b => {\n                const angle = Math.atan2(b.velocity.y, b.velocity.x);\n                const bodyLength = 20;\n                const bodyWidth = 10;\n\n                // Draw boid as a longer arrow\n                ctx.save();\n                ctx.translate(b.position.x, b.position.y);\n                ctx.rotate(angle);\n                ctx.beginPath();\n                ctx.moveTo(bodyLength / 2, 0); // Arrow tip\n                ctx.lineTo(-bodyLength / 2, -bodyWidth / 2); // Left wing\n                ctx.lineTo(-bodyLength / 2, bodyWidth / 2); // Right wing\n                ctx.closePath();\n                ctx.fillStyle = 'blue';\n                ctx.fill();\n                ctx.strokeStyle = 'black';\n                ctx.stroke();\n                ctx.restore();\n            });\n            drawResults(ctx, [\n                'Flocking simulation',\n                ...Object.entries(settings).map<ResultEntry>(([key, value]) => [key, value]),\n            ]);\n        }\n\n        move({ canvas, draw }, (pos) => {\n            mousePos = pos;\n        });\n\n        animate(() => {\n            const forces = physics.boids(boids, settings);\n\n            boids.forEach((b, i) => {\n                // Apply forces to velocity\n                b.velocity.x += forces[i].x;\n                b.velocity.y += forces[i].y;\n\n                // Gradual wandering behavior for isolated boids\n                if (forces[i].x === 0 && forces[i].y === 0) {\n                    wanderingAngles[i] += (Math.random() - 0.5) * 0.1; // Gradually change angle\n                    const wanderForce = fromAngleRadians(wanderingAngles[i], settings.maxSpeed);\n                    b.velocity = add(b.velocity, wanderForce);\n                }\n\n                // Wall avoidance\n                const wallForces = { x: 0, y: 0 };\n                if (b.position.x < wallAvoidanceRadius) {\n                    wallForces.x += wallAvoidanceWeight / Math.max(b.position.x, 1);\n                }\n                if (b.position.x > canvas.width - wallAvoidanceRadius) {\n                    wallForces.x -= wallAvoidanceWeight / Math.max(canvas.width - b.position.x, 1);\n                }\n                if (b.position.y < wallAvoidanceRadius) {\n                    wallForces.y += wallAvoidanceWeight / Math.max(b.position.y, 1);\n                }\n                if (b.position.y > canvas.height - wallAvoidanceRadius) {\n                    wallForces.y -= wallAvoidanceWeight / Math.max(canvas.height - b.position.y, 1);\n                }\n                b.velocity = add(b.velocity, wallForces);\n\n                // Mouse avoidance\n                if (mousePos) {\n                    const mouseDist = distance(b.position, mousePos);\n                    if (mouseDist < mouseAvoidanceRadius) {\n                        const awayFromMouse = normalize(subtract(b.position, mousePos));\n                        const mouseForce = scale(awayFromMouse, mouseAvoidanceWeight / Math.max(mouseDist, 1));\n                        b.velocity = add(b.velocity, mouseForce);\n                    }\n                }\n\n                // Apply damping\n                b.velocity = scale(b.velocity, 0.95);\n\n                // Update position\n                b.position = add(b.position, b.velocity);\n\n                // Prevent boids from leaving the canvas\n                b.position.x = Math.max(0, Math.min(canvas.width, b.position.x));\n                b.position.y = Math.max(0, Math.min(canvas.height, b.position.y));\n            });\n        }, draw);\n    },\n};\n","import { degreesToRadians, radiansBetweenPoints } from \"./../../src/angle\";\nimport { angle, PhysicalBody, physics, Point, Vector2d } from '../../src';\nimport { DemoFunction } from './index';\nimport * as point from '../../src/point';\nimport * as vector from '../../src/vector';\nimport { animate, clearCanvas, drawCircle, drawRect, simulate, drag, key, drawResults, drawLine, keys, drawPoint, move, click, drawArrow, drawWithOffset } from '../utils';\n\n\nexport const bodyDemos: Record<string, DemoFunction> = {\n    \"Balls\": (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n\n        class Ball extends PhysicalBody {\n            grabbed = false;\n            grabOffset: Vector2d = { x: 0, y: 0 };\n        \n            constructor(x: number, y: number, radius: number) {\n                super({\n                    x,\n                    y,\n                    mass: Math.PI * radius * radius,\n                    gravity: PhysicalBody.DOWNWARD_GRAVITY\n                });\n                this.radius = radius;\n            }\n        }\n        \n        const balls: Ball[] = [];\n        let draggedBall: Ball | null = null;\n        const mousePos: Vector2d = { x: 0, y: 0 };\n        const dragStart: Vector2d = { x: 0, y: 0 };\n        const lastPos: Vector2d = { x: 0, y: 0 };\n        let lastTime = 0;\n\n        const overlapModes: PhysicalBody[\"collisionOverlapResolution\"][] = ['separate', 'repel', 'none'];\n        let currentOverlapModeIndex = 0;\n\n        const addBall = () => {\n            const radius = 10 + Math.random() * 20;\n            const ball = new Ball(\n                Math.random() * canvas.width,\n                Math.random() * canvas.height * 0.5,\n                radius\n            );\n            ball.velocity = { x: Math.random() * 200 - 100, y: Math.random() * 200 - 100 };\n            ball.collisionOverlapResolution = overlapModes[currentOverlapModeIndex];\n            balls.push(ball);\n        };\n\n        const removeBall = () => {\n            if (balls.length > 0) {\n                balls.pop();\n            }\n        };\n\n        const resetBalls = () => {\n            balls.length = 0;\n            Array.from({ length: 10 }).forEach(addBall);\n        };\n\n        const toggleOverlapMode = () => {\n            currentOverlapModeIndex = (currentOverlapModeIndex + 1) % overlapModes.length;\n            balls.forEach(ball => {\n                ball.collisionOverlapResolution = overlapModes[currentOverlapModeIndex];\n            });\n        };\n\n        resetBalls();\n\n        const update = (deltaTime: number) => {\n            // Update physics\n            balls.forEach(ball => {\n                if (ball.grabbed) {\n                    ball.velocity.x = 0;\n                    ball.velocity.y = 0;\n                    ball.position.x = mousePos.x - ball.grabOffset.x;\n                    ball.position.y = mousePos.y - ball.grabOffset.y;\n                    ball.mass = Number.MAX_SAFE_INTEGER; // Give maximum mass while dragging\n                } else {\n                    ball.mass = Math.PI * ball.radius * ball.radius; // Reset mass\n                    ball.update(deltaTime);\n\n                    // Wall collisions\n                    ball.collideWithSurface({ x: 0, y: 0 }, { x: 1, y: 0 }); // Left wall\n                    ball.collideWithSurface({ x: canvas.width, y: 0 }, { x: -1, y: 0 }); // Right wall\n                    ball.collideWithSurface({ x: 0, y: 0 }, { x: 0, y: 1 }); // Top wall\n                    ball.collideWithSurface({ x: 0, y: canvas.height }, { x: 0, y: -1 }); // Bottom wall\n                }\n            });\n\n            // Ball-to-ball collisions\n            balls.forEach((b1, i) => {\n                balls.slice(i + 1).forEach(b2 => {\n                    b1.collideWithBody(b2);\n                });\n            });\n        };\n\n        const draw = () => {\n            clearCanvas(ctx);\n            balls.forEach(ball => {\n                drawCircle(ctx, ball, ball.grabbed ? 'red' : 'blue', true);\n            });\n\n            // Show results\n            drawResults(ctx, [\n                ['Number of Balls', balls.length, { precision: 0 }],\n                ['Overlap Mode', overlapModes[currentOverlapModeIndex]],\n                'Drag balls to move them',\n                'Press +/- to add/remove a ball',\n                'Press R to reset',\n                'Press O to toggle overlap mode'\n            ]);\n        };\n\n        drag({ canvas, draw }, {\n            onStart: (pos) => {\n                mousePos.x = pos.x;\n                mousePos.y = pos.y;\n                dragStart.x = pos.x;\n                dragStart.y = pos.y;\n                lastPos.x = pos.x;\n                lastPos.y = pos.y;\n                lastTime = performance.now();\n\n                balls.forEach(ball => {\n                    const dist = point.distance(ball.position, mousePos);\n                    if (dist <= ball.radius) {\n                        ball.grabbed = true;\n                        draggedBall = ball;\n                        ball.grabOffset = vector.subtract(mousePos, ball.position);\n                    }\n                });\n            },\n            onDrag: (pos) => {\n                lastPos.x = mousePos.x;\n                lastPos.y = mousePos.y;\n                mousePos.x = pos.x;\n                mousePos.y = pos.y;\n                lastTime = performance.now();\n                \n                if (draggedBall) {\n                    draggedBall.position = vector.subtract(mousePos, draggedBall.grabOffset);\n                }\n            },\n            onEnd: () => {\n                if (draggedBall) {\n                    const currentTime = performance.now();\n                    const dt = (currentTime - lastTime) / 1000;\n                    if (dt > 0) {\n                        // Calculate velocity based on movement over time\n                        const dragVel = vector.scale(\n                            vector.subtract(mousePos, lastPos),\n                            1 / dt // Divide by time to get velocity\n                        );\n                        draggedBall.velocity = dragVel;\n                    }\n                    draggedBall.grabbed = false;\n                    draggedBall = null;\n                }\n            }\n        });\n\n        key({ canvas, draw }, {\n            '+': addBall,\n            '-': removeBall,\n            'r': resetBalls,\n            'o': toggleOverlapMode\n        });\n\n        return simulate(update, draw);\n    },\n\n    \"Billiards\": (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        \n        class BilliardBall extends PhysicalBody {\n            color: string;\n            grabbed = false;\n            grabOffset: Vector2d = { x: 0, y: 0 };\n            \n            constructor(x: number, y: number, color: string) {\n                super({ x, y, mass: 1 });\n                this.radius = 15;\n                this.color = color;\n                this.elasticity = 0.95;\n                this.friction = 0.01;\n            }\n        }\n        \n        const balls: BilliardBall[] = [];\n        const pockets = [\n            { x: 20, y: 20 }, // Top-left\n            { x: canvas.width / 2, y: 20 }, // Top-center\n            { x: canvas.width - 20, y: 20 }, // Top-right\n            { x: 20, y: canvas.height - 20 }, // Bottom-left\n            { x: canvas.width / 2, y: canvas.height - 20 }, // Bottom-center\n            { x: canvas.width - 20, y: canvas.height - 20 } // Bottom-right\n        ];\n        const pocketRadius = 25;\n        const colors = [\n            'white',       // cue\n            'gold',        // 1\n            'royalblue',   // 2\n            'crimson',     // 3\n            'purple',      // 4\n            'darkorange',  // 5\n            'forestgreen', // 6\n            'saddlebrown', // 7\n            'black',       // 8\n            'khaki',       // 9\n            'steelblue',   // 10\n            'indianred',   // 11\n            'darkmagenta', // 12\n            'coral',       // 13\n            'seagreen',    // 14\n            'sienna'       // 15\n        ];\n        let draggedBall: BilliardBall | null = null;\n        const mousePos: Vector2d = { x: 0, y: 0 };\n        const dragStart: Vector2d = { x: 0, y: 0 };\n\n        const resetBalls = () => {\n            balls.length = 0;\n            balls.push(new BilliardBall(200, canvas.height / 2, colors[0])); // Cue ball\n            let row = 0;\n            let idx = 1;\n            for (let y = -2; y <= 2; y++) {\n                for (let x = 0; x <= row; x++) {\n                    if (idx < colors.length) {\n                        balls.push(new BilliardBall(\n                            // Centered along the midline x-axis, facing left\n                            550 + row * 15, \n                            canvas.height / 2 + x * 30 - row * 15,\n                            colors[idx++]\n                        ));\n                    }\n                }\n                row++;\n            }\n        };\n\n        resetBalls();\n\n        const update = (deltaTime: number) => {\n            balls.forEach(ball => {\n                ball.update(deltaTime);\n                \n                // Cushion collisions\n                const wallPadding = 10;\n                ball.collideWithSurface({ x: wallPadding, y: 0 }, { x: 1, y: 0 }); // Left wall\n                ball.collideWithSurface({ x: canvas.width - wallPadding, y: 0 }, { x: -1, y: 0 }); // Right wall\n                ball.collideWithSurface({ x: 0, y: wallPadding }, { x: 0, y: 1 }); // Top wall\n                ball.collideWithSurface({ x: 0, y: canvas.height - wallPadding }, { x: 0, y: -1 }); // Bottom wall\n            });\n\n            // Ball collisions\n            balls.forEach((b1, i) => {\n                balls.slice(i + 1).forEach(b2 => {\n                    b1.collideWithBody(b2);\n                });\n            });\n\n            // Check for balls in pockets\n            for (let i = balls.length - 1; i >= 0; i--) {\n                const ball = balls[i];\n                const inPocket = pockets.some(pocket => \n                    point.distance(ball.position, pocket) < pocketRadius\n                );\n\n                if (inPocket) {\n                    if (ball.color === 'white') {\n                        // Reset cue ball to starting position\n                        ball.position = { x: 200, y: canvas.height / 2 };\n                        ball.velocity = vector.fromAngleRadians(Math.random() * Math.PI * 2, 50);\n                    } else {\n                        balls.splice(i, 1); // Remove ball\n                    }\n                }\n            }\n        };\n        \n        const draw = () => {\n            clearCanvas(ctx);\n\n            // Draw wooden frame\n            const wallPadding = 10; // Match wall padding\n            drawRect(ctx, { x: 0, y: 0, width: canvas.width, height: canvas.height }, 'brown', true); // Outer frame\n            drawRect(ctx, { x: wallPadding, y: wallPadding, width: canvas.width - 2 * wallPadding, height: canvas.height - 2 * wallPadding }, 'darkgreen', true); // Inner table\n\n            // Draw pockets\n            pockets.forEach(pocket => {\n                drawCircle(ctx, { x: pocket.x, y: pocket.y, radius: pocketRadius }, 'black', true);\n            });\n\n            // Draw balls\n            balls.forEach(ball => {\n                drawCircle(ctx, ball, ball.color, true);\n            });\n\n            // Draw aiming line\n            if (draggedBall) {\n                const pullBack = vector.subtract(dragStart, mousePos);\n                const aimLine = vector.scale(pullBack, 2);\n\n                // Draw power gauge\n                drawLine(ctx, { start: draggedBall.position, end: vector.add(draggedBall.position, aimLine) }, 'rgba(255, 255, 255, .25)', 2);\n\n                // Draw direction indicator\n                drawCircle(ctx, { x: draggedBall.position.x + aimLine.x, y: draggedBall.position.y + aimLine.y, radius: 2 }, 'white', true);\n            }\n\n            // Show results\n            drawResults(ctx, [\n                ['Number of Balls', balls.length, { precision: 0 }],\n                'Drag the cue ball to aim and shoot',\n                'Press R to reset'\n            ], { color: 'white' });\n        };\n        \n        drag({ canvas, draw }, {\n            onStart: (pos) => {\n                mousePos.x = pos.x;\n                mousePos.y = pos.y;\n                dragStart.x = pos.x;\n                dragStart.y = pos.y;\n                const cueBall = balls[0];\n                if (point.distance(cueBall.position, mousePos) <= cueBall.radius) {\n                    draggedBall = cueBall;\n                }\n            },\n            onDrag: (pos) => {\n                mousePos.x = pos.x;\n                mousePos.y = pos.y;\n            },\n            onEnd: () => {\n                if (draggedBall) {\n                    const pullBack = vector.subtract(dragStart, mousePos);\n                    draggedBall.velocity = vector.add(draggedBall.velocity, vector.scale(pullBack, 10));\n                    draggedBall = null;\n                }\n            }\n        });\n        \n        key({ canvas, draw }, {\n            'r': resetBalls,\n        });\n\n        return simulate(update, draw);\n    },\n\n    \"Spaceship\": (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        \n        class Spaceship extends PhysicalBody {\n            thrusting = false;\n            \n            constructor() {\n                super({ x: canvas.width / 2, y: canvas.height / 2, mass: 1 });\n                this.radius = 20;\n            }\n            \n            thrust() {\n                const force = vector.fromAngleRadians(this.angle, 500);\n                this.applyForce(force);\n            }\n            \n            update(deltaTime: number) {\n                // Apply minimal drag\n                this.velocity = vector.scale(this.velocity, 0.999);\n                super.update(deltaTime);\n                \n                // Wrap around edges\n                this.position.x = (this.position.x + canvas.width) % canvas.width;\n                this.position.y = (this.position.y + canvas.height) % canvas.height;\n            }\n        }\n        \n        const ship = new Spaceship();\n\n        // Generate stars\n        const stars = Array.from({ length: 100 }, () => ({\n            x: Math.random() * canvas.width,\n            y: Math.random() * canvas.height,\n            color: `rgba(${200 + Math.random() * 55}, ${200 + Math.random() * 55}, ${200 + Math.random() * 55}, 1)`,\n            size: Math.random() * 2 + 1\n        }));\n\n        type Particle = { x: number; y: number; radius: number; life: number; velocity: Vector2d };\n\n        let particles: Particle[] = [];\n\n        keys.listen();\n\n        const update = (deltaTime: number) => {\n            if (keys.isDown('ArrowLeft')) ship.angle -= 4 * deltaTime;\n            if (keys.isDown('ArrowRight')) ship.angle += 4 * deltaTime;\n            if (keys.isDown('ArrowUp')) {\n                ship.thrust();\n                ship.thrusting = true;\n\n                // Emit particles\n                for (let i = 0; i < 3; i++) {\n                    const thrustVector = vector.fromAngleRadians(ship.angle, -15);\n                    particles.push({\n                        x: ship.position.x + thrustVector.x + (Math.random() - 0.5) * 10,\n                        y: ship.position.y + thrustVector.y + (Math.random() - 0.5) * 10,\n                        radius: Math.random() * 3 + 1,\n                        life: 1,\n                        velocity: vector.add(\n                            vector.fromAngleRadians(ship.angle, -100),\n                            vector.fromAngleRadians(Math.random() * Math.PI * 2, Math.random() * 50)\n                        )\n                    });\n                }\n            } else {\n                ship.thrusting = false;\n            }\n\n            ship.update(deltaTime);\n\n            // Update particles\n            particles.forEach(p => {\n                p.life -= deltaTime;\n                p.x += p.velocity.x * deltaTime;\n                p.y += p.velocity.y * deltaTime;\n\n                // Apply friction to slow down particles\n                p.velocity = vector.scale(p.velocity, 0.95);\n\n                p.radius *= 0.95; // Shrink over time\n            });\n            particles = particles.filter(p => p.life > 0); // Remove dead particles\n        };\n\n        const draw = () => {\n            // Draw black background\n            drawRect(ctx, { x: 0, y: 0, width: canvas.width, height: canvas.height }, 'black', true);\n\n            // Draw stars\n            stars.forEach(star => {\n                drawPoint(ctx, { x: star.x, y: star.y }, star.color, star.size);\n            });\n\n            // Draw particles\n            particles.forEach(p => {\n                drawCircle(ctx, { x: p.x, y: p.y, radius: p.radius }, 'orange', true);\n            });\n\n            // Draw spaceship\n            ctx.save();\n            ctx.translate(ship.position.x, ship.position.y);\n            ctx.rotate(ship.angle);\n\n            // Draw ship body\n            ctx.beginPath();\n            ctx.moveTo(20, 0);\n            ctx.lineTo(-10, 10);\n            ctx.lineTo(-10, -10);\n            ctx.closePath();\n            ctx.strokeStyle = 'white';\n            ctx.stroke();\n\n            // Draw thrust\n            if (ship.thrusting) {\n                ctx.beginPath();\n                ctx.moveTo(-10, 0);\n                const spikes = 5;\n                for (let i = 0; i <= spikes; i++) {\n                    const angle = (i / spikes) * Math.PI / 3 - Math.PI / 6; // Symmetrical angle range\n                    const length = 10 + Math.random() * 10; // Random spiky length\n                    ctx.lineTo(-10 - length * Math.cos(angle), length * Math.sin(angle));\n                }\n                ctx.closePath();\n                ctx.fillStyle = 'orange';\n                ctx.fill();\n            }\n\n            ctx.restore();\n        };\n        \n        return simulate(update, draw);\n    },\n\n    \"Artillery\": (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        \n        class Cannon {\n            position: Point;\n            angle = -Math.PI / 4;\n            power = 0;\n            charging = false;\n            chargeStartTime = 0;\n\n            constructor(x: number, y: number) {\n                this.position = { x, y };\n            }\n\n            startCharging() {\n                this.charging = true;\n                this.chargeStartTime = performance.now();\n            }\n\n            stopCharging() {\n                this.charging = false;\n                this.power = this.calculatePower();\n            }\n\n            calculatePower(): number {\n                const minPower = 100;\n                const maxPower = 1000;\n                const powerPerSecond = 500;\n\n                const chargeDuration = (performance.now() - this.chargeStartTime) / 1000; // in seconds\n                return Math.min(maxPower, minPower + chargeDuration * powerPerSecond);\n            }\n        }\n        \n        class Cannonball extends PhysicalBody {\n            constructor(position: Point, velocity: Vector2d) {\n                super({ \n                    position,\n                    velocity,\n                    mass: 5,\n                    gravity: { x: 0, y: 500 }\n                });\n                this.radius = 5;\n            }\n        }\n        \n        class Target extends PhysicalBody {\n            hit = false;\n            \n            constructor(x: number) {\n                super({ \n                    x,\n                    y: canvas.height - 50,\n                    mass: 10 // Give the target some mass to react to collisions\n                });\n                this.radius = 20;\n            }\n\n            applyGravity() {\n                this.gravity = { x: 0, y: 500 }; // Apply downward gravity\n            }\n\n            reset() {\n                this.hit = false;\n                this.gravity = { x: 0, y: 0 }; // Remove gravity\n                this.velocity = { x: 0, y: 0 }; // Reset velocity\n                this.position.x = Math.random() * (canvas.width - 200) + 100; // Random x position\n                this.position.y = Math.random() * (canvas.height - 200); // Random y position\n            }\n        }\n        \n        const cannon = new Cannon(50, canvas.height - 50);\n        const target = new Target(canvas.width - 100);\n        let cannonball: Cannonball | null = null;\n        let score = 0;\n\n        const ground = canvas.height - 30;\n\n        drag({ canvas, draw }, {\n            onStart: () => {\n                cannon.startCharging();\n            },\n            onEnd: () => {\n                cannon.stopCharging();\n                const velocity = vector.fromAngleRadians(cannon.angle, cannon.power);\n                cannonball = new Cannonball({ ...cannon.position }, velocity);\n            }\n        });\n\n        move({ canvas }, (pos) => {\n            cannon.angle = angle.radiansBetweenPoints(cannon.position, pos);\n        });\n\n        const update = (deltaTime: number) => {\n            if (cannonball) {\n                cannonball.update(deltaTime);\n                \n                // Check for collision with the target\n                if (!target.hit && cannonball.collideWithBody(target)) {\n                    target.hit = true;\n                    target.applyGravity(); // Apply gravity to the target\n                    score++;\n                    cannonball = null;\n                }\n                \n                // Remove if off screen or hits the ground\n                else if (cannonball.position.y > ground) {\n                    cannonball = null;\n                }\n            }\n\n            // Update target physics\n            target.update(deltaTime);\n\n            // Reset target if it falls below the ground\n            if (target.position.y > ground) {\n                target.reset();\n            }\n        };\n        \n        function draw() {\n            clearCanvas(ctx);\n            \n            // Draw ground\n            drawRect(ctx, { x: 0, y: ground, width: canvas.width, height: canvas.height - ground }, '#764', true);\n            \n            // Draw cannon base\n            drawCircle(ctx, { x: cannon.position.x, y: cannon.position.y, radius: 15 }, '#333', true);\n\n            // Draw cannon\n            const cannonEnd = vector.add(\n                cannon.position,\n                vector.fromAngleRadians(cannon.angle, 30) // Cannon length\n            );\n            drawLine(ctx, { start: cannon.position, end: cannonEnd }, '#333', 10);\n\n            // Visualize charged power with a red arrow\n            if (cannon.charging) {\n                const power = cannon.calculatePower();\n                const powerArrowEnd = vector.add(\n                    cannon.position,\n                    vector.fromAngleRadians(cannon.angle, power / 10) // Scale power for visualization\n                );\n                drawArrow(ctx, cannon.position, powerArrowEnd, 'red');\n            }\n\n            // Draw target\n            drawCircle(ctx, target, target.hit ? 'red' : 'blue', true);\n\n            // Draw cannonball\n            if (cannonball) {\n                drawCircle(ctx, cannonball, '#333', true);\n            }\n            \n            // Draw score and power\n            drawResults(ctx, [\n                ['Score', score, { precision: 0 }],\n                ['Angle', angle.radiansToDegrees(cannon.angle)],\n                ['Power', cannon.charging ? cannon.calculatePower() : cannon.power],\n                \"Click and hold to charge cannon\",\n            ]);\n        };\n        \n        return simulate(update, draw);\n    },\n\n    \"Tank\": (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        \n        class Tank extends PhysicalBody {\n            angle = 0;\n            turretAngle = 0;\n            throttle = 0;\n            turretRotationSpeed = 5;\n            \n            constructor() {\n                super({ x: canvas.width/2, y: canvas.height/2, mass: 5 });\n                this.radius = 20;\n                this.mass = 100\n            }\n            \n            update(deltaTime: number) {\n                // Update turret angle based on mouse position\n                const mouseTargetAngle = angle.radiansBetweenPoints(this.position, mousePos);\n                this.turretAngle = angle.rotateAngleTowardsRadians(this.turretAngle, mouseTargetAngle, this.turretRotationSpeed * deltaTime);\n\n                // Tank movement -- always move in the direction of the tank's angle\n                this.velocity = vector.fromAngleRadians(tank.angle, tank.throttle);\n                \n                // Apply drag\n                this.throttle *= 0.99;\n\n                super.update(deltaTime);\n            }\n        }\n        \n        class Bullet extends PhysicalBody {\n            timeAlive = 0;\n            \n            constructor(position: Vector2d, angle: number) {\n                super({\n                    position,\n                    velocity: vector.fromAngleRadians(angle, 2500)\n                });\n                this.radius = 3;\n                this.mass = 25;\n            }\n        }\n\n        class Obstacle extends PhysicalBody {\n            constructor(x: number, y: number, radius: number) {\n                super({ x, y, mass: radius * 10 });\n                this.radius = radius;\n                this.elasticity = 0.8;\n                this.friction = 0.2;\n            }\n        }\n\n        const tank = new Tank();\n        const bullets: Bullet[] = [];\n        const obstacles: Obstacle[] = Array.from({ length: 15 }, () => \n            new Obstacle(\n                Math.random() * canvas.width,\n                Math.random() * canvas.height,\n                10 + Math.random() * 20\n            )\n        );\n        const mousePos: Point = { x: 0, y: 0 };\n\n        // Use move() to update turret angle based on mouse position\n        move({ canvas, draw }, (pos) => {\n            mousePos.x = pos.x;\n            mousePos.y = pos.y;\n        });\n\n        // Use click() to fire bullets\n        click({ canvas, draw }, () => {\n            const bulletPos = vector.add(\n                tank.position,\n                vector.fromAngleRadians(tank.turretAngle, tank.radius)\n            );\n            bullets.push(new Bullet(bulletPos, tank.turretAngle));\n        });\n\n        keys.listen();\n\n        const update = (deltaTime: number) => {\n            // Tank movement controls using keys.isDown()\n            const turnSpeed = 2;\n            const throttleSpeed = 400;\n            if (keys.isDown('ArrowLeft')) tank.angle -= turnSpeed * deltaTime;\n            if (keys.isDown('ArrowRight')) tank.angle += turnSpeed * deltaTime;\n            if (keys.isDown('ArrowUp')) tank.throttle = Math.min(200, tank.throttle + throttleSpeed * deltaTime);\n            if (keys.isDown('ArrowDown')) tank.throttle = Math.max(-100, tank.throttle - throttleSpeed * deltaTime);\n\n            // Tank movement\n            tank.update(deltaTime);\n\n            // Keep tank in bounds\n            tank.position.x = Math.max(tank.radius, Math.min(canvas.width - tank.radius, tank.position.x));\n            tank.position.y = Math.max(tank.radius, Math.min(canvas.height - tank.radius, tank.position.y));\n\n            // Update bullets\n            for (let i = bullets.length - 1; i >= 0; i--) {\n                const bullet = bullets[i];\n                bullet.update(deltaTime);\n                bullet.timeAlive += deltaTime;\n\n                // Remove bullets that are too old or out of bounds\n                if (bullet.timeAlive > 2 || \n                    bullet.position.x < 0 || bullet.position.x > canvas.width ||\n                    bullet.position.y < 0 || bullet.position.y > canvas.height) {\n                    bullets.splice(i, 1);\n                }\n            }\n\n            // Update obstacles\n            obstacles.forEach(obstacle => obstacle.update(deltaTime));\n\n            // Handle collisions between tank and obstacles\n            obstacles.forEach(obstacle => tank.collideWithBody(obstacle));\n\n            // Handle collisions between bullets and obstacles\n            bullets.forEach(bullet => {\n                obstacles.forEach(obstacle => bullet.collideWithBody(obstacle));\n            });\n\n            // Handle collisions between obstacles\n            obstacles.forEach((o1, i) => {\n                obstacles.slice(i + 1).forEach(o2 => o1.collideWithBody(o2));\n            });\n        };\n\n        function draw() {\n            clearCanvas(ctx);\n\n            // Draw tank body\n            drawWithOffset(ctx, tank.position, (ctx) => {\n                ctx.rotate(tank.angle);\n                drawRect(ctx, { \n                    x: -25, \n                    y: -15, \n                    width: 50, \n                    height: 30 \n                }, '#3a3', true);\n            });\n\n            // Draw tank turret\n            drawWithOffset(ctx, tank.position, (ctx) => {\n                ctx.rotate(tank.turretAngle);\n                const turretEnd = vector.fromAngleRadians(0, 30);\n                drawLine(ctx, { \n                    start: { x: 0, y: 0 }, \n                    end: turretEnd \n                }, '#373', 10);\n            });\n\n            // Draw bullets\n            bullets.forEach(bullet => {\n                drawCircle(ctx, bullet, \"orange\", true);\n            });\n\n            // Draw obstacles\n            obstacles.forEach(obstacle => {\n                drawCircle(ctx, obstacle, \"gray\", true);\n            });\n\n            // Render speed in the output\n            drawResults(ctx, [\n                ['Speed', tank.speed],\n                \"Arrow Keys: Rotate and Throttle\",\n                \"Click to Fire\",\n            ]);\n        };\n\n        return simulate(update, draw);\n    },\n\n    \"Car\": (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n        \n        class Car extends PhysicalBody {\n            steering = 0;\n            throttle = 0;\n            \n            constructor() {\n                super({ x: canvas.width/2, y: canvas.height/2, mass: 2 });\n                this.radius = 20;\n                this.mass = 20;\n            }\n            \n            update(deltaTime: number) {\n                // Apply steering\n                this.angle += this.steering * this.throttle * deltaTime * 0.003;\n                \n                // Update velocity based on car's angle\n                this.velocity = vector.fromAngleRadians(this.angle, this.throttle);\n                \n                // Apply drag\n                this.throttle *= 0.99;\n                \n                super.update(deltaTime);\n            }\n        }\n\n        class Obstacle extends PhysicalBody {\n            constructor(x: number, y: number, radius: number) {\n                super({ x, y, mass: radius ** 2 });\n                this.radius = radius;\n                this.elasticity = 0.8;\n                this.friction = 0.002;\n            }\n        }\n        \n        const car = new Car();\n        const obstacles: Obstacle[] = Array.from({ length: 50 }, () => \n            new Obstacle(\n                Math.random() * canvas.width,\n                Math.random() * canvas.height,\n                5 + (Math.random() ** 5) * 25\n            )\n        );\n        keys.listen();\n\n        const update = (deltaTime: number) => {\n            // Car controls using keys.isDown()\n            const steeringSpeed = 1;\n            if (keys.isDown('ArrowLeft')) car.steering = -steeringSpeed;\n            else if (keys.isDown('ArrowRight')) car.steering = steeringSpeed;\n            else car.steering = 0;\n\n            const throttleSpeed = 400;\n            if (keys.isDown('ArrowUp')) car.throttle = Math.min(300, car.throttle + throttleSpeed * deltaTime);\n            if (keys.isDown('ArrowDown')) car.throttle = Math.max(-100, car.throttle - throttleSpeed * deltaTime);\n\n            car.update(deltaTime);\n\n            // Keep car in bounds\n            car.position.x = (car.position.x + canvas.width) % canvas.width;\n            car.position.y = (car.position.y + canvas.height) % canvas.height;\n\n            // Update obstacles\n            obstacles.forEach(obstacle => {\n                obstacle.update(deltaTime);\n\n                // Loop obstacles around the canvas\n                obstacle.position.x = (obstacle.position.x + canvas.width) % canvas.width;\n                obstacle.position.y = (obstacle.position.y + canvas.height) % canvas.height;\n            });\n\n            // Handle collisions between car and obstacles\n            obstacles.forEach(obstacle => car.collideWithBody(obstacle));\n\n            // Handle collisions between obstacles\n            obstacles.forEach((o1, i) => {\n                obstacles.slice(i + 1).forEach(o2 => o1.collideWithBody(o2));\n            });\n        };\n\n        const draw = () => {\n            clearCanvas(ctx);\n\n            // Draw car body and wheels using drawWithOffset and drawRect\n            drawWithOffset(ctx, car.position, (ctx) => {\n                ctx.rotate(car.angle);\n\n                // Draw car body\n                drawRect(ctx, { x: -20, y: -10, width: 40, height: 20 }, '#d33', true);\n\n                // Draw wheels\n                drawRect(ctx, { x: -15, y: -12, width: 8, height: 4 }, '#333', true);\n                drawRect(ctx, { x: -15, y: 8, width: 8, height: 4 }, '#333', true);\n                drawRect(ctx, { x: 7, y: -12, width: 8, height: 4 }, '#333', true);\n                drawRect(ctx, { x: 7, y: 8, width: 8, height: 4 }, '#333', true);\n            });\n\n            // Draw obstacles\n            obstacles.forEach(obstacle => {\n                drawCircle(ctx, obstacle, \"gray\", true);\n            });\n\n            // Render speed and steering in the output\n            drawResults(ctx, [\n                ['Speed', car.speed],\n                ['Steering', car.steering],\n                \"Arrow Keys: Steer and Accelerate\",\n            ]);\n        };\n        \n        return simulate(update, draw);\n    },\n\n    \"Chase\": (canvas) => {\n        const ctx = canvas.getContext('2d')!;\n\n        class Bird extends PhysicalBody {\n            static MIN_THRUST_SPEED = 200;\n            static MAX_THRUST_SPEED = 1500;\n            thrustSpeed = Bird.MIN_THRUST_SPEED + (Bird.MAX_THRUST_SPEED - Bird.MIN_THRUST_SPEED) * (Math.random() ** 3);\n            turnSpeed = degreesToRadians(5);\n            trail: Point[] = [];\n            trailLength = 20;\n\n            get color() {\n                const ratio = (this.thrustSpeed - Bird.MIN_THRUST_SPEED) / (Bird.MAX_THRUST_SPEED - Bird.MIN_THRUST_SPEED);\n                const red = Math.round(255 * ratio);\n                const blue = Math.round(255 * (1 - ratio));\n                return `rgb(${red}, 0, ${blue})`;\n            }\n\n            constructor(x: number, y: number) {\n                super({ x, y, mass: 1 });\n                this.radius = 5;\n                this.maxSpeed = 1500;\n                this.friction = 0.01;\n            }\n\n            chase(target: Point) {\n                this.pointTowards(target, this.turnSpeed);\n                this.thrust(this.thrustSpeed);\n            }\n\n            update(deltaTime: number) {\n                super.update(deltaTime);\n\n                // Add the current position to the trail\n                this.trail.push({ ...this.position });\n\n                // Keep only the last 20 positions\n                if (this.trail.length > this.trailLength) {\n                    this.trail.shift();\n                }\n            }\n        }\n\n        const birds: Bird[] = Array.from({ length: 50 }, () => \n            new Bird(Math.random() * canvas.width, Math.random() * canvas.height)\n        );\n\n        const addBirds = (count: number) => {\n            for (let i = 0; i < count; i++) {\n                birds.push(new Bird(Math.random() * canvas.width, Math.random() * canvas.height));\n            }\n        };\n\n        const removeBirds = (count: number) => {\n            birds.splice(-count, count);\n        };\n\n        let mousePos: Point = { x: canvas.width / 2, y: canvas.height / 2 };\n\n        move({ canvas, draw }, (pos) => {\n            mousePos = pos;\n        });\n\n        function update(deltaTime: number) {\n            birds.forEach((bird, i) => {\n                // Chase the mouse\n                bird.chase(mousePos);\n\n                // Repel from other birds\n                birds.slice(i + 1).forEach(other => {\n                    physics.repel(bird, other, 20)\n                });\n\n                bird.update(deltaTime);\n            });\n        }\n\n        function draw() {\n            clearCanvas(ctx);\n\n            // Draw birds\n            birds.forEach(bird => {\n                drawPoint(ctx, bird.position, bird.color, 2);\n\n                // Draw the trailing path\n                ctx.beginPath();\n                bird.trail.forEach(pos => \n                    ctx.lineTo(pos.x, pos.y)\n                );\n                ctx.strokeStyle = bird.color;\n                ctx.stroke();\n            });\n\n            // Draw mouse position\n            drawCircle(ctx, { x: mousePos.x, y: mousePos.y, radius: 5 }, 'red', true);\n\n            // Render results\n            drawResults(ctx, [\n                ['Number of Birds', birds.length, { precision: 0 }],\n                'Move the mouse to attract the birds',\n                'Press +/- to add/remove 10 birds'\n            ]);\n        }\n\n        key({ canvas, draw }, {\n            '+': () => addBirds(10),\n            '-': () => removeBirds(10),\n        });\n\n        return simulate(update, draw);\n    }\n};\n"],"names":["t","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$e5ed8027d647799b$var$t","globalThis","$e5ed8027d647799b$var$i","trustedTypes","$e5ed8027d647799b$var$s","createPolicy","createHTML","$e5ed8027d647799b$var$e","$e5ed8027d647799b$var$h","Math","random","toFixed","slice","$e5ed8027d647799b$var$o","$e5ed8027d647799b$var$n","$e5ed8027d647799b$var$r","document","$e5ed8027d647799b$var$l","createComment","$e5ed8027d647799b$var$c","$e5ed8027d647799b$var$a","Array","isArray","$e5ed8027d647799b$var$u","Symbol","iterator","$e5ed8027d647799b$var$d","$e5ed8027d647799b$var$f","$e5ed8027d647799b$var$v","$e5ed8027d647799b$var$_","$e5ed8027d647799b$var$m","RegExp","$e5ed8027d647799b$var$p","$e5ed8027d647799b$var$g","$e5ed8027d647799b$var$$","$e5ed8027d647799b$var$y","i","_$litType$","strings","values","$e5ed8027d647799b$export$c0bb0b647f701bb5","$e5ed8027d647799b$export$9c068ae9cc5db4e8","for","$e5ed8027d647799b$export$45b790e32b2810ee","$e5ed8027d647799b$var$A","WeakMap","$e5ed8027d647799b$var$C","createTreeWalker","$e5ed8027d647799b$var$P","hasOwnProperty","Error","$e5ed8027d647799b$var$V","length","o","r","l","c","a","u","d","y","lastIndex","exec","test","x","startsWith","push","$e5ed8027d647799b$var$N","constructor","parts","f","el","createElement","currentNode","content","firstChild","replaceWith","childNodes","nextNode","nodeType","hasAttributes","getAttributeNames","endsWith","getAttribute","split","type","index","name","ctor","$e5ed8027d647799b$var$H","$e5ed8027d647799b$var$I","$e5ed8027d647799b$var$L","$e5ed8027d647799b$var$k","removeAttribute","tagName","textContent","emptyScript","append","data","indexOf","innerHTML","$e5ed8027d647799b$var$S","h","_$Co","_$Cl","_$litDirective$","_$AO","_$AT","_$AS","$e5ed8027d647799b$var$M","_$AV","_$AN","_$AD","_$AM","parentNode","_$AU","creationScope","importNode","$e5ed8027d647799b$var$R","nextSibling","$e5ed8027d647799b$var$z","p","_$AI","_$Cv","_$AH","_$AA","_$AB","options","isConnected","startNode","endNode","_$AR","_","$","T","k","O","insertBefore","createTextNode","_$AC","_$AP","remove","setConnected","element","fill","String","j","setAttribute","arguments","toggleAttribute","capture","once","passive","removeEventListener","addEventListener","handleEvent","call","host","$e5ed8027d647799b$var$j","litHtmlPolyfillSupport","litHtmlVersions","$e5ed8027d647799b$export$b3890eb0ae9dca99","renderBefore","_$litPart$","$3baabda811939da5$export$befdefbdce210f91","_$Ct","_$Ci","update","render","I","$ead5767561d7cbc1$var$t","M","P","A","C","L","R","D","V","H","N","U","B","F","$ead5767561d7cbc1$var$s","$ead5767561d7cbc1$export$291b2338ad9b0b30","_$AQ","$ead5767561d7cbc1$export$cb8bf9562088e9f4","$ead5767561d7cbc1$var$u","$ead5767561d7cbc1$export$ea70d9dd5965b1c8","$ead5767561d7cbc1$export$59e9bce518cde500","$ead5767561d7cbc1$export$3133b3144bbba267","$e41d1b66de65ecc4$var$u","Map","$e41d1b66de65ecc4$export$76d90c956114f2c2","dt","keys","ut","m","w","has","$ee083671c43a5e14$exports","$ee083671c43a5e14$export$9f17032d917177de","$ee083671c43a5e14$export$d019ad931e844842","$ee083671c43a5e14$export$f2e8a19be46147af","$ee083671c43a5e14$export$ff7f7c97cdce86e","$ee083671c43a5e14$export$489c99c59eb9ceb1","$ee083671c43a5e14$export$4a253f8fe7a58694","$ee083671c43a5e14$export$ff9583e4b2d0fe53","$ee083671c43a5e14$export$5145a8075501ee31","$ee083671c43a5e14$export$89e29e4ab65e70a9","p1","p2","dx","dy","sqrt","target","points","reduce","closest","point","circle","distSquared","radius","rect","width","height","line","end","start","lineLength","distToLine","current","maxDistance","dist","max","min","$086612735116fd75$export$a1c066623ac679d3","ctx","clearRect","canvas","$086612735116fd75$export$654275d54901f10e","color","size","fillStyle","beginPath","arc","PI","$086612735116fd75$export$8daab6f91f7ff730","strokeStyle","stroke","$086612735116fd75$export$819db45aec5fcbe5","lineWidth","moveTo","lineTo","$086612735116fd75$export$92e8c004f9e4bf7d","fillRect","strokeRect","$086612735116fd75$export$f6d70d79295e1392","from","to","angle","atan2","headSize","cos","sin","$086612735116fd75$export$bf8a3f9983094125","center","startAngle","endAngle","$086612735116fd75$export$4880d2177ba2b4c0","results","spacing","precision","forEach","entry","$086612735116fd75$export$b11bd9a0808bdc9","text","font","fillText","$086612735116fd75$var$formatValue","value","num","map","join","$086612735116fd75$export$63550218646aa6fc","evt","pos","$086612735116fd75$export$8b59d3c9ad87edcd","getBoundingClientRect","clientX","left","clientY","top","$086612735116fd75$export$d7d5d435647ed5a0","draw","handlers","isDragging","onStart","onDrag","onEnd","$086612735116fd75$export$64ef1bee2b9504c1","handler","$086612735116fd75$export$d947e5f4f4c48d48","$086612735116fd75$export$df61b30b684217c0","mappings","normalizeKey","key","toLowerCase","entries","acc","callback","trim","tabIndex","focus","$086612735116fd75$var$currentAnimation","$086612735116fd75$export$e3607ec2d7a891c4","udpate","loop","requestAnimationFrame","$086612735116fd75$export$1e61084297db69ac","lastTime","performance","now","time","deltaTime","$086612735116fd75$export$b602ad7a6da8e372","drawFn","save","translate","restore","$086612735116fd75$export$712d35b7f1932be6","$086612735116fd75$export$ed97f33186d4b816","pressedKeys","Set","listener","listen","add","code","delete","window","isDown","keyCode","stop","clear","$7d6e798d0a09cf0e$exports","$7d6e798d0a09cf0e$export$c9fcf1a7df975d78","$7d6e798d0a09cf0e$export$c41dd2a8460d3196","$7d6e798d0a09cf0e$export$3a4b8e4b64134e7c","$7d6e798d0a09cf0e$export$ea8f9eb72b6b55d","$7d6e798d0a09cf0e$export$96f15a967e7c135d","$7d6e798d0a09cf0e$export$de2bf753b2214bd5","$7d6e798d0a09cf0e$export$4db6634817520e36","$7d6e798d0a09cf0e$export$8a7ae1f8cb144188","$7d6e798d0a09cf0e$export$4c204ff3dcb25f97","$7d6e798d0a09cf0e$export$295b780a357000fd","$7d6e798d0a09cf0e$export$33ea901e4ef74ae7","$7d6e798d0a09cf0e$export$6162db30a42a5821","degrees","radians","line1","line2","dx1","dy1","dx2","dy2","magnitude1","magnitude2","acos","dotProduct","degrees1","degrees2","radians1","diff","radians2","angleRadians","angleToTarget","distanceToTarget","angleDegrees","currentAngleRadians","targetAngleRadians","rotateAmountRadians","normalizedTarget","abs","sign","currentAngleDegrees","targetAngleDegrees","rotateAmountDegrees","$97fc7d4a5f524dad$export$7f9972325ebfd559","$97fc7d4a5f524dad$export$e16d8520af44a096","v1","v2","$97fc7d4a5f524dad$export$4e2d2ead65e5f7e3","$97fc7d4a5f524dad$export$dcdf75081b88279d","scalar","$97fc7d4a5f524dad$export$f24224f1c91d8156","$97fc7d4a5f524dad$export$411e9a7b4316b872","edge","$97fc7d4a5f524dad$export$a3295358bff77e","len","$97fc7d4a5f524dad$export$7d15b64cf5a3a4c4","minLength","maxLength","clampedLength","$97fc7d4a5f524dad$export$89e29e4ab65e70a9","$97fc7d4a5f524dad$export$dcb617f3d34308fe","dp","$97fc7d4a5f524dad$export$9debe8cffacea23","vector","normal","$97fc7d4a5f524dad$export$94132a0e348806d4","$97fc7d4a5f524dad$export$b1d53cea8aef9694","$97fc7d4a5f524dad$export$e92f669ea83c5a35","$97fc7d4a5f524dad$export$c78ecdc202171e36","$97fc7d4a5f524dad$export$62f2d546c3c709dc","$97fc7d4a5f524dad$export$4380c87abf28fdf","newLength","$e0f9ecfe35f13ee3$export$717b54132acde7e2","p3","p4","denom","$e0f9ecfe35f13ee3$export$87a9ad0c3c05abf7","cx","cy","b","discriminant","t1","t2","$e0f9ecfe35f13ee3$export$1064a8e0d217f0ed","intersections","rectLines","rectLine","intersection","$e0f9ecfe35f13ee3$export$8e4f20627449cf66","circle1","circle2","overlap","$e0f9ecfe35f13ee3$export$e90bccbb88aa9786","rect1","rect2","$5dda501f4a9774dc$exports","$5dda501f4a9774dc$export$da81038170e85b8c","$5dda501f4a9774dc$export$da1fe76f9b6a25f","$5dda501f4a9774dc$export$a7d88964434daaec","$5dda501f4a9774dc$export$3ffb1581bff1af41","$5dda501f4a9774dc$export$98e6d07575f46913","$5dda501f4a9774dc$export$709f6946f4e97408","$5dda501f4a9774dc$export$168bb2ff78cb66b4","$5dda501f4a9774dc$export$86e87f677abfca4b","$5dda501f4a9774dc$export$fbe21c35773c13ce","force","scaler","damping","angularVelocity","torque","obj1","obj2","restitution","resolveOverlapMode","position","velocityAlongNormal","velocity","impulseVector","impulseMagnitude","mass","direction","totalMass","correction","obj1Correction","obj2Correction","strength","repulsionForce","obj1Strength","obj2Strength","particles","smoothingRadius","stiffness","restDensity","viscosity","forces","grid","getGridKey","floor","density","gx","gy","Number","neighbors","neighbor","pressure","pressureForce","viscosityForce","boids","rules","separationRadius","alignmentRadius","cohesionRadius","separationWeight","alignmentWeight","cohesionWeight","maxSpeed","boid","separation","alignment","cohesion","neighborCount","other","away","speed","$e80cf0db060d44c4$export$324e885649fee72","DOWNWARD_GRAVITY","props","acceleration","elasticity","collisionOverlapResolution","minSpeed","angularDrag","friction","gravity","drag","assign","undefined","applyForce","applyImpulse","impulse","applyTorque","thrust","pointAt","pointTowards","rotationSpeed","targetAngle","collideWithBody","collideWithSurface","$1d47723cd548cd0a$export$7eb1b49cd2af1357","distance","getContext","distanceSquared","midpoint","mid","mousePos","generatePoints","isPointInCircle","isInside","isPointInRectangle","isPointInLine","moveTowards","interpolate","interpolated","degreesToRadians","normalEnd","angleEnd","radiansToDegrees","radiansBetweenLines","endpoint","degreesBetweenLines","radiansBetweenPoints","degreesBetweenPoints","degreesBetweenAngles","angle1","angle2","end1","end2","radiansBetweenAngles","rotateAroundByRadians","step","rotateAroundByDegrees","rotateAngleTowardsRadians","currentAngle","arrowEnd","rotateAngleTowardsDegrees","getLineIntersection","draggedPoint","getLineCircleIntersections","lineSegment","getLineRectIntersections","getCircleOverlap","draggedCircle","overlapCenter","getRectanglesIntersection","draggedRect","intersectionRect","zero","origin","subtract","scale","normalVector","normalStart","normalize","clamp","result","interpolateInverse","projected","reflect","fromAngleRadians","fromAngleDegrees","rotateByRadians","rotateByDegrees","dot","projectionScale","resize","body","Ball","grabbed","grabOffset","balls","draggedBall","dragStart","lastPos","overlapModes","currentOverlapModeIndex","addBall","ball","resetBalls","currentTime","dragVel","pop","MAX_SAFE_INTEGER","b1","b2","BilliardBall","pockets","colors","row","idx","pocket","aimLine","cueBall","pullBack","some","splice","ship","thrusting","stars","thrustVector","life","filter","star","rotate","closePath","Cannonball","cannon","power","charging","chargeStartTime","startCharging","stopCharging","calculatePower","minPower","chargeDuration","hit","applyGravity","reset","cannonball","score","ground","cannonEnd","powerArrowEnd","Bullet","timeAlive","Obstacle","tank","turretAngle","throttle","turretRotationSpeed","mouseTargetAngle","bullets","obstacles","bullet","obstacle","bulletPos","turnSpeed","throttleSpeed","o1","o2","car","steering","Bird","MIN_THRUST_SPEED","MAX_THRUST_SPEED","ratio","thrustSpeed","red","round","blue","trail","trailLength","chase","shift","birds","addBirds","count","removeBirds","bird","repel","physics","applyDamping","applyAngleForce","forceMagnitude","isMouseDown","collide","isSimulationRunning","draggedPosition","init1","init2","separate","objects","createRandomObject","obj","noise","noisyPos","repelStrength","fluid","settings","lastMousePos","dragVector","dragForce","wanderingAngles","bodyLength","bodyWidth","wanderForce","wallForces","wallAvoidanceWeight","mouseDist","mouseForce","mouseAvoidanceWeight","$d7fbee754ebec663$var$route","section","method","location","hash","demo","getElementById","cancelAnimationFrame","currentSection","Date","id","querySelector","global","policy","boundAttributeSuffix","marker","markerMatch","nodeMarker","createMarker","isPrimitive","isIterable","SPACE_CHAR","textEndRegex","commentEndRegex","comment2EndRegex","tagEndRegex","singleQuoteAttrEndRegex","doubleQuoteAttrEndRegex","rawTextElement","tag","html","svg","mathml","noChange","nothing","templateCache","walker","trustFromTemplateString","tsa","stringFromTSA","getTemplateHtml","attrNames","rawTextEndRegex","regex","attrName","match","attrNameEndIndex","Template","node","this","nodeIndex","attrNameIndex","partCount","wrapper","realName","statics","PropertyPart","BooleanAttributePart","EventPart","AttributePart","_options","resolveDirective","part","parent","attributeIndex","currentDirective","__directives","__directive","nextDirectiveConstructor","_$initialize","_$resolve","TemplateInstance","template","_$parts","_$disconnectableChildren","_$template","_$parent","_$isConnected","_clone","fragment","partIndex","templatePart","ChildPart","ElementPart","_update","_$setValue","__isConnected","_$committedValue","_$startNode","_$endNode","directiveParent","_$clear","_commitText","_commitTemplateResult","_commitNode","_commitIterable","_insert","_$getTemplate","instance","itemParts","itemPart","item","_$notifyConnectionChanged","valueIndex","noCommit","change","_commitValue","super","newListener","oldListener","shouldRemoveListener","shouldAddListener","event","_$LH","_boundAttributeSuffix","_marker","_markerMatch","_HTML_RESULT","_getTemplateHtml","_TemplateInstance","_isIterable","_resolveDirective","_ChildPart","_AttributePart","_BooleanAttributePart","_EventPart","_PropertyPart","_ElementPart","polyfillSupport","container","partOwnerNode","generateMap","list","repeat","directive","Directive","partInfo","PartType","CHILD","_getValuesAndKeys","items","keyFnOrTemplate","keyFn","containerPart","oldParts","getCommittedValue","newValues","newKeys","_itemKeys","oldKeys","newParts","newKeyToIndexMap","oldKeyToIndexMap","oldHead","oldTail","newHead","newTail","setChildPartValue","insertPart","oldIndex","oldPart","newPart","removePart","setCommittedValue","ATTRIBUTE","PROPERTY","BOOLEAN_ATTRIBUTE","EVENT","ELEMENT","_partInfo","__part","__attributeIndex","_part","TemplateResultType","HTML","SVG","MATHML","isTemplateResult","isCompiledTemplateResult","isDirectiveResult","getDirectiveClass","isSingleExpression","refPart","refNode","oldParent","parentChanged","newConnectionState","_$reparentDisconnectables","RESET_VALUE","clearPart"],"version":3,"file":"demo.93048f35.js.map"}